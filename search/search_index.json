{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u672c\u6559\u7a0b\u5199\u7ed9\u5177\u6709C++\u7f16\u7a0b\u7ecf\u9a8c\u7684\u7a0b\u5e8f\u5458\uff0c\u5e0c\u671b\u80fd\u5e2e\u52a9\u66f4\u597d\u5730\u5b66\u4e60\u548c\u7406\u89e3Python\u3002 \u5173\u4e8ePython Python \u662f\u4e00\u79cd\u6781\u5c11\u6570\u80fd\u517c\u5177 \u7b80\u5355 \u4e0e \u529f\u80fd\u5f3a\u5927 \u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u4f60\u5c06\u60ca\u5f02\u4e8e\u53d1\u73b0\u4f60\u6b63\u5728\u4f7f\u7528\u7684\u8fd9\u95e8\u7f16\u7a0b\u8bed\u8a00\u662f\u5982\u6b64\u7b80\u5355\uff0c\u5b83\u4e13\u6ce8\u4e8e\u5982\u4f55\u89e3\u51b3\u95ee\u9898\uff0c\u800c\u975e\u62d8\u6ce5\u4e8e\u8bed\u6cd5\u4e0e\u7ed3\u6784\u3002 \u2014\u2014 \u300a\u7b80\u660ePython\u6559\u7a0b\u300b \u5b98\u65b9\u5bf9 Python \u7684\u4ecb\u7ecd\u5982\u4e0b\uff1a Python \u662f\u4e00\u6b3e \u6613\u4e8e\u5b66\u4e60 \u4e14\u529f\u80fd\u5f3a\u5927\u7684\u7f16\u7a0b\u8bed\u8a00\u3002 \u5b83\u5177\u6709\u9ad8\u6548\u7387\u7684\u6570\u636e\u7ed3\u6784\uff0c\u80fd\u591f\u7b80\u5355\u53c8\u6709\u6548\u5730\u5b9e\u73b0\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u3002Python \u7b80\u6d01\u7684\u8bed\u6cd5\u4e0e\u52a8\u6001\u8f93\u5165\u4e4b\u7279\u6027\uff0c\u52a0\u4e4b\u5176\u89e3\u91ca\u6027\u8bed\u8a00\u7684\u672c\u8d28\uff0c\u4f7f\u5f97\u5b83\u6210\u4e3a\u4e00\u79cd\u5728 \u591a\u79cd\u9886\u57df \u4e0e \u7edd\u5927\u591a\u6570\u5e73\u53f0 \u90fd\u80fd\u8fdb\u884c\u811a\u672c\u7f16\u5199\u4e0e\u5e94\u7528 \u5feb\u901f\u5f00\u53d1 \u5de5\u4f5c\u7684\u7406\u60f3\u8bed\u8a00\u3002 Python\u7684\u8bde\u751f 1989\u5e74\u5723\u8bde\u8282\u671f\u95f4\uff0c\u5728\u963f\u59c6\u65af\u7279\u4e39\uff0cGuido\u4e3a\u4e86\u6253\u53d1\u5723\u8bde\u8282\u7684\u65e0\u8da3\uff0c\u51b3\u5fc3\u5f00\u53d1\u4e00\u4e2a\u65b0\u7684\u811a\u672c\u89e3\u91ca\u7a0b\u5e8f\uff0c\u4f5c\u4e3aABC\u8bed\u8a00\u7684\u4e00\u79cd\u7ee7\u627f\u3002\u4e4b\u6240\u4ee5\u9009\u4e2dPython\uff08\u5927\u87d2\u86c7\u7684\u610f\u601d\uff09\u4f5c\u4e3a\u8be5\u7f16\u7a0b\u8bed\u8a00\u7684\u540d\u5b57\uff0c\u662f\u53d6\u81ea\u82f1\u56fd20\u4e16\u7eaa70\u5e74\u4ee3\u9996\u64ad\u7684\u7535\u89c6\u559c\u5267\u300a\u8499\u63d0\u00b7\u6d3e\u68ee\u7684\u98de\u884c\u9a6c\u620f\u56e2\u300b\uff08Monty Python's Flying Circus\uff09\u3002 ABC\u662f\u7531Guido\u53c2\u52a0\u8bbe\u8ba1\u7684\u4e00\u79cd\u6559\u5b66\u8bed\u8a00\u3002\u5c31Guido\u672c\u4eba\u770b\u6765\uff0c ABC\u8fd9\u79cd\u8bed\u8a00\u975e\u5e38\u4f18\u7f8e\u548c\u5f3a\u5927\uff0c\u662f\u4e13\u95e8\u4e3a\u975e\u4e13\u4e1a\u7a0b\u5e8f\u5458\u8bbe\u8ba1\u7684 \u3002\u4f46\u662fABC\u8bed\u8a00\u5e76\u6ca1\u6709\u6210\u529f\uff0c\u7a76\u5176\u539f\u56e0\uff0cGuido\u8ba4\u4e3a\u662f\u5176\u975e\u5f00\u653e\u9020\u6210\u7684\u3002Guido\u51b3\u5fc3\u5728Python\u4e2d\u907f\u514d\u8fd9\u4e00\u9519\u8bef\u3002\u540c\u65f6\uff0c\u4ed6\u8fd8\u60f3\u5b9e\u73b0\u5728ABC\u4e2d\u95ea\u73b0\u8fc7\u4f46\u672a\u66fe\u5b9e\u73b0\u7684\u4e1c\u897f\u3002 \u53ef\u4ee5\u770b\u51faGuido\u5728\u521b\u9020Python\u8bed\u8a00\u7684\u65f6\u5019\u5c31\u8003\u8651\u4e86\u4e3a\u975e\u4e13\u4e1a\u7a0b\u5e8f\u5458\u8bbe\u8ba1\uff0cPython\u5982\u6b64\u7b80\u5355\u6613\u7528\u4e5f\u5c31\u4e0d\u5947\u602a\u4e86\u3002 Python\u7684\u5e94\u7528\u9886\u57df Python\u7684\u5e94\u7528\u9886\u57df\u975e\u5e38\u5e7f\u6cdb\uff0c\u65e0\u8bba\u4ece\u54ea\u4e2a\u89d2\u5ea6\u770b\uff0cPython\u90fd\u662f\u5f00\u53d1\u8005\u975e\u5e38\u503c\u5f97\u5b66\u4e60\u7684\u4e00\u95e8\u8bed\u8a00\u3002 AI and machine learning. Data analytics. Data visualisation. Programming applications. Web development. Game development. Language development. Finance. ... \u53c2\u8003\u8d44\u6599 \u300aPython \u57fa\u7840\u6559\u7a0b\u300b \u300aA Byte of Python\u300b \u300aFunctional Programming in Python\u300b","title":"\u524d\u8a00"},{"location":"#python","text":"Python \u662f\u4e00\u79cd\u6781\u5c11\u6570\u80fd\u517c\u5177 \u7b80\u5355 \u4e0e \u529f\u80fd\u5f3a\u5927 \u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u4f60\u5c06\u60ca\u5f02\u4e8e\u53d1\u73b0\u4f60\u6b63\u5728\u4f7f\u7528\u7684\u8fd9\u95e8\u7f16\u7a0b\u8bed\u8a00\u662f\u5982\u6b64\u7b80\u5355\uff0c\u5b83\u4e13\u6ce8\u4e8e\u5982\u4f55\u89e3\u51b3\u95ee\u9898\uff0c\u800c\u975e\u62d8\u6ce5\u4e8e\u8bed\u6cd5\u4e0e\u7ed3\u6784\u3002 \u2014\u2014 \u300a\u7b80\u660ePython\u6559\u7a0b\u300b \u5b98\u65b9\u5bf9 Python \u7684\u4ecb\u7ecd\u5982\u4e0b\uff1a Python \u662f\u4e00\u6b3e \u6613\u4e8e\u5b66\u4e60 \u4e14\u529f\u80fd\u5f3a\u5927\u7684\u7f16\u7a0b\u8bed\u8a00\u3002 \u5b83\u5177\u6709\u9ad8\u6548\u7387\u7684\u6570\u636e\u7ed3\u6784\uff0c\u80fd\u591f\u7b80\u5355\u53c8\u6709\u6548\u5730\u5b9e\u73b0\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u3002Python \u7b80\u6d01\u7684\u8bed\u6cd5\u4e0e\u52a8\u6001\u8f93\u5165\u4e4b\u7279\u6027\uff0c\u52a0\u4e4b\u5176\u89e3\u91ca\u6027\u8bed\u8a00\u7684\u672c\u8d28\uff0c\u4f7f\u5f97\u5b83\u6210\u4e3a\u4e00\u79cd\u5728 \u591a\u79cd\u9886\u57df \u4e0e \u7edd\u5927\u591a\u6570\u5e73\u53f0 \u90fd\u80fd\u8fdb\u884c\u811a\u672c\u7f16\u5199\u4e0e\u5e94\u7528 \u5feb\u901f\u5f00\u53d1 \u5de5\u4f5c\u7684\u7406\u60f3\u8bed\u8a00\u3002","title":"\u5173\u4e8ePython"},{"location":"#python_1","text":"1989\u5e74\u5723\u8bde\u8282\u671f\u95f4\uff0c\u5728\u963f\u59c6\u65af\u7279\u4e39\uff0cGuido\u4e3a\u4e86\u6253\u53d1\u5723\u8bde\u8282\u7684\u65e0\u8da3\uff0c\u51b3\u5fc3\u5f00\u53d1\u4e00\u4e2a\u65b0\u7684\u811a\u672c\u89e3\u91ca\u7a0b\u5e8f\uff0c\u4f5c\u4e3aABC\u8bed\u8a00\u7684\u4e00\u79cd\u7ee7\u627f\u3002\u4e4b\u6240\u4ee5\u9009\u4e2dPython\uff08\u5927\u87d2\u86c7\u7684\u610f\u601d\uff09\u4f5c\u4e3a\u8be5\u7f16\u7a0b\u8bed\u8a00\u7684\u540d\u5b57\uff0c\u662f\u53d6\u81ea\u82f1\u56fd20\u4e16\u7eaa70\u5e74\u4ee3\u9996\u64ad\u7684\u7535\u89c6\u559c\u5267\u300a\u8499\u63d0\u00b7\u6d3e\u68ee\u7684\u98de\u884c\u9a6c\u620f\u56e2\u300b\uff08Monty Python's Flying Circus\uff09\u3002 ABC\u662f\u7531Guido\u53c2\u52a0\u8bbe\u8ba1\u7684\u4e00\u79cd\u6559\u5b66\u8bed\u8a00\u3002\u5c31Guido\u672c\u4eba\u770b\u6765\uff0c ABC\u8fd9\u79cd\u8bed\u8a00\u975e\u5e38\u4f18\u7f8e\u548c\u5f3a\u5927\uff0c\u662f\u4e13\u95e8\u4e3a\u975e\u4e13\u4e1a\u7a0b\u5e8f\u5458\u8bbe\u8ba1\u7684 \u3002\u4f46\u662fABC\u8bed\u8a00\u5e76\u6ca1\u6709\u6210\u529f\uff0c\u7a76\u5176\u539f\u56e0\uff0cGuido\u8ba4\u4e3a\u662f\u5176\u975e\u5f00\u653e\u9020\u6210\u7684\u3002Guido\u51b3\u5fc3\u5728Python\u4e2d\u907f\u514d\u8fd9\u4e00\u9519\u8bef\u3002\u540c\u65f6\uff0c\u4ed6\u8fd8\u60f3\u5b9e\u73b0\u5728ABC\u4e2d\u95ea\u73b0\u8fc7\u4f46\u672a\u66fe\u5b9e\u73b0\u7684\u4e1c\u897f\u3002 \u53ef\u4ee5\u770b\u51faGuido\u5728\u521b\u9020Python\u8bed\u8a00\u7684\u65f6\u5019\u5c31\u8003\u8651\u4e86\u4e3a\u975e\u4e13\u4e1a\u7a0b\u5e8f\u5458\u8bbe\u8ba1\uff0cPython\u5982\u6b64\u7b80\u5355\u6613\u7528\u4e5f\u5c31\u4e0d\u5947\u602a\u4e86\u3002","title":"Python\u7684\u8bde\u751f"},{"location":"#python_2","text":"Python\u7684\u5e94\u7528\u9886\u57df\u975e\u5e38\u5e7f\u6cdb\uff0c\u65e0\u8bba\u4ece\u54ea\u4e2a\u89d2\u5ea6\u770b\uff0cPython\u90fd\u662f\u5f00\u53d1\u8005\u975e\u5e38\u503c\u5f97\u5b66\u4e60\u7684\u4e00\u95e8\u8bed\u8a00\u3002 AI and machine learning. Data analytics. Data visualisation. Programming applications. Web development. Game development. Language development. Finance. ...","title":"Python\u7684\u5e94\u7528\u9886\u57df"},{"location":"#_1","text":"\u300aPython \u57fa\u7840\u6559\u7a0b\u300b \u300aA Byte of Python\u300b \u300aFunctional Programming in Python\u300b","title":"\u53c2\u8003\u8d44\u6599"},{"location":"0-programming-languages/","text":"\u7f16\u7a0b\u8bed\u8a00\u6f2b\u8c08 \u8ba1\u7b97\u673a\u7684\u8bde\u751f \u6700\u65e9\u7684\u8ba1\u7b97\u673a\u4ec5\u4ec5\u662f\u4e3a\u4e86\u89e3\u51b3\u590d\u6742\u800c\u7e41\u91cd\u7684\u6570\u5b57\u8fd0\u7b97\u800c\u8bbe\u8ba1\uff0c\u5176\u529f\u80fd\u548c\u4f7f\u7528\u65b9\u5f0f\u548c\u6211\u4eec\u73b0\u5728\u7528\u7684 \u8ba1\u7b97\u5668 \u63a5\u8fd1\uff0c\u8fd9\u4e00\u9636\u6bb5\u7684computer\u66f4\u50cf\u662fcalculator\u3002 \u5f53\u8ba1\u7b97\u673a\u88ab\u8bbe\u8ba1\u51fa\u6765\u4e4b\u540e\uff0c\u5b83\u7684\u5f3a\u5927\u529b\u91cf\u5f00\u59cb\u9010\u6e10\u5c55\u73b0\uff0c\u5176\u6240\u80fd\u591f\u89e3\u51b3\u7684\u95ee\u9898\u8fdc\u8fdc\u8d85\u51fa\u4e86\u6570\u5b57\u8fd0\u7b97\u7684\u8303\u7574\uff0c\u8fd9\u6050\u6015\u4e5f\u662f\u6700\u65e9\u7684\u8ba1\u7b97\u673a\u8bbe\u8ba1\u8005\u59cb\u6599\u672a\u53ca\u7684\u3002 1801\u5e74 \u6cd5\u56fd\u53d1\u660e\u5bb6Joseph-Marie Jacquard\u8bbe\u8ba1\u51fa\u4e00\u79cd\u4e13\u7528\u8ba1\u7b97\u673a\uff1a\u7ec7\u5e03\u673a\u3002Jacquard\u7684\u7ec7\u5e03\u673a\u5229\u7528\u6253\u4e86\u5b54\u7684\u5361\u7247\u4e3a\u56fe\u6837\u7f16\u5236\u7a0b\u5e8f\uff0c\u800c\u8f93\u51fa\u7684\u662f\u7ec7\u597d\u7684\u5e03\u5339\u3002\u867d\u7136\u8fd9\u8fd8\u7b97\u4e0d\u4e0a\u4e00\u6b3e\u771f\u6b63\u7684\u8ba1\u7b97\u673a\uff0c\u4f46\u5176\u5bf9\u5c06\u6765\u53d1\u5c55\u51fa\u5176\u4ed6\u53ef\u7f16\u7a0b\u673a\u5668\u8d77\u4e86\u91cd\u8981\u4f5c\u7528\u3002 1821\u5e74 \u82f1\u56fd\u6570\u5b66\u5bb6Charles Babbage \u6784\u60f3\u51fa\u4e00\u53f0 1834\u5e74\u53d1\u660e\u4e86\u5206\u6790\u673a\uff08\u73b0\u4ee3\u7535\u5b50\u8ba1\u7b97\u673a\u7684\u524d\u8eab\uff09\u7684\u539f\u7406\u3002\u5728\u8fd9\u9879\u8bbe\u8ba1\u4e2d\uff0c\u4ed6\u66fe\u8bbe\u60f3\u6839\u636e\u50a8\u5b58\u6570\u636e\u7684\u7a7f\u5b54\u5361\u4e0a\u7684\u6307\u4ee4\u8fdb\u884c\u4efb\u4f55\u6570\u5b66\u8fd0\u7b97\u7684\u53ef\u80fd\u6027\uff0c\u5e76\u8bbe\u60f3\u4e86\u73b0\u4ee3\u8ba1\u7b97\u673a\u6240\u5177\u6709\u7684\u5927\u591a\u6570\u5176\u4ed6\u7279\u6027\uff0c\u4f46\u56e0 1842 \u5e74\u653f\u5e9c\u62d2\u7edd\u8fdb\u4e00\u6b65\u652f\u6301\u4ed6\u7684\u5de5\u4f5c\uff0c\u5df4\u8d1d\u5947\u7684\u8ba1\u7b97\u5668\u672a\u80fd\u5b8c\u6210\u3002 1848\u5e74 \u82f1\u56fd\u6570\u5b66\u5bb6\u3001\u8bd7\u4eba\u62dc\u4f26\u52cb\u7235\u7684\u5973\u513f Ada Lovelace \u7f16\u5199\u4e86\u4e16\u754c\u4e0a\u7b2c\u4e00\u4e2a\u8ba1\u7b97\u673a\u7a0b\u5e8f\u3002\u6839\u636e\u5fb7\u56fd\u660e\u65af\u7279\u5927\u5b66\u7406\u8bba\u6570\u5b66\u6559\u6388\u5b89\u5a1c\u00b7\u897f\u5f17\u7279\u7684\u8bf4\u6cd5\uff0c\u6d1b\u592b\u83b1\u65af\u7f16\u5199\u4e86\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u540c\u65f6\u5c06\u5173\u4e8e\u5df4\u8d1d\u5947\u5206\u6790\u5f15\u64ce\u7684\u8bba\u6587\u4ece\u6cd5\u8bed\u7ffb\u8bd1\u6210\u82f1\u8bed\u3002Lovelace \u8fd8\u4e3a\u4f7f\u7528 Babbage \u7684\u673a\u5668\u8ba1\u7b97\u4f2f\u52aa\u5229\u6570\u6dfb\u52a0\u4e86\u4e00\u6b65\u4e00\u6b65\u7684\u63cf\u8ff0\uff08\u57fa\u672c\u4e0a\u662f\u4e00\u79cd\u7b97\u6cd5\uff09\uff0c\u8fd9\u5b9e\u9645\u4e0a\u4f7f\u5979\u6210\u4e3a\u4e16\u754c\u4e0a\u7b2c\u4e00\u4e2a\u8ba1\u7b97\u673a\u7a0b\u5e8f\u5458\u3002 \u53c2\u8003\u8d44\u6599 https://www.livescience.com/20718-computer-history.html","title":"\u7f16\u7a0b\u8bed\u8a00\u6f2b\u8c08"},{"location":"0-programming-languages/#_1","text":"","title":"\u7f16\u7a0b\u8bed\u8a00\u6f2b\u8c08"},{"location":"0-programming-languages/#_2","text":"\u6700\u65e9\u7684\u8ba1\u7b97\u673a\u4ec5\u4ec5\u662f\u4e3a\u4e86\u89e3\u51b3\u590d\u6742\u800c\u7e41\u91cd\u7684\u6570\u5b57\u8fd0\u7b97\u800c\u8bbe\u8ba1\uff0c\u5176\u529f\u80fd\u548c\u4f7f\u7528\u65b9\u5f0f\u548c\u6211\u4eec\u73b0\u5728\u7528\u7684 \u8ba1\u7b97\u5668 \u63a5\u8fd1\uff0c\u8fd9\u4e00\u9636\u6bb5\u7684computer\u66f4\u50cf\u662fcalculator\u3002 \u5f53\u8ba1\u7b97\u673a\u88ab\u8bbe\u8ba1\u51fa\u6765\u4e4b\u540e\uff0c\u5b83\u7684\u5f3a\u5927\u529b\u91cf\u5f00\u59cb\u9010\u6e10\u5c55\u73b0\uff0c\u5176\u6240\u80fd\u591f\u89e3\u51b3\u7684\u95ee\u9898\u8fdc\u8fdc\u8d85\u51fa\u4e86\u6570\u5b57\u8fd0\u7b97\u7684\u8303\u7574\uff0c\u8fd9\u6050\u6015\u4e5f\u662f\u6700\u65e9\u7684\u8ba1\u7b97\u673a\u8bbe\u8ba1\u8005\u59cb\u6599\u672a\u53ca\u7684\u3002 1801\u5e74 \u6cd5\u56fd\u53d1\u660e\u5bb6Joseph-Marie Jacquard\u8bbe\u8ba1\u51fa\u4e00\u79cd\u4e13\u7528\u8ba1\u7b97\u673a\uff1a\u7ec7\u5e03\u673a\u3002Jacquard\u7684\u7ec7\u5e03\u673a\u5229\u7528\u6253\u4e86\u5b54\u7684\u5361\u7247\u4e3a\u56fe\u6837\u7f16\u5236\u7a0b\u5e8f\uff0c\u800c\u8f93\u51fa\u7684\u662f\u7ec7\u597d\u7684\u5e03\u5339\u3002\u867d\u7136\u8fd9\u8fd8\u7b97\u4e0d\u4e0a\u4e00\u6b3e\u771f\u6b63\u7684\u8ba1\u7b97\u673a\uff0c\u4f46\u5176\u5bf9\u5c06\u6765\u53d1\u5c55\u51fa\u5176\u4ed6\u53ef\u7f16\u7a0b\u673a\u5668\u8d77\u4e86\u91cd\u8981\u4f5c\u7528\u3002 1821\u5e74 \u82f1\u56fd\u6570\u5b66\u5bb6Charles Babbage \u6784\u60f3\u51fa\u4e00\u53f0 1834\u5e74\u53d1\u660e\u4e86\u5206\u6790\u673a\uff08\u73b0\u4ee3\u7535\u5b50\u8ba1\u7b97\u673a\u7684\u524d\u8eab\uff09\u7684\u539f\u7406\u3002\u5728\u8fd9\u9879\u8bbe\u8ba1\u4e2d\uff0c\u4ed6\u66fe\u8bbe\u60f3\u6839\u636e\u50a8\u5b58\u6570\u636e\u7684\u7a7f\u5b54\u5361\u4e0a\u7684\u6307\u4ee4\u8fdb\u884c\u4efb\u4f55\u6570\u5b66\u8fd0\u7b97\u7684\u53ef\u80fd\u6027\uff0c\u5e76\u8bbe\u60f3\u4e86\u73b0\u4ee3\u8ba1\u7b97\u673a\u6240\u5177\u6709\u7684\u5927\u591a\u6570\u5176\u4ed6\u7279\u6027\uff0c\u4f46\u56e0 1842 \u5e74\u653f\u5e9c\u62d2\u7edd\u8fdb\u4e00\u6b65\u652f\u6301\u4ed6\u7684\u5de5\u4f5c\uff0c\u5df4\u8d1d\u5947\u7684\u8ba1\u7b97\u5668\u672a\u80fd\u5b8c\u6210\u3002 1848\u5e74 \u82f1\u56fd\u6570\u5b66\u5bb6\u3001\u8bd7\u4eba\u62dc\u4f26\u52cb\u7235\u7684\u5973\u513f Ada Lovelace \u7f16\u5199\u4e86\u4e16\u754c\u4e0a\u7b2c\u4e00\u4e2a\u8ba1\u7b97\u673a\u7a0b\u5e8f\u3002\u6839\u636e\u5fb7\u56fd\u660e\u65af\u7279\u5927\u5b66\u7406\u8bba\u6570\u5b66\u6559\u6388\u5b89\u5a1c\u00b7\u897f\u5f17\u7279\u7684\u8bf4\u6cd5\uff0c\u6d1b\u592b\u83b1\u65af\u7f16\u5199\u4e86\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u540c\u65f6\u5c06\u5173\u4e8e\u5df4\u8d1d\u5947\u5206\u6790\u5f15\u64ce\u7684\u8bba\u6587\u4ece\u6cd5\u8bed\u7ffb\u8bd1\u6210\u82f1\u8bed\u3002Lovelace \u8fd8\u4e3a\u4f7f\u7528 Babbage \u7684\u673a\u5668\u8ba1\u7b97\u4f2f\u52aa\u5229\u6570\u6dfb\u52a0\u4e86\u4e00\u6b65\u4e00\u6b65\u7684\u63cf\u8ff0\uff08\u57fa\u672c\u4e0a\u662f\u4e00\u79cd\u7b97\u6cd5\uff09\uff0c\u8fd9\u5b9e\u9645\u4e0a\u4f7f\u5979\u6210\u4e3a\u4e16\u754c\u4e0a\u7b2c\u4e00\u4e2a\u8ba1\u7b97\u673a\u7a0b\u5e8f\u5458\u3002","title":"\u8ba1\u7b97\u673a\u7684\u8bde\u751f"},{"location":"0-programming-languages/#_3","text":"https://www.livescience.com/20718-computer-history.html","title":"\u53c2\u8003\u8d44\u6599"},{"location":"1-python-fundamentals/","text":"Python\u57fa\u672c\u77e5\u8bc6 \u5b89\u88c5 \u5b89\u88c5Python\u5e76\u4e0d\u662f\u4e00\u4ef6\u5f88\u96be\u7684\u4e8b\u60c5\uff0c\u8bf7\u53c2\u7167\u7f51\u7edc\u4e0a\u7684\u8d44\u6599\uff0c\u6211\u4eec\u4e0d\u6253\u7b97\u591a\u505a\u4ecb\u7ecd\u3002 Python\u5b98\u7f51 Anaconda\u5b98\u7f51 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u9664\u4e86\u5355\u72ec\u5b89\u88c5Python\u7684\u53d1\u884c\u7248\u672c\uff0c\u4f60\u8fd8\u53ef\u4ee5\u9009\u62e9\u5b89\u88c5Anaconda\uff0c\u5b83\u5305\u542b\u4e86Python\uff0c\u540c\u65f6\u8fd8\u81ea\u5e26\u4e86\u5f88\u591a\u65b9\u4fbf\u7684\u5de5\u5177\uff0c\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u6253\u5305\u540e\u7684\u5de5\u5177\u96c6\u5408\u3002\u9664\u6b64\u4e4b\u5916\uff0cAnaconda\u8fd8\u53ef\u4ee5\u63d0\u4f9b\u865a\u62df\u73af\u5883\uff0c\u8fd9\u5728\u4f60\u5b66\u4f1aPython\u4e4b\u540e\u7684\u771f\u6b63\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u4f1a\u5f88\u6709\u7528\u3002 Python\u7248\u672c \u5386\u53f2\u4e0aPython2\u548cPython3\u5171\u5b58\u4e86\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u7ed9\u521d\u5b66\u8005\u5e26\u6765\u4e86\u5f88\u591a\u4e0d\u4fbf\uff0c\u5e78\u8fd0\u7684\u662f\uff0cPython2\u5df2\u7ecf\u6e10\u6e10\u9000\u51fa\u5386\u53f2\u821e\u53f0\uff0c\u6240\u4ee5\u521d\u5b66\u8005\u53ea\u9700\u8981\u5b66\u4e60Python3\u5c31\u597d\uff0c\u786e\u4fdd\u4f60\u5b89\u88c5\u4e86\u6700\u8fd1\u7684Python3\u7248\u672c\u5373\u53ef\u3002 Hello World Python\u662f\u4e00\u95e8\u89e3\u91ca\u6027\u7684\u811a\u672c\u8bed\u8a00\uff0c\u5982\u679c\u4f60\u7528\u8fc7MATLAB\uff0c\u4e0d\u96be\u7406\u89e3\u4ec0\u4e48\u662f\u89e3\u91ca\u6027\u8bed\u8a00\u3002C++\u662f\u4e00\u95e8\u7f16\u8bd1\u6027\u8bed\u8a00\uff0c\u9700\u8981\u5148\u7f16\u8bd1\u624d\u80fd\u8fd0\u884c\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u89e3\u91ca\u6027\u8bed\u8a00\u7684\u8fd0\u884c\u65b9\u5f0f\u7075\u6d3b\u7684\u591a\u3002 \u7b2c\u4e00\u79cd\u8fd0\u884cPython\u7684\u65b9\u5f0f \u5728\u547d\u4ee4\u884c\u4e2d\u76f4\u63a5\u8fd0python.exe\uff0c\u4f60\u5c06\u8fdb\u5165 Python \u7684REPL\uff0c\u76f4\u63a5\u6253\u5370hello world! \u4ec0\u4e48\u662fREPL\uff1f \u8bfb\u53d6-\u8bc4\u4f30-\u6253\u5370\u5faa\u73af\uff08REPL\uff09\uff0c\u4e5f\u79f0\u4e3a\u4ea4\u4e92\u5f0f\u9876\u5c42\u6216\u8bed\u8a00\u5916\u58f3\uff0c\u662f\u4e00\u79cd\u7b80\u5355\u7684\u4ea4\u4e92\u5f0f\u8ba1\u7b97\u673a\u7f16\u7a0b\u73af\u5883\uff0c\u5b83\u63a5\u53d7\u5355\u4e2a\u7528\u6237\u8f93\u5165\u3001\u6267\u884c\u5b83\u4eec\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u7528\u6237\uff1b \u5728 REPL \u73af\u5883\u4e2d \u7f16\u5199\u7684\u7a0b\u5e8f\u662f\u5206\u6bb5\u6267\u884c\u7684 \u3002 \u8be5\u672f\u8bed\u901a\u5e38\u6307\u7684\u662f\u7c7b\u4f3c\u4e8e\u7ecf\u5178 Lisp \u673a\u5668\u4ea4\u4e92\u73af\u5883\u7684\u7f16\u7a0b\u63a5\u53e3\u3002 \u5e38\u89c1\u7684\u4f8b\u5b50\u5305\u62ec\u547d\u4ee4\u884c shell \u548c\u7f16\u7a0b\u8bed\u8a00\u7684\u7c7b\u4f3c\u73af\u5883\uff0c\u8be5\u6280\u672f\u975e\u5e38\u5177\u6709\u811a\u672c\u8bed\u8a00\u7684\u7279\u5f81\u3002 A read\u2013eval\u2013print loop (REPL), also termed an interactive toplevel or language shell, is a simple interactive computer programming environment that takes single user inputs, executes them, and returns the result to the user; a program written in a REPL environment is executed piecewise. The term usually refers to programming interfaces similar to the classic Lisp machine interactive environment. Common examples include command-line shells and similar environments for programming languages, and the technique is very characteristic of scripting languages. \u867d\u7136REPL\u662f\u811a\u672c\u8bed\u8a00\u7684\u7279\u5f81\uff0c\u4f46\u5e76\u975e\u53ea\u6709Python/Javascript\u8fd9\u6837\u7684\u811a\u672c\u8bed\u8a00\u624d\u6709REPL\uff0c\u5f88\u591a\u7f16\u8bd1\u8bed\u8a00\u4e5f\u63d0\u4f9b\u4e86\u8fd9\u6837\u7684\u529f\u80fd\uff0c\u6bd4\u5982scala\u3002\u5982\u679c\u4f60\u7528\u8fc7ROOT https://root.cern/install/ \uff0c\u4f60\u4f1a\u53d1\u73b0\u5b83\u5176\u5b9e\u5c31\u662fC++\u7684REPL\u3002 ROOT\u662f\u901a\u8fc7LLVM\u6280\u672f\u5bf9C++\u4ee3\u7801\u8fdb\u884c\u4e86\u8fd0\u884c\u65f6\u7f16\u8bd1\uff0c\u5e76\u975e\u4f7f\u7528\u4e86\u4f20\u7edf\u7684\u7f16\u8bd1\u5668\uff0c\u6240\u4ee5\u624d\u80fd executed piecewise \uff08\u4e00\u6bb5\u6bb5\u4ee3\u7801\u7684\u6267\u884c\uff09\u3002 \u7b2c\u4e8c\u79cd\u8fd0\u884cPython\u7684\u65b9\u5f0f \u4f60\u4e5f\u53ef\u4ee5\u628aPython\u4ee3\u7801\u5199\u5728\u4e00\u4e2a\u6587\u4ef6\u91cc\u9762\uff0c\u7136\u540e\u7528\u5982\u4e0b\u547d\u4ee4\u8fd0\u884c\uff1a # code.py print ( \"hello world\" ) python code.py \u5176\u4ed6\u8fd0\u884cPython\u7684\u65b9\u5f0f Python\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u96c6\u6210\u5230\u5176\u4ed6\u5f00\u53d1\u5de5\u5177\u4e2d\uff1aPycharm\u3001VS Code\u3001jupyter notebook\u7b49\u7b49\uff0c\u8fd9\u4e9bIDE\u6216\u7f16\u8f91\u5668\u4f1a\u5e2e\u52a9\u6211\u4eec\u8c03\u7528Python\u89e3\u91ca\u5668\u3002 \u6ce8\u91ca \u548cC++\u4e00\u6837\uff0cPython\u91cc\u9762\u4e5f\u6709\u4e24\u79cd\u6ce8\u91ca\uff1a\u4e00\u79cd\u662f\u5355\u884c\u6ce8\u91ca\uff0c\u53e6\u4e00\u79cd\u662f\u591a\u884c\u6ce8\u91ca\u3002 # \u8fd9\u662f\u4e00\u884c\u6ce8\u91ca print ( \"hello world\" ) #\u8fd9\u662f\u884c\u5c3e\u6ce8\u91ca \"\"\" \u8fd9\u662f \u591a\u884c\u6ce8\u91ca \"\"\" \u53d8\u91cf \u4e0eC++\u4e0d\u540c\uff0c\u5728Python\u91cc\u9762\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4efb\u4f55\u53d8\u91cf\uff0c\u4e0d\u9700\u8981\u663e\u793a\u6307\u5b9a\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u4e5f\u4e0d\u9700\u8981\u63d0\u524d\u58f0\u660e\uff0c\u8fd9\u548cMATLAB\u91cc\u9762\u7684\u7528\u6cd5\u7c7b\u4f3c\u3002 a = 1 a = \"hell0\" a = 0.5 \u5bb9\u6613\u770b\u51fa\uff0c\u6211\u4eec\u5148\u540e\u7ed9\u53d8\u91cfa\u8d4b\u503c\u4e86\u6574\u6570\u7c7b\u578b\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\u548c\u6d6e\u70b9\u6570\u3002\u53d8\u91cf\u7684\u7c7b\u578b\u968f\u65f6\u6709\u53ef\u80fd\u53d8\u5316\uff0c\u8fd9\u548cC++\u4e0d\u540c\u3002\u90a3\u4e48\u6211\u4eec\u600e\u4e48\u77e5\u9053\u4e00\u4e2a\u53d8\u91cf\u5728\u67d0\u4e2a\u65f6\u5019\u7684\u5177\u4f53\u7c7b\u578b\u5462\uff1f\u53ef\u4ee5\u5229\u7528type\u51fd\u6570\uff1a type ( a ) \u6d88\u5931\u7684\u6307\u9488 C++\u4e2d\u5b58\u5728\u6307\u9488\uff0cPython\u4e2d\u6307\u9488\u6d88\u5931\u4e86\u3002\u5728C++\u4e2d\u6211\u4eec\u4f1a\u5173\u5fc3\u4f20\u9012\u4e00\u4e2a\u53c2\u6570\u7684\u65f6\u5019\u662f\u4f20\u9012\u7684\u6307\u9488\u8fd8\u662f\u503c\uff0c\u6216\u8005\u5f15\u7528\uff0c\u90a3\u4e48\u5728Python\u4e2d\u662f\u5426\u6709\u7c7b\u4f3c\u7684\u95ee\u9898\uff1f\u5728Python\u91cc\u9762\uff0c\u5bf9\u8c61\u662f\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u7684\uff0c\u6bcf\u4e2a\u53d8\u91cf\u90fd\u662f\u6307\u5411\u5bf9\u8c61\u7684\u5f15\u7528\uff08\u4e3a\u4e86\u7406\u89e3\u65b9\u4fbf\uff0c\u4e5f\u53ef\u4ee5\u5f53\u4f5c\u6307\u9488\uff09\u3002 a = 'apple' b = 'pear' \u53d8\u91cfa\uff0cb\u548c\u5bf9\u8c61\u7684\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5982\u679c\u4f60\u628ab\u8d4b\u503c\u7ed9\u4e86a\uff0c a = b \u90a3\u4e48\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u4f1a\u53d8\u6210\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\uff1a \u6240\u4ee5\u53d8\u91cf\u90fd\u662f\u5f15\u7528\u3002\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u4e0a\u56fe\u4e2d\u7684\u60c5\u51b5\u7528C++\u91cc\u9762\u7684\u60c5\u51b5\u7c7b\u6bd4\uff0c\u76f8\u5f53\u4e8ea\u6307\u9488\u6307\u5411\u4e86b\uff0ca\u6307\u9488\u539f\u6765\u6307\u5411\u7684\u5bf9\u8c61\u4e0d\u518d\u4f7f\u7528\u4e86\uff0c\u4e5f\u6ca1\u6709\u5176\u4ed6\u65b9\u5f0f\u53ef\u4ee5\u518d\u8bbf\u95ee\u4e86\uff0c\u5982\u679c\u6ca1\u6709\u63d0\u524d\u5220\u9664\uff0c'apple'\u5c31\u6210\u4e86\u5b64\u5c9b\uff0c\u8fd9\u4e0d\u5c31\u662f\u5185\u5b58\u6cc4\u6f0f\u5417\uff1f \u6d88\u5931\u7684\u5185\u5b58\u6cc4\u6f0f \u5982\u679c\u4f60\u53ea\u5b66\u8fc7C/C++\u8bed\u8a00\uff0c\u90a3\u4e48\u8fd9\u53ef\u80fd\u662f\u4f60\u7b2c\u4e00\u6b21\u542c\u8bf4\u201c \u5783\u573e\u56de\u6536 \u201d\u8fd9\u4e2a\u8bcd\u3002\u5783\u573e\u56de\u6536\u662f\u73b0\u4ee3\u7f16\u7a0b\u8bed\u8a00\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u6280\u672f\uff0cJava\uff0cPython\uff0cJavascript\u7b49\u7f16\u7a0b\u8bed\u8a00\u90fd\u6709\u5783\u573e\u56de\u6536\u673a\u5236\u3002 \u5783\u573e \u6307\u7684\u662f\u90a3\u4e9b\u7a0b\u5e8f\u4e0d\u518d\u9700\u8981\u7684\u5185\u5b58\u5bf9\u8c61\uff0c \u56de\u6536 \u5c31\u662f\u7cfb\u7edf\u81ea\u52a8\u628a\u8fd9\u4e9b\u5185\u5b58\u5220\u9664\u6389\u3002\u56e0\u6b64\uff0c\u5728\u5177\u6709\u5783\u573e\u56de\u6536\u7684\u8bed\u8a00\u91cc\u4f60\u4e0d\u7528\u518d\u62c5\u5fc3\u5185\u5b58\u6cc4\u6f0f\u5566\uff01 \u5f53\u7136\uff0c\u4f60\u4f9d\u7136\u53ef\u4ee5\u9009\u62e9\u624b\u52a8\u5220\u9664\u4e0d\u9700\u8981\u7684\u5bf9\u8c61\uff0c\u5220\u9664\u65b9\u5f0f\u548cC++\u7c7b\u4f3c\uff1a del a \u6d88\u5931\u7684\u62ec\u53f7 \u5728Python\u91cc\u9762\u6211\u4eec\u4e0d\u9700\u8981\u4f7f\u7528\u5927\u62ec\u53f7\u6765\u5305\u88f9\u4e00\u4e2a\u4ee3\u7801\u5757\uff0c\u5177\u6709\u76f8\u540c \u7f29\u8fdb \u7684\u4ee3\u7801\u4f1a\u81ea\u52a8\u5c5e\u4e8e\u4e00\u4e2a\u4ee3\u7801\u5757\u3002\u6240\u4ee5\u5927\u62ec\u53f7\u5728\u8fd9\u91cc\u6d88\u5931\u4e86\u3002 // c++ if ( a == b ) { printf ( \"ok\" ); } # python if a == b : print ( \"ok\" ) Python\u4e2d\u4e5f\u53ef\u4ee5\u52a0\u5206\u53f7\uff0c\u4f46\u662f\u884c\u5c3e\u5206\u53f7\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u4f60\u4e0d\u5728\u4e00\u884c\u5185\u5199\u591a\u4e2a\u8bed\u53e5\uff0c\u90a3\u4e48\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\u4f7f\u7528\u5206\u53f7\u3002 \u7c7b\u578b \u7c7b\u578b\u7cfb\u7edf\u662f\u4efb\u4f55\u7f16\u7a0b\u8bed\u8a00\u7684\u57fa\u7840\uff0c\u4e0b\u9762\u662fPython\u91cc\u9762\u5185\u7f6e\u7684\u4e00\u4e9b\u6570\u636e\u7c7b\u578b\uff0c \u7c7b\u578b \u4f8b\u5b50 int a = 1 float a = 0.5 str a = \"hello\" bool a = True/False complex a = 1 + 2j bytes a = b\"hello\" set a = set() #\u7a7a\u96c6\u5408 list a = list() #\u7a7a\u5217\u8868 tuple a = tuple() #\u7a7a\u5143\u7ec4 dict a = dict() #\u7a7a\u5b57\u5178 \u5728Python3\u4e2dfloat\u662f64\u4f4d\u7684\u3002int\u662f\u52a8\u6001\u957f\u5ea6\u7684\u957f\u6574\u578b\uff0c\u7406\u8bba\u4e0a\u652f\u6301\u65e0\u9650\u5927\u7684\u6570\u5b57\u3002bytes\u7c7b\u578b\u5c31\u662f\u4e8c\u8fdb\u5236\u7c7b\u578b\uff0c\u5c06\u6570\u636e\u4fdd\u5b58\u4e3a\u5b57\u8282\u6570\u7ec4\uff0c\u4e00\u4e2a\u5b57\u8282\u6570\u7ec4\u5176\u5b9e\u5c31\u662f\u4e8c\u8fdb\u5236\u4e32\u3002\u5b57\u7b26\u4e32\u524d\u9762\u52a0\u4e0a b \u5c31\u4ee3\u8868\u8be5\u5b57\u7b26\u4e32\u662f\u7528\u5b57\u8282\u6570\u7ec4\u7684\u65b9\u5f0f\u5b58\u50a8\u7684\u3002\u5728Python\u91cc\u9762\u6ca1\u6709char\u7c7b\u578b\u3002complex\u662f\u590d\u6570\u7c7b\u578b\uff0c\u5728C++\u5185\u7f6e\u7c7b\u578b\u4e2d\u4e5f\u662f\u6ca1\u6709\u7684\u3002 Python\u4e2d\u7528True\u548cFalse\u6765\u4ee3\u8868bool\u503c\u7684\u771f\u548c\u5047\u3002 \u7c7b\u578b\u63a8\u65ad a = 1 print ( type ( a )) # output: int \u4f60\u5df2\u7ecf\u53d1\u73b0\uff0c\u5f53\u6211\u4eec\u7ed9\u53d8\u91cfa\u8d4b\u503c\u7684\u65f6\u5019\uff0c\u5e76\u4e0d\u9700\u8981\u6307\u660ea\u662f\u4ec0\u4e48\u7c7b\u578b\uff0cPython\u4f1a\u81ea\u52a8\u77e5\u9053\u4f60\u8d4b\u503c\u7684\u7c7b\u578b\u662f\u4ec0\u4e48\uff0c\u8fd9\u5c31\u662f\u7c7b\u578b\u63a8\u65ad\u3002 Python\u4f1a\u81ea\u52a8\u63a8\u65ad\u8d4b\u503c\u8868\u8fbe\u5f0f\u53f3\u4fa7\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7136\u540e\u7ed9\u53d8\u91cf\u8bbe\u7f6e\u5bf9\u5e94\u7684\u7c7b\u578b\uff0c\u7c7b\u4f3cC++\u4e2d\u7684auto\u5173\u952e\u5b57\u7684\u4f5c\u7528\u3002\u7c7b\u578b\u63a8\u65ad\u662f\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5f88\u91cd\u8981\u7684\u4e00\u4e2a\u7279\u6027\uff0c\u4f18\u96c5\u7684\u7f16\u7a0b\u8bed\u8a00\u90fd\u4f1a\u652f\u6301\u7c7b\u578b\u63a8\u65ad\u3002 C++\u4e2d\u7684auto\u5173\u952e\u5b57\u4e5f\u662f\u5728\u540e\u671f\u7684\u6807\u51c6\u4e2d\u624d\u6dfb\u52a0\u8fdb\u53bb\u7684\uff0c\u65e9\u671f\u7684C++\u7f16\u8bd1\u5668\u5e76\u4e0d\u652f\u6301auto\u5173\u952e\u5b57\u3002 \u5b57\u7b26\u4e32 \u5173\u4e8e\u5f15\u53f7 Python\u91cc\u9762\u6709\u4e2a\u975e\u5e38\u806a\u660e\u7684\u8bbe\u8ba1\uff1a\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u90fd\u53ef\u4ee5\u8868\u793a\u5f15\u53f7\uff0c\u6548\u679c\u7b49\u4ef7\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u751f\u6548\u3002\u4e0d\u80fd\u540c\u65f6\u751f\u6548\u7684\u610f\u601d\u662f\uff0c\u5982\u679c\u4f60\u7528\u5355\u5f15\u53f7\u5305\u56f4\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u5728\u5b57\u7b26\u4e32\u5185\u7684\u53cc\u5f15\u53f7\u5c31\u662f\u666e\u901a\u5b57\u7b26\uff0c\u5c31\u4e0d\u7528\u52a0\u53cd\u659c\u6760\u4e86\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002 s = '\u6211\u662f\u53cc\u5f15\u53f7\",\u6211\u662f\u4e24\u4e2a\u53cc\u5f15\u53f7\"\"' s = \"\u6211\u662f\u5355\u5f15\u53f7',\u6211\u662f\u4e24\u4e2a\u5355\u5f15\u53f7''\" \u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u4e09\u5f15\u53f7\uff08\u4e09\u4e2a\u5355\u5f15\u53f7\u6216\u4e09\u4e2a\u53cc\u5f15\u53f7\u7b49\u4ef7\uff09\uff0c\u4e09\u5f15\u53f7\u53ef\u4ee5\u5305\u542b\u591a\u884c\u5b57\u7b26\u4e32\uff1a s = ''' \u591a\u884c \u5b57\u7b26\u4e32 ''' \u591a\u884c\u5b57\u7b26\u4e32\u4f1a\u628a\u6bcf\u884c\u7684\u5c3e\u90e8\u81ea\u52a8\u52a0\u4e0a\u6362\u884c\u7b26\u53f7\uff0c\u7136\u540e\u5408\u5e76\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u591a\u884c\u5b57\u7b26\u4e32\u5728\u4f60\u5904\u7406\u957f\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u53ef\u80fd\u6709\u7528\u3002 \u539f\u59cb\u5b57\u7b26\u4e32 \u539f\u59cb\u5b57\u7b26\u4e32\u662f \u201c\u6240\u89c1\u5373\u6240\u5f97\u201d \u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u53ea\u9700\u8981\u5728\u5b57\u7b26\u4e32\u4e4b\u524d\u52a0\u4e0ar\uff0c\u5c31\u4e0d\u7528\u518d\u5bf9\u5b57\u7b26\u8fdb\u884c\u8f6c\u4e49\u4e86\u3002\u8fd9\u5728\u5904\u7406Windows\u4e0b\u7684\u6587\u4ef6\u8def\u5f84\u65f6\u5c24\u5176\u6709\u7528\uff0c\u53ef\u4ee5\u63d0\u4f9b\u5f88\u591a\u65b9\u4fbf\uff1a \"\"\" \u4e0d\u7528\u518d\u62c5\u5fc3\u81ea\u5df1\u5fd8\u8bb0\u628a\u4e00\u4e2a\u53cd\u659c\u6760\u8f6c\u6362\u6210\u4e24\u4e2a\u53cd\u659c\u6760\u4e86\u3002 \"\"\" path = r \"C:\\users\\xxx\" s = r ''' \u591a\u884c \\n \u5b57\u7b26\u4e32 ''' \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u867d\u7136\u4e0d\u662f\u4ec0\u4e48\u590d\u6742\u7684\u529f\u80fd\uff0c\u4f46\u5374\u975e\u5e38\u5e38\u7528\u3002\u5728Python\u91cc\u9762\u6709\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6cd5\uff1a a = \"I am\" b = 18 c = \"years old.\" # \u65b9\u6cd5\u4e00\uff1a \u5f88\u7c7b\u4f3cC\u7684\u98ce\u683c s = \" %s %d %s \" % ( a , b , c ) # \u65b9\u6cd5\u4e8c.a\uff1a \u81ea\u52a8\u8bc6\u522b\u683c\u5f0f\uff0c s = \" {0} {1} {2} \" . format ( a , b , c ) # \u65b9\u6cd5\u4e8c.b\uff1a s = \" {} {} {} \" . format ( a , b , c ) # \u65b9\u6cd5\u4e8c.c\uff1a b\u7684\u4e00\u4e2a\u53d8\u4f53\uff0c\u53ef\u4ee5\u81ea\u5df1\u63a7\u5236\u987a\u5e8f s = \" {0} {1} {2} \" . format ( a , b , c ) # \u65b9\u6cd5\u4e8c.d\uff1a \u53ef\u4ee5\u5229\u7528\u540d\u5b57\u683c\u5f0f\u5316\uff0c\u66f4\u52a0\u53ef\u8bfb s = \" {prefix} {age} {suffix} \" . format ( prefix = a , age = b , suffix = c ) # \u65b9\u6cd5\u4e8c.e\uff1a\u5229\u7528\u5b57\u5178 data = { \"prefix\" : \"I am\" , \"age\" : 18 , \"suffix\" : \"years old.\" } s = \" {prefix} {age} {suffix} \" . format ( ** data ) # **\u4ee3\u8868\u628a\u5b57\u5178\u7684key-value\u89e3\u5f00\uff0c\u6309\u7167\u5355\u72ec\u7684key-value pair \u4f20\u9012\uff0c\u6548\u679c\u548c\u65b9\u6cd5d\u7b49\u540c # \u65b9\u6cd5\u4e09.a s = f \" { a } { b } { c } \" # \u65b9\u6cd5\u4e09.b # \u652f\u6301\u8868\u8fbe\u5f0f s = f \" { a } { 3 * 6 } { c } \" # \u65b9\u6cd5\u4e09.c # \u4f60\u53ef\u4ee5\u76f4\u63a5\u5728\u5927\u62ec\u53f7\u91cc\u8c03\u7528\u51fd\u6570\uff0c\u5b9e\u9645\u4e0a\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u5728\u8fd9\u91cc\u201c\u5199\u4ee3\u7801\u201d\u3002 s = f \" { a } { get_years_old () } { c } \" # \u65b9\u6cd5\u4e09.d # \u5bf9\u6d6e\u70b9\u6570\u8fdb\u884c\u683c\u5f0f\u5316\uff0c\u4e0eC++\u7c7b\u4f3c\u3002\uff08\u4e09\u79cd\u65b9\u6cd5\u90fd\u53ef\u4ee5\uff0c\u4ec5\u4ee5\u7b2c\u4e09\u79cd\u4e3a\u4f8b\uff09\u3002 a = 3.5 s = f \" { a : 5.2f } \" \u63a8\u8350\u4f7f\u7528\u7b2c\u4e09\u79cd\u65b9\u5f0f\uff0c\u5f53\u4f60\u4e60\u60ef\u4e4b\u540e\uff0c\u4f60\u4f1a\u5fd8\u6389\u524d\u4e24\u79cd \u3002 Python 3's f-Strings \u6570\u636e\u7ed3\u6784 set\u3001list\u3001tuple\u3001dict\u90fd\u662f\u5bb9\u5668\u7c7b\u578b\uff0c\u5143\u7ec4tuple\u5c31\u662f\u4e0d\u53ef\u4fee\u6539\u7684\u5217\u8868list\uff0c\u9664\u6b64\u4e4b\u5916\u548clist\u7b49\u4ef7\u3002\u4e0eset\uff0clist\uff0cdict\u76f8\u5bf9\u5e94\uff0cC++\u7684\u6807\u51c6\u5e93\u91cc\u4e5f\u652f\u6301list\uff0cset\uff0cmap\u7b49\u7c7b\u578b\uff0c\u4f46\u8fdc\u6ca1\u6709\u5728Python\u91cc\u4f7f\u7528\u8d77\u6765\u65b9\u4fbf\u3002 \u521b\u5efa # \u521b\u5efa\u5217\u8868\u7684\u51e0\u79cd\u65b9\u5f0f a = [] a = list () a = [ 1 , 2 , 3 ] a = [ 1 , 2 , \"hello\" ] #\u5217\u8868\u4e2d\u53ef\u4ee5\u5bb9\u7eb3\u4efb\u4f55object\uff0c\u5728C++\u91cc\u4f60\u5f88\u96be\u505a\u5230\u8fd9\u4e00\u70b9 # \u521b\u5efa\u5143\u7ec4 a = () a = tuple () a = ( 1 , 2 , 3 ) a = ( 1 , 2 , \"hello\" ) # \u521b\u5efa\u5b57\u5178\uff0c \u7c7b\u4f3cC++\u6807\u51c6\u5e93\u4e2d\u7684map a = dict () a = {} a = { 1 : \"d\" , \"2\" : 9 } # key \u548c value\u7684\u503c\u4e5f\u662f\u4efb\u610f\u7684\u5bf9\u8c61\uff0c\u8fd9\u70b9\u548cC++\u4e0d\u540c # \u521b\u5efa\u96c6\u5408 a = set () a = { 1 , \"d\" , \"2\" , 9 , 1.0 , 1 } # \u96c6\u5408\u91cc\u7684\u5143\u7d20\u4e5f\u53ef\u4ee5\u662f\u4efb\u4f55\u5bf9\u8c61\uff0c\u8fd9\u70b9\u548cC++\u4e0d\u540c \u6dfb\u52a0\u5143\u7d20 # \u96c6\u5408 a = set () a . add ( 1 ) a . add ( \"ok\" ) # \u5217\u8868 a = [] a . append ( 1 ) a . append ( \"ok\" ) # \u5b57\u5178 a = {} a . update ({ \"name\" : \"wang\" }) a . update ({ \"age\" : 18 }) \u5220\u9664\u5143\u7d20 # \u96c6\u5408 a = set () a . add ( 1 ) a . add ( \"ok\" ) a . remove ( \"ok\" ) # \u5217\u8868 a = [] a . append ( 1 ) a . append ( \"ok\" ) a . remove ( \"ok\" ) # \u5b57\u5178 a = {} a . update ({ \"name\" : \"wang\" }) a . update ({ \"age\" : 18 }) del a [ \"name\" ] \u904d\u5386\u5143\u7d20 \u904d\u5386\u8fd9\u4e9b\u5bb9\u5668\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u7528\u5230 in \u8fd9\u4e2a\u8fd0\u7b97\u7b26\uff0clist\uff0ctuple\uff0cset\u7684\u904d\u5386\u65b9\u5f0f\u5982\u4e0b\uff1a a = [ 1 , 2 , \"ok\" ] for x in a : print ( x ) \u5b57\u5178\u6bd4\u8f83\u7279\u6b8a\uff0c\u5b83\u6bcf\u4e2a\u5143\u7d20\u5176\u5b9e\u662f\u4e2a key-value\u7684pair\uff0c\u6240\u4ee5\u6309\u7167\u6392\u5217\u7ec4\u5408\uff0c\u4f60\u6709\u5f88\u591a\u79cd\u53bb\u8fed\u4ee3\u5b83\u7684\u65b9\u5f0f\uff1a a = {} a . update ({ \"name\" : \"wang\" }) a . update ({ \"age\" : 18 }) for x in a : # \u9ed8\u8ba4\u8fed\u4ee3 keys print ( x ) # output\uff1a # name # age for x in a . keys (): print ( x ) # output\uff1a # name # age for x in a . values (): print ( x ) # output\uff1a # wang # 18 for k , v in a . items (): # k,v = (k,v) print ( k , v ) # output\uff1a # name : wang # age : 18 items() \u51fd\u6570\u8fd4\u56de\u7684\u5143\u7d20\u662f\u957f\u5ea6\u4e3a2\u7684\u5143\u7ec4\uff0c\u5143\u7ec4\u5728\u4efb\u4f55\u65f6\u5019\u90fd\u53ef\u4ee5\u76f4\u63a5\u5c55\u5f00\u6210\u591a\u4e2a\u5143\u7d20\u3002 \u8bbf\u95ee\u5143\u7d20 \u6309\u4e0b\u6807\u8bbf\u95ee\u5217\u8868 # \u8bbf\u95ee\u5217\u8868 a = [ 1 , 2 , \"hello\" ] a [ 0 ] # 1 a [ 2 ] # hello a [ - 1 ] # hello, \u8d1f\u6570\u4ee3\u8868\u53cd\u65b9\u5411\uff0c\u5f88\u5bb9\u6613\u7406\u89e3 \u8bbf\u95ee\u5143\u7ec4\u7684\u65b9\u5f0f\u4e0elist\u76f8\u540c\uff0c\u4f46set\u7c7b\u578b\u4e0d\u53ef\u4ee5\u7528\u4e0b\u6807\u8bbf\u95ee\uff0c\u601d\u8003\u4e00\u4e0b\u4e3a\u4ec0\u4e48\uff1f \u6309key\u8bbf\u95ee\u5b57\u5178 # \u8bbf\u95ee\u5b57\u5178 a = { 1 : \"d\" , \"2\" : 9 } a [ 1 ] # \"d\" a [ \"2\" ] # 9 \u5207\u7247 slicing \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u7528range\u51fd\u6570\u6765\u521b\u5efa\u4e00\u4e2a\u8fde\u7eed\u6574\u6570\u5217\u8868\uff0c a = list ( range ( 10 )) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] a = list ( range ( 0 \uff0c 10 )) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] a = list ( range ( 0 , 10 , 2 )) # [0, 2, 4, 6, 8] range\u51fd\u6570\u751f\u6210\u7684\u5176\u5b9e\u662f\u8fed\u4ee3\u5668\uff0c\u5173\u4e8e\u4ec0\u4e48\u662f\u8fed\u4ee3\u5668\u540e\u9762\u4f1a\u4ed4\u7ec6\u8bb2\uff0c\u8fd9\u91cc\u4f60\u53ea\u9700\u8981\u77e5\u9053\u5fc5\u987b\u7528list\u51fd\u6570\u628a\u8fed\u4ee3\u5668\u5305\u88f9\u8d77\u6765\u624d\u80fd\u8f6c\u6362\u6210\u5217\u8868\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e0b\u5982\u4f55\u8bbf\u95ee\u5217\u8868\u7684\u4e00\u90e8\u5206\uff1a a = list ( range ( 10 )) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] a [ 0 : 1 ] # [0] a [ 2 : 4 ] # [2,3] a [ 2 :] # [2, 3, 4, 5, 6, 7, 8, 9] a [: 3 ] # [0, 1, 2] a [ - 2 : - 1 ] # [8] a [:] # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \u8bbf\u95ee\u4e00\u4e2a\u5217\u8868\u7684\u5207\u7247\u771f\u7684\u76f8\u5f53\u7075\u6d3b\uff0c\u60f3\u60f3\u5728C++\u91cc\u5b9e\u73b0\u4ee5\u4e0a\u529f\u80fd\u4f60\u9700\u8981\u591a\u5c11\u884c\u4ee3\u7801 \u6d45\u62f7\u8d1d\u4e0e\u6df1\u62f7\u8d1d \u4e0a\u9762\u6700\u540e\u4e00\u884c\u4ee3\u7801 a[:] \u770b\u8d77\u6765\u4ec0\u4e48\u4e5f\u6ca1\u505a\uff0c\u5176\u5b9e\u4e0d\u7136\uff0c\u5b83\u7684\u7528\u9014\u4e00\u70b9\u4e5f\u4e0d\u5c0f\u3002\u8bb0\u4f4f\u6211\u4eec\u4e0a\u6587\u8bb2\u7684\uff0cPython\u91cc\u9762\u7684\u53d8\u91cf\u90fd\u662f\u5f15\u7528\uff0c\u6240\u4ee5\u5f53\u4f60\u8981\u590d\u5236\u4e00\u4e2a\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u7528\u7b49\u53f7\u8d4b\u503c\u4ec5\u4ec5\u8d4b\u503c\u4e86\u5f15\u7528\uff0c\u6211\u4eec\u53eb\u505a\u6d45\u62f7\u8d1d\uff1b\u5982\u679c\u4f60\u590d\u5236\u4e86\u4e00\u4e2a\u53d8\u91cf\u7684\u5185\u5b58\u5bf9\u8c61\uff0c\u90a3\u624d\u53eb\u6df1\u62f7\u8d1d\u3002 # \u6d45\u62f7\u8d1d a = [ 1 , 2 , 3 ] b = a b . append ( 4 ) print ( a ) # [1, 2, 3, 4] print ( b ) # [1, 2, 3, 4] # \u6df1\u62f7\u8d1d # \u5982\u679c\u4f60\u4e0d\u60f3\u904d\u5386a\u7136\u540e\u4e00\u4e2a\u4e2a\u628a\u503c\u8d4b\u7ed9b\uff0c\u90a3\u4e48\u5c31\u8981\u7528\u4e0b\u9762\u7684\u65b9\u5f0f a = [ 1 , 2 , 3 ] b = a [:] # \u6216\u8005 b = list(a) b . append ( 4 ) print ( a ) # [1, 2, 3] print ( b ) # [1, 2, 3, 4] \u7c7b\u578b\u8f6c\u6362 \u7c7b\u578b\u4e4b\u95f4\u7684\u8f6c\u6362\u65b9\u6cd5\u5982\u4e0b\u8868\uff1a \u8f6c\u6210str # all to str str ( 1 ) str ( 0.5 ) str ([ 1 , \"hello\" ]) \u4efb\u4f55\u5bf9\u8c61\u90fd\u53ef\u4ee5\u8f6c\u6210str, \u4f60\u8fd8\u53ef\u4ee5\u5229\u7528\u4e0a\u6587\u63d0\u5230\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u65b9\u6cd5\u628a\u5176\u4ed6\u7c7b\u578b\u8f6c\u6210\u5b57\u7b26\u4e32\u3002 \u8f6c\u6210int/float # number to int int ( 1.5 ) int ( 1.4 ) int ( \"1\" ) float ( 1 ) float ( 1.4 ) float ( \"1\" ) \u5e76\u4e0d\u662f\u6240\u6709\u7c7b\u578b\u90fd\u53ef\u4ee5\u8f6c\u6210int/float\uff0c\u5b83\u4eec\u5fc5\u987b\u7b26\u5408\u4e00\u5b9a\u7684\u683c\u5f0f\u3002 \u8f6c\u6210bool \u5176\u4ed6\u7c7b\u578b\u8f6c\u6362\u6210bool\u7c7b\u578b\u7684\u65f6\u5019\uff0c\u53ea\u6709\u4e3a \u96f6 \u4e3a \u7a7a \u7684\u65f6\u5019\u624d\u4f1a\u88ab\u8f6c\u6362\u6210False\uff0c\u5176\u4ed6\u60c5\u51b5\u4e00\u5f8b\u8f6c\u6362\u6210True\uff0c\u8fd9\u4e00\u70b9\u9700\u8981\u6ce8\u610f\u3002 bool ( set ()) # False bool ([]) # False bool ({}) # False bool ( \"\" ) # False bool ( 0 ) # False bool ( 0.0 ) # False \u6240\u4ee5\u5f53\u4f60\u770b\u5230\u5982\u4e0b\u7684\u7ed3\u679c\uff0c\u5c31\u4e0d\u5fc5\u611f\u5230\u60ca\u8bb6\u3002 bool ( \"False\" ) # True \u8f6c\u6210bytes \u5176\u4e2dbytes\u7c7b\u578b\u53ef\u4ee5\u88ab\u5f53\u4f5c\u7279\u6b8a\u5b57\u7b26\u4e32\uff0c\u5728\u5b57\u7b26\u4e32\u524d\u9762\u52a0\u4e0a b \u5c31\u4ee3\u8868bytes\u7c7b\u578b\u3002\u60f3\u4e00\u60f3ASCII\u7f16\u7801\uff0c\u6bcf\u4e2a\u5b57\u7b26\u5c31\u662f\u4e00\u4e2abyte\uff0c\u6240\u4ee5ASCII\u7f16\u7801\u4e0bbytes\u548cstr\u6ca1\u6709\u533a\u522b\uff0c\u4f46\u662f\u975eASSCII\u7f16\u7801\u4e0b\u5c31\u4e0d\u4e00\u6837\u4e86\uff0c\u5982\u679c\u5c06\u6c49\u5b57\u5b57\u7b26\u4e32\u8f6c\u6210bytes\uff0c\u5219\u9700\u8981\u8003\u8651\u7f16\u7801\u65b9\u5f0f\uff0c\u76f4\u63a5\u5728\u524d\u9762\u52a0b\u4f1a\u62a5\u9519\u3002 a = \"\u6df1\u5ea6\u5b66\u4e60\" . encode ( \"utf-8\" ) type ( a ) # bytes # bytes \u8f6c\u6210\u5b57\u7b26\u4e32 a . decode ( \"utf-8\" ) \u5982\u679c\u8981\u5c06int\u6216\u8005float\u8f6c\u6362\u6210bytes\uff0c\u5219\u9700\u8981\u8003\u8651\u5230\u8bf8\u5982\u5b57\u8282\u6570\uff0c\u5927\u7aef\u6216\u5c0f\u7aef\u7b49\u7ec6\u8282\u3002 b = 1 a = b . to_bytes ( 2 , \"little\" ) # \u53cd\u5411\u8f6c\u6362 int . from_bytes ( a , \"little\" ) # 1 \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f\u662f\u57fa\u7840\u5185\u5bb9\uff0c\u53ef\u53c2\u8003\u4ee5\u4e0b\u94fe\u63a5\uff1a Python \u8fd0\u7b97\u7b26 \u7edd\u5927\u90e8\u5206\u8fd0\u7b97\u53d1\u7b26\u5728C++\u4e4b\u4e2d\u90fd\u6709\u5bf9\u5e94\uff0c\u8fd9\u91cc\u503c\u5f97\u4e00\u63d0\u7684\u662fPython\u4e2d\u7684\u903b\u8f91\u8fd0\u7b97\u7b26\u76f4\u63a5\u4f7f\u7528\uff1a and\u3001or\u3001not\uff0c\u7406\u89e3\u8d77\u6765\u975e\u5e38\u65b9\u4fbf\u3002 a = True b = False if a and b : print ( \"ok\" ) if a or b : print ( \"ok\" ) if not a : print ( \"ok\" ) \u53e6\u5916\uff0cPython\u4e2d\u8fd8\u6709\u4e00\u4e2a\u6210\u5458\u8fd0\u7b97\u7b26\uff1ain\uff0c\u7528\u6765\u5224\u65ad\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u5728\u53e6\u4e00\u4e2a\u5bb9\u5668\u91cc\u9762\u3002\u8fd9\u4e0e for \u5faa\u73af\u4e2d\u4f7f\u7528\u7684in\u6709\u4e9b\u50cf\uff0c\u4f46\u529f\u80fd\u4e0d\u592a\u76f8\u540c\u3002 a = [ 1 , 2 , 5 ] if 1 in a : print ( \"ok\" ) \u6d41\u7a0b\u63a7\u5236 \u6761\u4ef6\u8bed\u53e5\u548c\u5faa\u73af\u63a7\u5236\u8bed\u53e5\u6bd4\u8f83\u57fa\u7840\uff0c\u548cC++\u4e2d\u6ca1\u6709\u592a\u5927\u533a\u522b\uff0c\u53ef\u4ee5\u76f4\u63a5\u53c2\u8003\u4ee5\u4e0b\u94fe\u63a5\uff1a \u6761\u4ef6\u8bed\u53e5 \u5faa\u73af\u8bed\u53e5 \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e9b\u4ee3\u7801\u793a\u4f8b\u3002 if-else num = 5 if num == 3 : # \u5224\u65adnum\u7684\u503c print ( 'boss' ) elif num == 2 : print ( 'user' ) elif num == 1 : print ( 'worker' ) elif num < 0 : # \u503c\u5c0f\u4e8e\u96f6\u65f6\u8f93\u51fa print ( 'error' ) else : print ( 'roadman' ) # \u6761\u4ef6\u5747\u4e0d\u6210\u7acb\u65f6\u8f93\u51fa while count = 0 while ( count < 9 ): print ( 'The count is:' , count ) count += 1 for fruits = [ 'banana' , 'apple' , 'mango' ] for fruit in fruits : # \u7b2c\u4e8c\u4e2a\u5b9e\u4f8b print ( '\u5f53\u524d\u6c34\u679c: %s ' % fruit ) Python\u4e2d\u4e5f\u652f\u6301 continue \u4e5f break \u8bed\u53e5\uff0c\u548cC++\u4e2d\u7684\u4f7f\u7528\u65b9\u6cd5\u4e00\u6837\u3002 \u6807\u51c6\u5e93/\u7b2c\u4e09\u65b9\u5e93 \u5f15\u7528\u6a21\u5757 \u6807\u51c6\u5e93\u662f\u7f16\u7a0b\u8bed\u8a00\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u4e00\u90e8\u5206\uff0c\u6807\u51c6\u5e93\u5c31\u662f\u90a3\u4e9b\u4f60\u4e0d\u9700\u8981\u5355\u72ec\u5b89\u88c5\u5c31\u53ef\u4ee5\u4f7f\u7528\u7684\u5e93\u3002\u5728C++\u4e2d\u6211\u4eec\u4f7f\u7528\u4fbf\u51c6\u5e93\u4ee5\u53ca\u7b2c\u4e09\u65b9\u5e93\u4e2d\u7684\u5185\u5bb9\u65f6\u9700\u8981include\u76f8\u5bf9\u5e94\u7684\u5934\u6587\u4ef6\uff0c\u5728Python\u4e2d\u6211\u4eec\u7528 import \u8fd9\u4e2a\u5173\u952e\u5b57\u3002 import math math . sin ( math . pi ) \u4e0eC++\u4e0d\u540c\uff0c\u5f15\u7528\u6a21\u5757\u4e4b\u540e\uff0c\u4f7f\u7528\u6a21\u5757\u4e2d\u7684\u4efb\u4f55\u5185\u5bb9\u90fd\u9700\u8981\u52a0\u4e0a\u5f15\u7528\u7684\u540d\u5b57\uff0c\u8fd9\u6709\u70b9\u7c7b\u4f3cC++\u4e2d\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u4f46\u53c8\u4e0d\u5b8c\u5168\u76f8\u540c\u3002Python\u8fd8\u5141\u8bb8\u4f60\u7ed9\u6a21\u5757\u5b9a\u4e49\u522b\u540d\uff1a import math as m m . sin ( m . pi ) \u4e0d\u8fc7\uff0c\u4f7f\u7528\u522b\u540d\u7684\u65f6\u5019\u8981\u5c0f\u5fc3\uff0c\u4e0d\u8981\u968f\u4fbf\u5b9a\u4e49\u4e00\u4e2a\u540d\u5b57\uff0c\u5426\u5219\u522b\u4eba\u65e0\u6cd5\u8bfb\u61c2\u4f60\u7684\u4ee3\u7801\u3002\u5b9e\u9645\u5f00\u53d1\u4e2d\u5df2\u7ecf\u5f62\u6210\u4e86\u5f88\u591a\u9ed8\u8ba4\u7684\u89c4\u8303\uff0c\u4e0d\u540c\u7684\u6a21\u5757\u4f1a\u6709\u56fa\u5b9a\u7684\u522b\u540d\uff0c\u6bd4\u5982\uff1a import tensorflow as tf import pandas as pd \u6709\u7684\u65f6\u5019\u4e00\u4e2a\u6a21\u5757\u4e2d\u8fd8\u5305\u542b\u5b50\u6a21\u5757\uff0c\u4f60\u53ef\u4ee5\u7528 \u201c.\u201d \u5f15\u7528\u5b50\u6a21\u5757\u7684\u5185\u5bb9\uff0c\u6216\u8005\u4f7f\u7528 from \u5bfc\u5165\uff1a import matplotlib.pyplot as plt from matplotlib import pyplot as plt \u4f7f\u7528\u6a21\u5757 \u5728C++\u4e2d\u5982\u679c\u4f60\u60f3\u4f7f\u7528\u7b2c\u4e09\u65b9\u5e93\uff0c\u4f60\u4f1a\u600e\u4e48\u505a\uff1f \u5728Python\u4e2d\u4f7f\u7528\u7b2c\u4e09\u65b9\u5e93\u975e\u5e38\u7b80\u5355\uff0c\u9700\u8981\u7528\u5230\u4e00\u4e2a\u5305\u7ba1\u7406\u5de5\u5177 pip\uff0c\u8fd9\u4e2a\u5de5\u5177\u5728\u4f60\u5b89\u88c5Python\u7684\u65f6\u5019\u9ed8\u8ba4\u5c31\u88ab\u5b89\u88c5\u597d\u4e86\u3002\u5982\u679c\u4f60\u7528\u8fc7linux\u7cfb\u7edf\uff0c\u90a3\u4e48\u4f60\u4e00\u5b9a\u63a5\u89e6\u8fc7apt\uff0cyum\u7b49\u5305\u7ba1\u7406\u5de5\u5177\uff0c\u5f53\u4f60\u5b89\u88c5\u8f6f\u4ef6\u7684\u65f6\u5019\uff0c\u4e0d\u7528\u518d\u53bb\u7f51\u7edc\u4e0a\u81ea\u5df1\u4e0b\u8f7d\u548c\u624b\u52a8\u5b89\u88c5\uff0c\u76f4\u63a5\u7528\u5305\u7ba1\u7406\u5de5\u5177\u4e00\u952e\u5b89\u88c5\u5373\u53ef\u3002pip\u7684\u5de5\u4f5c\u539f\u7406\u4e5f\u662f\u5982\u6b64\u3002 pip\u662f\u4e00\u4e2a\u7528Python\u5199\u7684\u7528\u4e8e\u5b89\u88c5\u548c\u7ba1\u7406\u5305\u7684\u5305\u7ba1\u7406\u7cfb\u7edf\u3002\u5b83\u8fde\u63a5\u4e00\u4e2a\u53eb\u505aPython Package Index\u7684\u5728\u7ebf\u516c\u5171\u5305\u5b58\u50a8\u5e93\u3002\u5b83\u901a\u8fc7\u914d\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u8fde\u63a5\u5176\u5b83\u5305\u5e93\u3002 \u5e38\u7528\u547d\u4ee4 \u5b89\u88c5\u5305\uff1a pip install some-package-name \u5b89\u88c5\u8fc7\u7a0b\u4e2d\u4f1a\u81ea\u52a8\u5e2e\u52a9\u4f60\u5b89\u88c5\u4f9d\u8d56\u3002\u82e5\u9700\u8981\u6307\u5b9a\u7279\u5b9a\u7684\u7248\u672c\u5b89\u88c5: pip install some-package-name == 1 .2.2 --force-reinstall force-reinstall \u7528\u4e8e\u6307\u793a\u91cd\u65b0\u5b89\u88c5\u6307\u5b9a\u7248\u672c\u7684\u5305\u3002\u4e5f\u53ef\u4ee5\u6307\u5b9a\u7248\u672c\u7684\u8303\u56f4\u5b89\u88c5: pip install some-package-name> = 1 .3.0,< 1 .4.0 --force-reinstall \u5378\u8f7d\u5305\uff1a pip uninstall some-package-name \u5e38\u7528\u6807\u51c6\u5e93 os os\u6a21\u5757\u662f\u975e\u5e38\u5e38\u7528\u7684\u6a21\u5757\uff0c\u8fd9\u91cc\u6709\u5f88\u591a\u529f\u80fd import os os . remove ( \"/path/to/test.txt\" ) # \u5220\u9664\u6587\u4ef6 os . rmdir ( \"/path/to\" ) # \u5220\u9664\u6587\u4ef6\u5939 os . chdir ( \"/path/to\" ) # \u6539\u53d8\u5f53\u524d\u7a0b\u5e8f\u7684\u5de5\u4f5c\u76ee\u5f55 os . makedirs ( \"/path/to\" ) #\u521b\u5efa\u591a\u7ea7\u6587\u4ef6\u5939 os . mkdir ( \"/path\" ) # \u521b\u5efa\u5355\u4e2a\u6587\u4ef6\u5939 os . listdir ( \"/path\" ) # \u5217\u4e3e\u51fa\u6587\u4ef6\u5939\u4e2d\u7684\u5185\u5bb9 os . system ( \"python code.py\" ) # \u8fd0\u884c\u7cfb\u7edf\u547d\u4ee4 \"\"\" os.path\u7528\u4e8e\u5904\u7406\u548c\u6587\u4ef6\u8def\u5f84\u76f8\u5173\u7684\u4efb\u52a1\u3002 linux\u548cwindows\u7684\u6587\u4ef6\u8def\u5f84\u5206\u9694\u7b26\u4e0d\u4e00\u6837\uff0c\u8fd9\u5728\u4f7f\u7528\u4e2d\u5e26\u6765\u5f88\u591a\u4e0d\u4fbf\uff0c \u4f7f\u7528\u8fd9\u4e00\u6a21\u5757\u5c06\u4f1a\u5927\u5927\u65b9\u4fbf\u4f60\u7684\u64cd\u4f5c\u3002 \"\"\" os . path . sep # \u8fd9\u662f\u4e00\u4e2a\u5b57\u7b26\uff0c\u662f\u5f53\u524d\u7cfb\u7edf\u4e0b\u9ed8\u8ba4\u7684\u8def\u5f84\u5206\u9694\u7b26\uff0cwindows\u4e0b\u5c31\u662f \\\u3002 os . path . split ( \" \\\\ path/to/file.txt\" ) # \u628a\u6587\u4ef6\u8def\u5f84\u5206\u5272\u6210\u76ee\u5f55\u548c\u6587\u4ef6\u540d\u4e24\u90e8\u5206 os . path . isdir ( \"/path\" ) # \u5224\u65ad\u662f\u4e0d\u662f\u6587\u4ef6\u5939 os . path . isfile ( \"/path/file\" ) # \u5224\u65ad\u662f\u4e0d\u662f\u6587\u4ef6 os . path . join ([ \"/path\" , \"subpath\" , \"file\" ]) # \u628alist\u91cc\u7684\u5185\u5bb9\u7528 os.path.sep \u8fde\u63a5\u8d77\u6765 \u8fd9\u91cc\u7279\u522b\u5f3a\u8c03\u4e00\u4e0b\uff0cos.system() \u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u4efb\u4f55\u7cfb\u7edf\u547d\u4ee4\uff0c\u8fd9\u662fpython\u548c\u7cfb\u7edf\u4ea4\u4e92\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u975e\u5e38\u65b9\u4fbf\uff0c\u4e0d\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u4f60\u6ca1\u529e\u6cd5\u83b7\u5f97\u7cfb\u7edf\u7a0b\u5e8f\u7684\u6807\u51c6\u8f93\u51fa\u5185\u5bb9\u3002\u5982\u679c\u4f60\u60f3\u65e0\u7f1d\u8854\u63a5\u7cfb\u7edf\u5176\u4ed6\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528 subprocess \u8fd9\u4e2a\u6a21\u5757\u3002 sys \u8fd0\u884cpython\u7684\u65f6\u5019\u53ef\u4ee5\u4f20\u5165\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u6211\u4eec\u5982\u4f55\u83b7\u5f97\u5462\uff1f\u7528sys\u6a21\u5757\u5373\u53ef\u3002 # python code.py arg1 arg2 import sys len ( sys . argv ) # \u53c2\u6570\u6570\u91cf 3 sys . argv [ 0 ] # \u6587\u4ef6\u540d code.py sys . argv [ 1 :] # \u5176\u4ed6\u53c2\u6570 arg1 arg2 math \u8fd9\u91cc\u6709\u4f60\u9700\u8981\u7684\u6570\u5b66\u51fd\u6570\uff0c\u4e0d\u7528\u591a\u505a\u4ecb\u7ecd\u3002 time import time start = time . time () time . sleep ( 3 ) # 3 seconds end = time . time () print ( end - start ) # \u8f93\u51fa: 3.013838768005371 datetime from datetime import datetime now = datetime . now () now . strftime ( \"%Y-%m- %d %H:%M:%S %f \" ) # \u8f93\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 dt = datetime . strptime ( \"2022-01-01\" , \"%Y-%m- %d \" ) # \u4ece\u5b57\u7b26\u4e32\u6784\u9020 random import random random . seed ( 123 ) # \u521d\u59cb\u5316\u79cd\u5b50 random . random () # [0,1) \u4e4b\u95f4\u7684\u968f\u673a\u6570 random . choice ([ 1 , 2 , 4 , 5 , 6 , 7 ]) # \u4ece\u4e00\u4e2a\u5217\u8868\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u5bf9\u8c61 random . choices ([ 1 , 2 , 3 , 4 , 5 , 6 ], k = 2 ) # \u968f\u673a\u9009\u62e9k\u4e2a\u7ed3\u679c random . randint ( 1 , 5 ) # \u8fd4\u56de [1,5]\u533a\u95f4\u7684\u968f\u673a\u6574\u6570 random . gauss ( 0 , 1 ) # \u4ece\u9ad8\u65af\u5206\u5e03\u91c7\u6837\u3002\u4e5f\u652f\u6301\u5176\u4ed6\u5404\u79cd\u5206\u5e03 random . shuffle ([ 1 , 2 , 4 , 5 ]) # \u5bf9\u5217\u8868\u5185\u7684\u5143\u7d20\u8fdb\u884c\u968f\u673a\u6392\u5e8f argparse \u8fd9\u4e2a\u6a21\u5757\u7528\u4e8e\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\uff0c import argparse # \u521b\u5efa\u5bf9\u8c61 parser = argparse . ArgumentParser () # \u5b9a\u4e49\u4f60\u5e0c\u671b\u4f20\u5165\u7684\u547d\u4ee4\u884c\u53c2\u6570 # \u8f93\u5165\u7684\u65f6\u5019\u6309\u7167 --arg1=value1 \u7684\u683c\u5f0f\u4f20\u5165\uff0c\u4e0e\u987a\u5e8f\u65e0\u5173 parser . add_argument ( \"--arg1\" , type = str , default = \"arg1\" ) parser . add_argument ( \"--arg2\" , type = int , default = 1 ) # \u5f00\u59cb\u89e3\u6790\u547d\u4ee4\u53c2\u6570\uff0c\u5982\u679c\u4f20\u5165\u7684\u53c2\u6570\u548c\u9884\u5b9a\u4e49\u7684\u4e0d\u5339\u914d\u4f1a\u62a5\u9519 args = parser . parse_args () # \u5982\u679c\u4f60\u5e0c\u671b\u4f20\u5165\u672a\u77e5\u53c2\u6570\u7684\u65f6\u5019\u4e0d\u62a5\u9519 args , unknown_args = parser . parse_known_args () # \u4f7f\u7528\u53c2\u6570 print ( known_args . arg1 ) copy from copy import deepcopy obj1 = deepcopy ( obj2 ) # \u6df1\u62f7\u8d1d\u4efb\u4f55\u5bf9\u8c61 glob \u524d\u6587\u63d0\u5230\u4e86\u7528 os.listdir() \u6765\u67e5\u770b\u4e00\u4e2a\u6587\u4ef6\u5939\u4e2d\u7684\u5185\u5bb9\uff0c\u5982\u679c\u4f60\u60f3\uff1a - \u83b7\u53d6\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84 - \u652f\u6301\u7528\u901a\u914d\u7b26\u7b5b\u9009\u6587\u4ef6 - \u652f\u6301\u9012\u5f52\u8bbf\u95ee\u5b50\u76ee\u5f55 \u90a3\u4e48\u4f60\u53ef\u4ee5\u4f7f\u7528glob\u8fd9\u4e2a\u6a21\u5757\u3002 import glob glob . glob ( \"/path/to/*.txt\" ) # *\u5339\u914d\u4e00\u4e2a\u6216\u591a\u4e2a\u5b57\u7b26 glob . glob ( \"/path/to/**/*.txt\" ) # ** \u5339\u914d\u6240\u6709\u6587\u4ef6\u3001\u76ee\u5f55 glob . glob ( \"/path/to/**/*.txt\" , recursive = True ) # \u9012\u5f52\u5339\u914d\u6240\u6709\u5b50\u76ee\u5f55\u5185\u5bb9 IO\u548c\u6587\u4ef6\u64cd\u4f5c \u8bfb\u6587\u672c\u6587\u4ef6 f = open ( \"test.txt\" , encoding = \"utf-8\" ) # \u4e3a\u4e86\u4e0d\u4e71\u7801\uff0c\u6700\u597d\u6bcf\u6b21\u90fd\u6307\u660e encoding f . readline () # \u4e00\u6b21\u8bfb\u53d6\u4e00\u884c\uff0c\u5305\u542b\u6362\u884c\u7b26 # \u91cd\u65b0\u8bbe\u7f6e\u6587\u4ef6\u8bfb\u53d6\u6307\u9488\u5230\u5f00\u5934 f . seek ( 0 , 0 ) #\u65b9\u6cd5\u7528\u4e8e\u4ece\u6587\u4ef6\u8bfb\u53d6\u6307\u5b9a\u7684\u5b57\u8282\u6570\uff0c\u5982\u679c\u672a\u7ed9\u5b9a\u6216\u4e3a\u8d1f\u5219\u8bfb\u53d6\u6240\u6709\uff0c\u8be5\u65b9\u6cd5\u901a\u5e38\u7528\u4e8e\u8bfb\u53d6\u4e8c\u8fdb\u5236\u6587\u4ef6 f . read () f . close () \u5199\u6587\u672c\u6587\u4ef6 f = open ( \"test.txt\" , 'w' , encoding = \"utf-8\" ) f . writeline ( \"a \\n \" ) f . write ( \"\" ) \u65b9\u6cd5\u7528\u4e8e\u5411\u6587\u4ef6\u4e2d\u5199\u5165\u6307\u5b9a\u5b57\u7b26\u4e32 . f . close () \u904d\u5386\u6587\u4ef6\u6bcf\u4e00\u884c f = open ( \"test.txt\" , encoding = \"utf-8\" ) for line in f . readlines (): print ( line ) for line in f \uff1a print ( line ) # \u4ee5\u4e0a\u4e24\u79cd\u8fed\u4ee3\u65b9\u5f0f\u770b\u8d77\u6765\u662f\u7b49\u4ef7\u7684\uff0c\u4f46\u5374\u6709\u6240\u533a\u522b\u3002 # \u7b2c\u4e00\u79cd\u662f\u628a\u6240\u6709\u7684\u884c\u6309\u7167list\u7684\u65b9\u5f0f\u8bfb\u5165\u5185\u5b58\uff0c\u7136\u540e\u904d\u5386\u3002 # \u7b2c\u4e8c\u79cd\u76f4\u63a5\u5bf9f\u8fdb\u884c\u8fed\u4ee3\uff0c\u8fd9\u4e2a\u65f6\u5019\u6587\u4ef6\u4e2d\u7684\u6bcf\u4e00\u884c\u5e76\u6ca1\u6709\u9884\u5148\u88ab\u8bfb\u5165\u5185\u5b58\u3002 # f\u9ed8\u8ba4\u5177\u6709\u8fed\u4ee3\u5668\u5c5e\u6027\uff0c\u5173\u4e8e\u4ec0\u4e48\u662f\u8fed\u4ee3\u5668\uff0c\u540e\u9762\u4f1a\u518d\u505a\u5177\u4f53\u4ecb\u7ecd\u3002 f . close () \u8bfb\u4e8c\u8fdb\u5236\u6587\u4ef6 filepath = 'x.bin' binfile = open ( filepath , 'rb' ) # \u6253\u5f00\u4e8c\u8fdb\u5236\u6587\u4ef6 size = os . path . getsize ( filepath ) # \u83b7\u5f97\u6587\u4ef6\u5927\u5c0f for i in range ( size ): data = binfile . read ( 1 ) # \u6bcf\u6b21\u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\uff0c\u8fd4\u56de\u7684\u7c7b\u578b\u662f bytes\u7c7b\u578b\u3002 print ( data ) # \u5982\u679c\u5728\u8fd9\u91cc\u4f60\u60f3\u770b\u5230\u662f\u6570\u503c\u7c7b\u578b\u6216\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u7528\u7c7b\u578b\u8f6c\u6362\u65b9\u5f0f binfile . close () \u5199\u4e8c\u8fdb\u5236\u6587\u4ef6 f = open ( 'x.bin' , 'wb' ): f . write ( b \"test\" ) # \u5199\u5165\u7684\u5fc5\u987b\u662f bytes \u7c7b\u578b\uff0c\u5982\u679c\u4f60\u60f3\u5199\u5165\u6574\u6570\u6216\u6d6e\u70b9\u6570\uff0c\u9700\u8981\u505a\u4e00\u6b21\u7c7b\u578b\u8f6c\u6362 \"\"\" python\u63d0\u4f9b\u4e86struct\u6a21\u5757\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u5728\u6570\u503c\u548cbytes\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362 \"\"\" import struct struct . pack ( \"i\" , 1 ) # \u628a\u6574\u6570 1 \u8f6c\u6362\u6210bytes struct . unpack ( \"i\" , b ' \\x01\\x00\\x00\\x00 ' ) # \u628abytes\u8f6c\u6362\u6210\u6574\u6570 \u4e0b\u8868\u4e2d\u5217\u51fa\u4e86\u6240\u6709\u7684\u8f6c\u6362\u65b9\u5f0f\uff1a struct \u7528\u6cd5 \u8bed\u6cd5\u7cd6 Python\u8bed\u6cd5\u7cd6\u7cfb\u5217 Syntactic Sugar in Python \u8bed\u6cd5\u7cd6\uff08Syntactic sugar\uff09\uff0c\u4e5f\u8bd1\u4e3a\u7cd6\u8863\u8bed\u6cd5\uff0c\u662f\u7531\u82f1\u56fd\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u5f7c\u5f97\u00b7\u7ea6\u7ff0\u00b7\u5170\u8fbe\uff08Peter J. Landin\uff09\u53d1\u660e\u7684\u4e00\u4e2a\u672f\u8bed\uff0c\u6307\u8ba1\u7b97\u673a\u8bed\u8a00\u4e2d\u6dfb\u52a0\u7684\u67d0\u79cd\u8bed\u6cd5\uff0c\u8fd9\u79cd\u8bed\u6cd5\u5bf9\u8bed\u8a00\u7684\u529f\u80fd\u5e76\u6ca1\u6709\u5f71\u54cd\uff0c\u4f46\u662f\u66f4\u65b9\u4fbf\u7a0b\u5e8f\u5458\u4f7f\u7528\u3002\u901a\u5e38\u6765\u8bf4\u4f7f\u7528\u8bed\u6cd5\u7cd6\u80fd\u591f\u589e\u52a0\u7a0b\u5e8f\u7684\u53ef\u8bfb\u6027\uff0c\u4ece\u800c\u51cf\u5c11\u7a0b\u5e8f\u4ee3\u7801\u51fa\u9519\u7684\u673a\u4f1a\u3002 \u6761\u4ef6\u8d4b\u503c b = 2 c = 3 if b > c : a = b else : a = c # \u66f4\u4f18\u96c5\u7684\u5199\u6cd5 # \u7b49\u4ef7\u4e8eC++\u79cd\u7684 a = c > b ? c : a a = c if c > b else b \u867d\u7136Python\u4e2d\u6ca1\u6709\u95ee\u53f7\u548c\u5192\u53f7\u7ec4\u6210\u7684\u4e09\u76ee\u8fd0\u7b97\u7b26\uff0c\u4f46\u662f\u53ef\u4ee5\u7528if else\u7684\u6761\u4ef6\u8d4b\u503c\u4ee3\u66ff. \u591a\u5143\u8d4b\u503c a = 1 ; b = 2 ; c = 3 # \u66f4\u4f18\u96c5\u7684\u5199\u6cd5 a , b , c = 1 , 2 , 3 zip \u8fed\u4ee3 \u5982\u679c\u4f60\u60f3\u8fed\u4ee3\u4e24\u4e2a\u7b49\u957f\u7684\u6570\u7ec4\uff0c\u5728C++\u4e2d\u4f60\u9700\u8981\u4e00\u4e2a\u7d22\u5f15\uff0c\u7136\u540e\u4ece\u4e24\u4e2a\u6570\u7ec4\u5206\u522b\u53d6\u503c\uff0c\u5728python\u91cc\u9762\u4f60\u4e5f\u53ef\u4ee5\u8fd9\u505a\uff0c\u4e5f\u53ef\u4ee5\u7528zip\u51fd\u6570\u3002 a = [ \"name\" , \"age\" ] b = [ \"wang\" , 18 ] data = {} for i in range ( len ( a )): data . update ({ a [ i ]: b [ i ]}) # \u66f4\u4f18\u96c5\u7684\u5199\u6cd5 for x , y in zip ( a , b ): data . update ({ x : y }) zip\u628a\u4e24\u4e2a\u5217\u8868\u538b\u7f29\u6210\u4e00\u4e2a\u5217\u8868\uff0c\u91cc\u9762\u7684\u6bcf\u4e2a\u5143\u7d20\u662f\u5143\u7ec4\u3002 \u5217\u8868\u63a8\u5bfc\u5f0f \u5982\u679c\u6211\u4eec\u60f3\u628a\u4e00\u4e2a\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u53d8\u6210\u5e73\u65b9: a = [ 0 , 1 , 2 , 3 , 5 , 6 ] b = [] for x in a : b . append ( x ** 2 ) # \u66f4\u4f18\u96c5\u7684\u5199\u6cd5 b = [ x ** 2 for x in a ] # \u8fd8\u53ef\u4ee5\u52a0\u6761\u4ef6 b = [ x ** 2 for x in a if x > 0 ] \u96c6\u5408\u63a8\u5bfc\u5f0f a = [ 0 , 1 , 2 , 3 , 5 , 3 , 5 , 6 ] b = set () for x in a : b . add ( x ) # \u66f4\u4f18\u96c5\u7684\u5199\u6cd5 b = { x for x in a } \u5b57\u5178\u63a8\u5bfc\u5f0f a = [ \"name\" , \"age\" ] b = [ \"wang\" , 18 ] data = {} for x , y in zip ( a , b ): data . update ({ x : y }) # \u5e94\u7528\u5b57\u5178\u63a8\u5bfc\u5f0f\uff0c\u8fd8\u53ef\u4ee5\u66f4\u7b80\u4fbf data = { x : y for x , y in zip ( a , b )} \u5927\u4e8e\u548c\u5c0f\u4e8e a = 3 1 < a < 10 # True with\u5173\u952e\u5b57 \u5728C++\u91cc\uff0c\u5982\u679c\u4f60\u8981\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\uff0c\u4f60\u603b\u8981\u8bb0\u5f97\u5173\u95ed\u3002Python\u91cc\u9762\u4e5f\u6709\u6253\u5f00\u548c\u5173\u95ed\u6587\u4ef6\u7684\u64cd\u4f5c\uff0c\u4e0d\u8fc7\uff0c\u5229\u7528with as\u5173\u952e\u5b57\u540e\uff0c\u4f60\u53ef\u4ee5\u4e0d\u5fc5\u624b\u52a8\u5173\u95ed\u6587\u4ef6\u4e86\u3002 f = open ( \"text.txt\" ) for line in f . readlines (): print ( line ) f . close () # \u66f4\u4f18\u96c5\u7684\u5199\u6cd5 with open ( \"text.txt\" ) as f : for line in f . readlines (): print ( line ) Python\u4e2d\u8fd8\u6709\u5f88\u591a\u7684\u8bed\u6cd5\u7cd6\uff0c\u8fd9\u4e9b\u8bed\u6cd5\u7cd6\u80fd\u5e2e\u52a9\u6211\u4eec\u628a\u4ee3\u7801\u53d8\u5f97\u975e\u5e38\u7b80\u5355\u3002","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"1-python-fundamentals/#python","text":"","title":"Python\u57fa\u672c\u77e5\u8bc6"},{"location":"1-python-fundamentals/#_1","text":"\u5b89\u88c5Python\u5e76\u4e0d\u662f\u4e00\u4ef6\u5f88\u96be\u7684\u4e8b\u60c5\uff0c\u8bf7\u53c2\u7167\u7f51\u7edc\u4e0a\u7684\u8d44\u6599\uff0c\u6211\u4eec\u4e0d\u6253\u7b97\u591a\u505a\u4ecb\u7ecd\u3002 Python\u5b98\u7f51 Anaconda\u5b98\u7f51 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u9664\u4e86\u5355\u72ec\u5b89\u88c5Python\u7684\u53d1\u884c\u7248\u672c\uff0c\u4f60\u8fd8\u53ef\u4ee5\u9009\u62e9\u5b89\u88c5Anaconda\uff0c\u5b83\u5305\u542b\u4e86Python\uff0c\u540c\u65f6\u8fd8\u81ea\u5e26\u4e86\u5f88\u591a\u65b9\u4fbf\u7684\u5de5\u5177\uff0c\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u6253\u5305\u540e\u7684\u5de5\u5177\u96c6\u5408\u3002\u9664\u6b64\u4e4b\u5916\uff0cAnaconda\u8fd8\u53ef\u4ee5\u63d0\u4f9b\u865a\u62df\u73af\u5883\uff0c\u8fd9\u5728\u4f60\u5b66\u4f1aPython\u4e4b\u540e\u7684\u771f\u6b63\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u4f1a\u5f88\u6709\u7528\u3002 Python\u7248\u672c \u5386\u53f2\u4e0aPython2\u548cPython3\u5171\u5b58\u4e86\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u7ed9\u521d\u5b66\u8005\u5e26\u6765\u4e86\u5f88\u591a\u4e0d\u4fbf\uff0c\u5e78\u8fd0\u7684\u662f\uff0cPython2\u5df2\u7ecf\u6e10\u6e10\u9000\u51fa\u5386\u53f2\u821e\u53f0\uff0c\u6240\u4ee5\u521d\u5b66\u8005\u53ea\u9700\u8981\u5b66\u4e60Python3\u5c31\u597d\uff0c\u786e\u4fdd\u4f60\u5b89\u88c5\u4e86\u6700\u8fd1\u7684Python3\u7248\u672c\u5373\u53ef\u3002","title":"\u5b89\u88c5"},{"location":"1-python-fundamentals/#hello-world","text":"Python\u662f\u4e00\u95e8\u89e3\u91ca\u6027\u7684\u811a\u672c\u8bed\u8a00\uff0c\u5982\u679c\u4f60\u7528\u8fc7MATLAB\uff0c\u4e0d\u96be\u7406\u89e3\u4ec0\u4e48\u662f\u89e3\u91ca\u6027\u8bed\u8a00\u3002C++\u662f\u4e00\u95e8\u7f16\u8bd1\u6027\u8bed\u8a00\uff0c\u9700\u8981\u5148\u7f16\u8bd1\u624d\u80fd\u8fd0\u884c\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u89e3\u91ca\u6027\u8bed\u8a00\u7684\u8fd0\u884c\u65b9\u5f0f\u7075\u6d3b\u7684\u591a\u3002 \u7b2c\u4e00\u79cd\u8fd0\u884cPython\u7684\u65b9\u5f0f \u5728\u547d\u4ee4\u884c\u4e2d\u76f4\u63a5\u8fd0python.exe\uff0c\u4f60\u5c06\u8fdb\u5165 Python \u7684REPL\uff0c\u76f4\u63a5\u6253\u5370hello world! \u4ec0\u4e48\u662fREPL\uff1f \u8bfb\u53d6-\u8bc4\u4f30-\u6253\u5370\u5faa\u73af\uff08REPL\uff09\uff0c\u4e5f\u79f0\u4e3a\u4ea4\u4e92\u5f0f\u9876\u5c42\u6216\u8bed\u8a00\u5916\u58f3\uff0c\u662f\u4e00\u79cd\u7b80\u5355\u7684\u4ea4\u4e92\u5f0f\u8ba1\u7b97\u673a\u7f16\u7a0b\u73af\u5883\uff0c\u5b83\u63a5\u53d7\u5355\u4e2a\u7528\u6237\u8f93\u5165\u3001\u6267\u884c\u5b83\u4eec\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u7528\u6237\uff1b \u5728 REPL \u73af\u5883\u4e2d \u7f16\u5199\u7684\u7a0b\u5e8f\u662f\u5206\u6bb5\u6267\u884c\u7684 \u3002 \u8be5\u672f\u8bed\u901a\u5e38\u6307\u7684\u662f\u7c7b\u4f3c\u4e8e\u7ecf\u5178 Lisp \u673a\u5668\u4ea4\u4e92\u73af\u5883\u7684\u7f16\u7a0b\u63a5\u53e3\u3002 \u5e38\u89c1\u7684\u4f8b\u5b50\u5305\u62ec\u547d\u4ee4\u884c shell \u548c\u7f16\u7a0b\u8bed\u8a00\u7684\u7c7b\u4f3c\u73af\u5883\uff0c\u8be5\u6280\u672f\u975e\u5e38\u5177\u6709\u811a\u672c\u8bed\u8a00\u7684\u7279\u5f81\u3002 A read\u2013eval\u2013print loop (REPL), also termed an interactive toplevel or language shell, is a simple interactive computer programming environment that takes single user inputs, executes them, and returns the result to the user; a program written in a REPL environment is executed piecewise. The term usually refers to programming interfaces similar to the classic Lisp machine interactive environment. Common examples include command-line shells and similar environments for programming languages, and the technique is very characteristic of scripting languages. \u867d\u7136REPL\u662f\u811a\u672c\u8bed\u8a00\u7684\u7279\u5f81\uff0c\u4f46\u5e76\u975e\u53ea\u6709Python/Javascript\u8fd9\u6837\u7684\u811a\u672c\u8bed\u8a00\u624d\u6709REPL\uff0c\u5f88\u591a\u7f16\u8bd1\u8bed\u8a00\u4e5f\u63d0\u4f9b\u4e86\u8fd9\u6837\u7684\u529f\u80fd\uff0c\u6bd4\u5982scala\u3002\u5982\u679c\u4f60\u7528\u8fc7ROOT https://root.cern/install/ \uff0c\u4f60\u4f1a\u53d1\u73b0\u5b83\u5176\u5b9e\u5c31\u662fC++\u7684REPL\u3002 ROOT\u662f\u901a\u8fc7LLVM\u6280\u672f\u5bf9C++\u4ee3\u7801\u8fdb\u884c\u4e86\u8fd0\u884c\u65f6\u7f16\u8bd1\uff0c\u5e76\u975e\u4f7f\u7528\u4e86\u4f20\u7edf\u7684\u7f16\u8bd1\u5668\uff0c\u6240\u4ee5\u624d\u80fd executed piecewise \uff08\u4e00\u6bb5\u6bb5\u4ee3\u7801\u7684\u6267\u884c\uff09\u3002 \u7b2c\u4e8c\u79cd\u8fd0\u884cPython\u7684\u65b9\u5f0f \u4f60\u4e5f\u53ef\u4ee5\u628aPython\u4ee3\u7801\u5199\u5728\u4e00\u4e2a\u6587\u4ef6\u91cc\u9762\uff0c\u7136\u540e\u7528\u5982\u4e0b\u547d\u4ee4\u8fd0\u884c\uff1a # code.py print ( \"hello world\" ) python code.py \u5176\u4ed6\u8fd0\u884cPython\u7684\u65b9\u5f0f Python\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u96c6\u6210\u5230\u5176\u4ed6\u5f00\u53d1\u5de5\u5177\u4e2d\uff1aPycharm\u3001VS Code\u3001jupyter notebook\u7b49\u7b49\uff0c\u8fd9\u4e9bIDE\u6216\u7f16\u8f91\u5668\u4f1a\u5e2e\u52a9\u6211\u4eec\u8c03\u7528Python\u89e3\u91ca\u5668\u3002","title":"Hello World"},{"location":"1-python-fundamentals/#_2","text":"\u548cC++\u4e00\u6837\uff0cPython\u91cc\u9762\u4e5f\u6709\u4e24\u79cd\u6ce8\u91ca\uff1a\u4e00\u79cd\u662f\u5355\u884c\u6ce8\u91ca\uff0c\u53e6\u4e00\u79cd\u662f\u591a\u884c\u6ce8\u91ca\u3002 # \u8fd9\u662f\u4e00\u884c\u6ce8\u91ca print ( \"hello world\" ) #\u8fd9\u662f\u884c\u5c3e\u6ce8\u91ca \"\"\" \u8fd9\u662f \u591a\u884c\u6ce8\u91ca \"\"\"","title":"\u6ce8\u91ca"},{"location":"1-python-fundamentals/#_3","text":"\u4e0eC++\u4e0d\u540c\uff0c\u5728Python\u91cc\u9762\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4efb\u4f55\u53d8\u91cf\uff0c\u4e0d\u9700\u8981\u663e\u793a\u6307\u5b9a\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u4e5f\u4e0d\u9700\u8981\u63d0\u524d\u58f0\u660e\uff0c\u8fd9\u548cMATLAB\u91cc\u9762\u7684\u7528\u6cd5\u7c7b\u4f3c\u3002 a = 1 a = \"hell0\" a = 0.5 \u5bb9\u6613\u770b\u51fa\uff0c\u6211\u4eec\u5148\u540e\u7ed9\u53d8\u91cfa\u8d4b\u503c\u4e86\u6574\u6570\u7c7b\u578b\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\u548c\u6d6e\u70b9\u6570\u3002\u53d8\u91cf\u7684\u7c7b\u578b\u968f\u65f6\u6709\u53ef\u80fd\u53d8\u5316\uff0c\u8fd9\u548cC++\u4e0d\u540c\u3002\u90a3\u4e48\u6211\u4eec\u600e\u4e48\u77e5\u9053\u4e00\u4e2a\u53d8\u91cf\u5728\u67d0\u4e2a\u65f6\u5019\u7684\u5177\u4f53\u7c7b\u578b\u5462\uff1f\u53ef\u4ee5\u5229\u7528type\u51fd\u6570\uff1a type ( a )","title":"\u53d8\u91cf"},{"location":"1-python-fundamentals/#_4","text":"C++\u4e2d\u5b58\u5728\u6307\u9488\uff0cPython\u4e2d\u6307\u9488\u6d88\u5931\u4e86\u3002\u5728C++\u4e2d\u6211\u4eec\u4f1a\u5173\u5fc3\u4f20\u9012\u4e00\u4e2a\u53c2\u6570\u7684\u65f6\u5019\u662f\u4f20\u9012\u7684\u6307\u9488\u8fd8\u662f\u503c\uff0c\u6216\u8005\u5f15\u7528\uff0c\u90a3\u4e48\u5728Python\u4e2d\u662f\u5426\u6709\u7c7b\u4f3c\u7684\u95ee\u9898\uff1f\u5728Python\u91cc\u9762\uff0c\u5bf9\u8c61\u662f\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u7684\uff0c\u6bcf\u4e2a\u53d8\u91cf\u90fd\u662f\u6307\u5411\u5bf9\u8c61\u7684\u5f15\u7528\uff08\u4e3a\u4e86\u7406\u89e3\u65b9\u4fbf\uff0c\u4e5f\u53ef\u4ee5\u5f53\u4f5c\u6307\u9488\uff09\u3002 a = 'apple' b = 'pear' \u53d8\u91cfa\uff0cb\u548c\u5bf9\u8c61\u7684\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5982\u679c\u4f60\u628ab\u8d4b\u503c\u7ed9\u4e86a\uff0c a = b \u90a3\u4e48\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u4f1a\u53d8\u6210\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\uff1a \u6240\u4ee5\u53d8\u91cf\u90fd\u662f\u5f15\u7528\u3002\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u4e0a\u56fe\u4e2d\u7684\u60c5\u51b5\u7528C++\u91cc\u9762\u7684\u60c5\u51b5\u7c7b\u6bd4\uff0c\u76f8\u5f53\u4e8ea\u6307\u9488\u6307\u5411\u4e86b\uff0ca\u6307\u9488\u539f\u6765\u6307\u5411\u7684\u5bf9\u8c61\u4e0d\u518d\u4f7f\u7528\u4e86\uff0c\u4e5f\u6ca1\u6709\u5176\u4ed6\u65b9\u5f0f\u53ef\u4ee5\u518d\u8bbf\u95ee\u4e86\uff0c\u5982\u679c\u6ca1\u6709\u63d0\u524d\u5220\u9664\uff0c'apple'\u5c31\u6210\u4e86\u5b64\u5c9b\uff0c\u8fd9\u4e0d\u5c31\u662f\u5185\u5b58\u6cc4\u6f0f\u5417\uff1f","title":"\u6d88\u5931\u7684\u6307\u9488"},{"location":"1-python-fundamentals/#_5","text":"\u5982\u679c\u4f60\u53ea\u5b66\u8fc7C/C++\u8bed\u8a00\uff0c\u90a3\u4e48\u8fd9\u53ef\u80fd\u662f\u4f60\u7b2c\u4e00\u6b21\u542c\u8bf4\u201c \u5783\u573e\u56de\u6536 \u201d\u8fd9\u4e2a\u8bcd\u3002\u5783\u573e\u56de\u6536\u662f\u73b0\u4ee3\u7f16\u7a0b\u8bed\u8a00\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u6280\u672f\uff0cJava\uff0cPython\uff0cJavascript\u7b49\u7f16\u7a0b\u8bed\u8a00\u90fd\u6709\u5783\u573e\u56de\u6536\u673a\u5236\u3002 \u5783\u573e \u6307\u7684\u662f\u90a3\u4e9b\u7a0b\u5e8f\u4e0d\u518d\u9700\u8981\u7684\u5185\u5b58\u5bf9\u8c61\uff0c \u56de\u6536 \u5c31\u662f\u7cfb\u7edf\u81ea\u52a8\u628a\u8fd9\u4e9b\u5185\u5b58\u5220\u9664\u6389\u3002\u56e0\u6b64\uff0c\u5728\u5177\u6709\u5783\u573e\u56de\u6536\u7684\u8bed\u8a00\u91cc\u4f60\u4e0d\u7528\u518d\u62c5\u5fc3\u5185\u5b58\u6cc4\u6f0f\u5566\uff01 \u5f53\u7136\uff0c\u4f60\u4f9d\u7136\u53ef\u4ee5\u9009\u62e9\u624b\u52a8\u5220\u9664\u4e0d\u9700\u8981\u7684\u5bf9\u8c61\uff0c\u5220\u9664\u65b9\u5f0f\u548cC++\u7c7b\u4f3c\uff1a del a","title":"\u6d88\u5931\u7684\u5185\u5b58\u6cc4\u6f0f"},{"location":"1-python-fundamentals/#_6","text":"\u5728Python\u91cc\u9762\u6211\u4eec\u4e0d\u9700\u8981\u4f7f\u7528\u5927\u62ec\u53f7\u6765\u5305\u88f9\u4e00\u4e2a\u4ee3\u7801\u5757\uff0c\u5177\u6709\u76f8\u540c \u7f29\u8fdb \u7684\u4ee3\u7801\u4f1a\u81ea\u52a8\u5c5e\u4e8e\u4e00\u4e2a\u4ee3\u7801\u5757\u3002\u6240\u4ee5\u5927\u62ec\u53f7\u5728\u8fd9\u91cc\u6d88\u5931\u4e86\u3002 // c++ if ( a == b ) { printf ( \"ok\" ); } # python if a == b : print ( \"ok\" ) Python\u4e2d\u4e5f\u53ef\u4ee5\u52a0\u5206\u53f7\uff0c\u4f46\u662f\u884c\u5c3e\u5206\u53f7\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u4f60\u4e0d\u5728\u4e00\u884c\u5185\u5199\u591a\u4e2a\u8bed\u53e5\uff0c\u90a3\u4e48\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\u4f7f\u7528\u5206\u53f7\u3002","title":"\u6d88\u5931\u7684\u62ec\u53f7"},{"location":"1-python-fundamentals/#_7","text":"\u7c7b\u578b\u7cfb\u7edf\u662f\u4efb\u4f55\u7f16\u7a0b\u8bed\u8a00\u7684\u57fa\u7840\uff0c\u4e0b\u9762\u662fPython\u91cc\u9762\u5185\u7f6e\u7684\u4e00\u4e9b\u6570\u636e\u7c7b\u578b\uff0c \u7c7b\u578b \u4f8b\u5b50 int a = 1 float a = 0.5 str a = \"hello\" bool a = True/False complex a = 1 + 2j bytes a = b\"hello\" set a = set() #\u7a7a\u96c6\u5408 list a = list() #\u7a7a\u5217\u8868 tuple a = tuple() #\u7a7a\u5143\u7ec4 dict a = dict() #\u7a7a\u5b57\u5178 \u5728Python3\u4e2dfloat\u662f64\u4f4d\u7684\u3002int\u662f\u52a8\u6001\u957f\u5ea6\u7684\u957f\u6574\u578b\uff0c\u7406\u8bba\u4e0a\u652f\u6301\u65e0\u9650\u5927\u7684\u6570\u5b57\u3002bytes\u7c7b\u578b\u5c31\u662f\u4e8c\u8fdb\u5236\u7c7b\u578b\uff0c\u5c06\u6570\u636e\u4fdd\u5b58\u4e3a\u5b57\u8282\u6570\u7ec4\uff0c\u4e00\u4e2a\u5b57\u8282\u6570\u7ec4\u5176\u5b9e\u5c31\u662f\u4e8c\u8fdb\u5236\u4e32\u3002\u5b57\u7b26\u4e32\u524d\u9762\u52a0\u4e0a b \u5c31\u4ee3\u8868\u8be5\u5b57\u7b26\u4e32\u662f\u7528\u5b57\u8282\u6570\u7ec4\u7684\u65b9\u5f0f\u5b58\u50a8\u7684\u3002\u5728Python\u91cc\u9762\u6ca1\u6709char\u7c7b\u578b\u3002complex\u662f\u590d\u6570\u7c7b\u578b\uff0c\u5728C++\u5185\u7f6e\u7c7b\u578b\u4e2d\u4e5f\u662f\u6ca1\u6709\u7684\u3002 Python\u4e2d\u7528True\u548cFalse\u6765\u4ee3\u8868bool\u503c\u7684\u771f\u548c\u5047\u3002 \u7c7b\u578b\u63a8\u65ad a = 1 print ( type ( a )) # output: int \u4f60\u5df2\u7ecf\u53d1\u73b0\uff0c\u5f53\u6211\u4eec\u7ed9\u53d8\u91cfa\u8d4b\u503c\u7684\u65f6\u5019\uff0c\u5e76\u4e0d\u9700\u8981\u6307\u660ea\u662f\u4ec0\u4e48\u7c7b\u578b\uff0cPython\u4f1a\u81ea\u52a8\u77e5\u9053\u4f60\u8d4b\u503c\u7684\u7c7b\u578b\u662f\u4ec0\u4e48\uff0c\u8fd9\u5c31\u662f\u7c7b\u578b\u63a8\u65ad\u3002 Python\u4f1a\u81ea\u52a8\u63a8\u65ad\u8d4b\u503c\u8868\u8fbe\u5f0f\u53f3\u4fa7\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7136\u540e\u7ed9\u53d8\u91cf\u8bbe\u7f6e\u5bf9\u5e94\u7684\u7c7b\u578b\uff0c\u7c7b\u4f3cC++\u4e2d\u7684auto\u5173\u952e\u5b57\u7684\u4f5c\u7528\u3002\u7c7b\u578b\u63a8\u65ad\u662f\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5f88\u91cd\u8981\u7684\u4e00\u4e2a\u7279\u6027\uff0c\u4f18\u96c5\u7684\u7f16\u7a0b\u8bed\u8a00\u90fd\u4f1a\u652f\u6301\u7c7b\u578b\u63a8\u65ad\u3002 C++\u4e2d\u7684auto\u5173\u952e\u5b57\u4e5f\u662f\u5728\u540e\u671f\u7684\u6807\u51c6\u4e2d\u624d\u6dfb\u52a0\u8fdb\u53bb\u7684\uff0c\u65e9\u671f\u7684C++\u7f16\u8bd1\u5668\u5e76\u4e0d\u652f\u6301auto\u5173\u952e\u5b57\u3002","title":"\u7c7b\u578b"},{"location":"1-python-fundamentals/#_8","text":"\u5173\u4e8e\u5f15\u53f7 Python\u91cc\u9762\u6709\u4e2a\u975e\u5e38\u806a\u660e\u7684\u8bbe\u8ba1\uff1a\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u90fd\u53ef\u4ee5\u8868\u793a\u5f15\u53f7\uff0c\u6548\u679c\u7b49\u4ef7\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u751f\u6548\u3002\u4e0d\u80fd\u540c\u65f6\u751f\u6548\u7684\u610f\u601d\u662f\uff0c\u5982\u679c\u4f60\u7528\u5355\u5f15\u53f7\u5305\u56f4\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u5728\u5b57\u7b26\u4e32\u5185\u7684\u53cc\u5f15\u53f7\u5c31\u662f\u666e\u901a\u5b57\u7b26\uff0c\u5c31\u4e0d\u7528\u52a0\u53cd\u659c\u6760\u4e86\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002 s = '\u6211\u662f\u53cc\u5f15\u53f7\",\u6211\u662f\u4e24\u4e2a\u53cc\u5f15\u53f7\"\"' s = \"\u6211\u662f\u5355\u5f15\u53f7',\u6211\u662f\u4e24\u4e2a\u5355\u5f15\u53f7''\" \u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u4e09\u5f15\u53f7\uff08\u4e09\u4e2a\u5355\u5f15\u53f7\u6216\u4e09\u4e2a\u53cc\u5f15\u53f7\u7b49\u4ef7\uff09\uff0c\u4e09\u5f15\u53f7\u53ef\u4ee5\u5305\u542b\u591a\u884c\u5b57\u7b26\u4e32\uff1a s = ''' \u591a\u884c \u5b57\u7b26\u4e32 ''' \u591a\u884c\u5b57\u7b26\u4e32\u4f1a\u628a\u6bcf\u884c\u7684\u5c3e\u90e8\u81ea\u52a8\u52a0\u4e0a\u6362\u884c\u7b26\u53f7\uff0c\u7136\u540e\u5408\u5e76\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u591a\u884c\u5b57\u7b26\u4e32\u5728\u4f60\u5904\u7406\u957f\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u53ef\u80fd\u6709\u7528\u3002 \u539f\u59cb\u5b57\u7b26\u4e32 \u539f\u59cb\u5b57\u7b26\u4e32\u662f \u201c\u6240\u89c1\u5373\u6240\u5f97\u201d \u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u53ea\u9700\u8981\u5728\u5b57\u7b26\u4e32\u4e4b\u524d\u52a0\u4e0ar\uff0c\u5c31\u4e0d\u7528\u518d\u5bf9\u5b57\u7b26\u8fdb\u884c\u8f6c\u4e49\u4e86\u3002\u8fd9\u5728\u5904\u7406Windows\u4e0b\u7684\u6587\u4ef6\u8def\u5f84\u65f6\u5c24\u5176\u6709\u7528\uff0c\u53ef\u4ee5\u63d0\u4f9b\u5f88\u591a\u65b9\u4fbf\uff1a \"\"\" \u4e0d\u7528\u518d\u62c5\u5fc3\u81ea\u5df1\u5fd8\u8bb0\u628a\u4e00\u4e2a\u53cd\u659c\u6760\u8f6c\u6362\u6210\u4e24\u4e2a\u53cd\u659c\u6760\u4e86\u3002 \"\"\" path = r \"C:\\users\\xxx\" s = r ''' \u591a\u884c \\n \u5b57\u7b26\u4e32 ''' \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u867d\u7136\u4e0d\u662f\u4ec0\u4e48\u590d\u6742\u7684\u529f\u80fd\uff0c\u4f46\u5374\u975e\u5e38\u5e38\u7528\u3002\u5728Python\u91cc\u9762\u6709\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6cd5\uff1a a = \"I am\" b = 18 c = \"years old.\" # \u65b9\u6cd5\u4e00\uff1a \u5f88\u7c7b\u4f3cC\u7684\u98ce\u683c s = \" %s %d %s \" % ( a , b , c ) # \u65b9\u6cd5\u4e8c.a\uff1a \u81ea\u52a8\u8bc6\u522b\u683c\u5f0f\uff0c s = \" {0} {1} {2} \" . format ( a , b , c ) # \u65b9\u6cd5\u4e8c.b\uff1a s = \" {} {} {} \" . format ( a , b , c ) # \u65b9\u6cd5\u4e8c.c\uff1a b\u7684\u4e00\u4e2a\u53d8\u4f53\uff0c\u53ef\u4ee5\u81ea\u5df1\u63a7\u5236\u987a\u5e8f s = \" {0} {1} {2} \" . format ( a , b , c ) # \u65b9\u6cd5\u4e8c.d\uff1a \u53ef\u4ee5\u5229\u7528\u540d\u5b57\u683c\u5f0f\u5316\uff0c\u66f4\u52a0\u53ef\u8bfb s = \" {prefix} {age} {suffix} \" . format ( prefix = a , age = b , suffix = c ) # \u65b9\u6cd5\u4e8c.e\uff1a\u5229\u7528\u5b57\u5178 data = { \"prefix\" : \"I am\" , \"age\" : 18 , \"suffix\" : \"years old.\" } s = \" {prefix} {age} {suffix} \" . format ( ** data ) # **\u4ee3\u8868\u628a\u5b57\u5178\u7684key-value\u89e3\u5f00\uff0c\u6309\u7167\u5355\u72ec\u7684key-value pair \u4f20\u9012\uff0c\u6548\u679c\u548c\u65b9\u6cd5d\u7b49\u540c # \u65b9\u6cd5\u4e09.a s = f \" { a } { b } { c } \" # \u65b9\u6cd5\u4e09.b # \u652f\u6301\u8868\u8fbe\u5f0f s = f \" { a } { 3 * 6 } { c } \" # \u65b9\u6cd5\u4e09.c # \u4f60\u53ef\u4ee5\u76f4\u63a5\u5728\u5927\u62ec\u53f7\u91cc\u8c03\u7528\u51fd\u6570\uff0c\u5b9e\u9645\u4e0a\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u5728\u8fd9\u91cc\u201c\u5199\u4ee3\u7801\u201d\u3002 s = f \" { a } { get_years_old () } { c } \" # \u65b9\u6cd5\u4e09.d # \u5bf9\u6d6e\u70b9\u6570\u8fdb\u884c\u683c\u5f0f\u5316\uff0c\u4e0eC++\u7c7b\u4f3c\u3002\uff08\u4e09\u79cd\u65b9\u6cd5\u90fd\u53ef\u4ee5\uff0c\u4ec5\u4ee5\u7b2c\u4e09\u79cd\u4e3a\u4f8b\uff09\u3002 a = 3.5 s = f \" { a : 5.2f } \" \u63a8\u8350\u4f7f\u7528\u7b2c\u4e09\u79cd\u65b9\u5f0f\uff0c\u5f53\u4f60\u4e60\u60ef\u4e4b\u540e\uff0c\u4f60\u4f1a\u5fd8\u6389\u524d\u4e24\u79cd \u3002 Python 3's f-Strings","title":"\u5b57\u7b26\u4e32"},{"location":"1-python-fundamentals/#_9","text":"set\u3001list\u3001tuple\u3001dict\u90fd\u662f\u5bb9\u5668\u7c7b\u578b\uff0c\u5143\u7ec4tuple\u5c31\u662f\u4e0d\u53ef\u4fee\u6539\u7684\u5217\u8868list\uff0c\u9664\u6b64\u4e4b\u5916\u548clist\u7b49\u4ef7\u3002\u4e0eset\uff0clist\uff0cdict\u76f8\u5bf9\u5e94\uff0cC++\u7684\u6807\u51c6\u5e93\u91cc\u4e5f\u652f\u6301list\uff0cset\uff0cmap\u7b49\u7c7b\u578b\uff0c\u4f46\u8fdc\u6ca1\u6709\u5728Python\u91cc\u4f7f\u7528\u8d77\u6765\u65b9\u4fbf\u3002 \u521b\u5efa # \u521b\u5efa\u5217\u8868\u7684\u51e0\u79cd\u65b9\u5f0f a = [] a = list () a = [ 1 , 2 , 3 ] a = [ 1 , 2 , \"hello\" ] #\u5217\u8868\u4e2d\u53ef\u4ee5\u5bb9\u7eb3\u4efb\u4f55object\uff0c\u5728C++\u91cc\u4f60\u5f88\u96be\u505a\u5230\u8fd9\u4e00\u70b9 # \u521b\u5efa\u5143\u7ec4 a = () a = tuple () a = ( 1 , 2 , 3 ) a = ( 1 , 2 , \"hello\" ) # \u521b\u5efa\u5b57\u5178\uff0c \u7c7b\u4f3cC++\u6807\u51c6\u5e93\u4e2d\u7684map a = dict () a = {} a = { 1 : \"d\" , \"2\" : 9 } # key \u548c value\u7684\u503c\u4e5f\u662f\u4efb\u610f\u7684\u5bf9\u8c61\uff0c\u8fd9\u70b9\u548cC++\u4e0d\u540c # \u521b\u5efa\u96c6\u5408 a = set () a = { 1 , \"d\" , \"2\" , 9 , 1.0 , 1 } # \u96c6\u5408\u91cc\u7684\u5143\u7d20\u4e5f\u53ef\u4ee5\u662f\u4efb\u4f55\u5bf9\u8c61\uff0c\u8fd9\u70b9\u548cC++\u4e0d\u540c \u6dfb\u52a0\u5143\u7d20 # \u96c6\u5408 a = set () a . add ( 1 ) a . add ( \"ok\" ) # \u5217\u8868 a = [] a . append ( 1 ) a . append ( \"ok\" ) # \u5b57\u5178 a = {} a . update ({ \"name\" : \"wang\" }) a . update ({ \"age\" : 18 }) \u5220\u9664\u5143\u7d20 # \u96c6\u5408 a = set () a . add ( 1 ) a . add ( \"ok\" ) a . remove ( \"ok\" ) # \u5217\u8868 a = [] a . append ( 1 ) a . append ( \"ok\" ) a . remove ( \"ok\" ) # \u5b57\u5178 a = {} a . update ({ \"name\" : \"wang\" }) a . update ({ \"age\" : 18 }) del a [ \"name\" ] \u904d\u5386\u5143\u7d20 \u904d\u5386\u8fd9\u4e9b\u5bb9\u5668\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u7528\u5230 in \u8fd9\u4e2a\u8fd0\u7b97\u7b26\uff0clist\uff0ctuple\uff0cset\u7684\u904d\u5386\u65b9\u5f0f\u5982\u4e0b\uff1a a = [ 1 , 2 , \"ok\" ] for x in a : print ( x ) \u5b57\u5178\u6bd4\u8f83\u7279\u6b8a\uff0c\u5b83\u6bcf\u4e2a\u5143\u7d20\u5176\u5b9e\u662f\u4e2a key-value\u7684pair\uff0c\u6240\u4ee5\u6309\u7167\u6392\u5217\u7ec4\u5408\uff0c\u4f60\u6709\u5f88\u591a\u79cd\u53bb\u8fed\u4ee3\u5b83\u7684\u65b9\u5f0f\uff1a a = {} a . update ({ \"name\" : \"wang\" }) a . update ({ \"age\" : 18 }) for x in a : # \u9ed8\u8ba4\u8fed\u4ee3 keys print ( x ) # output\uff1a # name # age for x in a . keys (): print ( x ) # output\uff1a # name # age for x in a . values (): print ( x ) # output\uff1a # wang # 18 for k , v in a . items (): # k,v = (k,v) print ( k , v ) # output\uff1a # name : wang # age : 18 items() \u51fd\u6570\u8fd4\u56de\u7684\u5143\u7d20\u662f\u957f\u5ea6\u4e3a2\u7684\u5143\u7ec4\uff0c\u5143\u7ec4\u5728\u4efb\u4f55\u65f6\u5019\u90fd\u53ef\u4ee5\u76f4\u63a5\u5c55\u5f00\u6210\u591a\u4e2a\u5143\u7d20\u3002 \u8bbf\u95ee\u5143\u7d20 \u6309\u4e0b\u6807\u8bbf\u95ee\u5217\u8868 # \u8bbf\u95ee\u5217\u8868 a = [ 1 , 2 , \"hello\" ] a [ 0 ] # 1 a [ 2 ] # hello a [ - 1 ] # hello, \u8d1f\u6570\u4ee3\u8868\u53cd\u65b9\u5411\uff0c\u5f88\u5bb9\u6613\u7406\u89e3 \u8bbf\u95ee\u5143\u7ec4\u7684\u65b9\u5f0f\u4e0elist\u76f8\u540c\uff0c\u4f46set\u7c7b\u578b\u4e0d\u53ef\u4ee5\u7528\u4e0b\u6807\u8bbf\u95ee\uff0c\u601d\u8003\u4e00\u4e0b\u4e3a\u4ec0\u4e48\uff1f \u6309key\u8bbf\u95ee\u5b57\u5178 # \u8bbf\u95ee\u5b57\u5178 a = { 1 : \"d\" , \"2\" : 9 } a [ 1 ] # \"d\" a [ \"2\" ] # 9 \u5207\u7247 slicing \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u7528range\u51fd\u6570\u6765\u521b\u5efa\u4e00\u4e2a\u8fde\u7eed\u6574\u6570\u5217\u8868\uff0c a = list ( range ( 10 )) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] a = list ( range ( 0 \uff0c 10 )) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] a = list ( range ( 0 , 10 , 2 )) # [0, 2, 4, 6, 8] range\u51fd\u6570\u751f\u6210\u7684\u5176\u5b9e\u662f\u8fed\u4ee3\u5668\uff0c\u5173\u4e8e\u4ec0\u4e48\u662f\u8fed\u4ee3\u5668\u540e\u9762\u4f1a\u4ed4\u7ec6\u8bb2\uff0c\u8fd9\u91cc\u4f60\u53ea\u9700\u8981\u77e5\u9053\u5fc5\u987b\u7528list\u51fd\u6570\u628a\u8fed\u4ee3\u5668\u5305\u88f9\u8d77\u6765\u624d\u80fd\u8f6c\u6362\u6210\u5217\u8868\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e0b\u5982\u4f55\u8bbf\u95ee\u5217\u8868\u7684\u4e00\u90e8\u5206\uff1a a = list ( range ( 10 )) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] a [ 0 : 1 ] # [0] a [ 2 : 4 ] # [2,3] a [ 2 :] # [2, 3, 4, 5, 6, 7, 8, 9] a [: 3 ] # [0, 1, 2] a [ - 2 : - 1 ] # [8] a [:] # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \u8bbf\u95ee\u4e00\u4e2a\u5217\u8868\u7684\u5207\u7247\u771f\u7684\u76f8\u5f53\u7075\u6d3b\uff0c\u60f3\u60f3\u5728C++\u91cc\u5b9e\u73b0\u4ee5\u4e0a\u529f\u80fd\u4f60\u9700\u8981\u591a\u5c11\u884c\u4ee3\u7801 \u6d45\u62f7\u8d1d\u4e0e\u6df1\u62f7\u8d1d \u4e0a\u9762\u6700\u540e\u4e00\u884c\u4ee3\u7801 a[:] \u770b\u8d77\u6765\u4ec0\u4e48\u4e5f\u6ca1\u505a\uff0c\u5176\u5b9e\u4e0d\u7136\uff0c\u5b83\u7684\u7528\u9014\u4e00\u70b9\u4e5f\u4e0d\u5c0f\u3002\u8bb0\u4f4f\u6211\u4eec\u4e0a\u6587\u8bb2\u7684\uff0cPython\u91cc\u9762\u7684\u53d8\u91cf\u90fd\u662f\u5f15\u7528\uff0c\u6240\u4ee5\u5f53\u4f60\u8981\u590d\u5236\u4e00\u4e2a\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u7528\u7b49\u53f7\u8d4b\u503c\u4ec5\u4ec5\u8d4b\u503c\u4e86\u5f15\u7528\uff0c\u6211\u4eec\u53eb\u505a\u6d45\u62f7\u8d1d\uff1b\u5982\u679c\u4f60\u590d\u5236\u4e86\u4e00\u4e2a\u53d8\u91cf\u7684\u5185\u5b58\u5bf9\u8c61\uff0c\u90a3\u624d\u53eb\u6df1\u62f7\u8d1d\u3002 # \u6d45\u62f7\u8d1d a = [ 1 , 2 , 3 ] b = a b . append ( 4 ) print ( a ) # [1, 2, 3, 4] print ( b ) # [1, 2, 3, 4] # \u6df1\u62f7\u8d1d # \u5982\u679c\u4f60\u4e0d\u60f3\u904d\u5386a\u7136\u540e\u4e00\u4e2a\u4e2a\u628a\u503c\u8d4b\u7ed9b\uff0c\u90a3\u4e48\u5c31\u8981\u7528\u4e0b\u9762\u7684\u65b9\u5f0f a = [ 1 , 2 , 3 ] b = a [:] # \u6216\u8005 b = list(a) b . append ( 4 ) print ( a ) # [1, 2, 3] print ( b ) # [1, 2, 3, 4]","title":"\u6570\u636e\u7ed3\u6784"},{"location":"1-python-fundamentals/#_10","text":"\u7c7b\u578b\u4e4b\u95f4\u7684\u8f6c\u6362\u65b9\u6cd5\u5982\u4e0b\u8868\uff1a \u8f6c\u6210str # all to str str ( 1 ) str ( 0.5 ) str ([ 1 , \"hello\" ]) \u4efb\u4f55\u5bf9\u8c61\u90fd\u53ef\u4ee5\u8f6c\u6210str, \u4f60\u8fd8\u53ef\u4ee5\u5229\u7528\u4e0a\u6587\u63d0\u5230\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u65b9\u6cd5\u628a\u5176\u4ed6\u7c7b\u578b\u8f6c\u6210\u5b57\u7b26\u4e32\u3002 \u8f6c\u6210int/float # number to int int ( 1.5 ) int ( 1.4 ) int ( \"1\" ) float ( 1 ) float ( 1.4 ) float ( \"1\" ) \u5e76\u4e0d\u662f\u6240\u6709\u7c7b\u578b\u90fd\u53ef\u4ee5\u8f6c\u6210int/float\uff0c\u5b83\u4eec\u5fc5\u987b\u7b26\u5408\u4e00\u5b9a\u7684\u683c\u5f0f\u3002 \u8f6c\u6210bool \u5176\u4ed6\u7c7b\u578b\u8f6c\u6362\u6210bool\u7c7b\u578b\u7684\u65f6\u5019\uff0c\u53ea\u6709\u4e3a \u96f6 \u4e3a \u7a7a \u7684\u65f6\u5019\u624d\u4f1a\u88ab\u8f6c\u6362\u6210False\uff0c\u5176\u4ed6\u60c5\u51b5\u4e00\u5f8b\u8f6c\u6362\u6210True\uff0c\u8fd9\u4e00\u70b9\u9700\u8981\u6ce8\u610f\u3002 bool ( set ()) # False bool ([]) # False bool ({}) # False bool ( \"\" ) # False bool ( 0 ) # False bool ( 0.0 ) # False \u6240\u4ee5\u5f53\u4f60\u770b\u5230\u5982\u4e0b\u7684\u7ed3\u679c\uff0c\u5c31\u4e0d\u5fc5\u611f\u5230\u60ca\u8bb6\u3002 bool ( \"False\" ) # True \u8f6c\u6210bytes \u5176\u4e2dbytes\u7c7b\u578b\u53ef\u4ee5\u88ab\u5f53\u4f5c\u7279\u6b8a\u5b57\u7b26\u4e32\uff0c\u5728\u5b57\u7b26\u4e32\u524d\u9762\u52a0\u4e0a b \u5c31\u4ee3\u8868bytes\u7c7b\u578b\u3002\u60f3\u4e00\u60f3ASCII\u7f16\u7801\uff0c\u6bcf\u4e2a\u5b57\u7b26\u5c31\u662f\u4e00\u4e2abyte\uff0c\u6240\u4ee5ASCII\u7f16\u7801\u4e0bbytes\u548cstr\u6ca1\u6709\u533a\u522b\uff0c\u4f46\u662f\u975eASSCII\u7f16\u7801\u4e0b\u5c31\u4e0d\u4e00\u6837\u4e86\uff0c\u5982\u679c\u5c06\u6c49\u5b57\u5b57\u7b26\u4e32\u8f6c\u6210bytes\uff0c\u5219\u9700\u8981\u8003\u8651\u7f16\u7801\u65b9\u5f0f\uff0c\u76f4\u63a5\u5728\u524d\u9762\u52a0b\u4f1a\u62a5\u9519\u3002 a = \"\u6df1\u5ea6\u5b66\u4e60\" . encode ( \"utf-8\" ) type ( a ) # bytes # bytes \u8f6c\u6210\u5b57\u7b26\u4e32 a . decode ( \"utf-8\" ) \u5982\u679c\u8981\u5c06int\u6216\u8005float\u8f6c\u6362\u6210bytes\uff0c\u5219\u9700\u8981\u8003\u8651\u5230\u8bf8\u5982\u5b57\u8282\u6570\uff0c\u5927\u7aef\u6216\u5c0f\u7aef\u7b49\u7ec6\u8282\u3002 b = 1 a = b . to_bytes ( 2 , \"little\" ) # \u53cd\u5411\u8f6c\u6362 int . from_bytes ( a , \"little\" ) # 1","title":"\u7c7b\u578b\u8f6c\u6362"},{"location":"1-python-fundamentals/#_11","text":"\u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f\u662f\u57fa\u7840\u5185\u5bb9\uff0c\u53ef\u53c2\u8003\u4ee5\u4e0b\u94fe\u63a5\uff1a Python \u8fd0\u7b97\u7b26 \u7edd\u5927\u90e8\u5206\u8fd0\u7b97\u53d1\u7b26\u5728C++\u4e4b\u4e2d\u90fd\u6709\u5bf9\u5e94\uff0c\u8fd9\u91cc\u503c\u5f97\u4e00\u63d0\u7684\u662fPython\u4e2d\u7684\u903b\u8f91\u8fd0\u7b97\u7b26\u76f4\u63a5\u4f7f\u7528\uff1a and\u3001or\u3001not\uff0c\u7406\u89e3\u8d77\u6765\u975e\u5e38\u65b9\u4fbf\u3002 a = True b = False if a and b : print ( \"ok\" ) if a or b : print ( \"ok\" ) if not a : print ( \"ok\" ) \u53e6\u5916\uff0cPython\u4e2d\u8fd8\u6709\u4e00\u4e2a\u6210\u5458\u8fd0\u7b97\u7b26\uff1ain\uff0c\u7528\u6765\u5224\u65ad\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u5728\u53e6\u4e00\u4e2a\u5bb9\u5668\u91cc\u9762\u3002\u8fd9\u4e0e for \u5faa\u73af\u4e2d\u4f7f\u7528\u7684in\u6709\u4e9b\u50cf\uff0c\u4f46\u529f\u80fd\u4e0d\u592a\u76f8\u540c\u3002 a = [ 1 , 2 , 5 ] if 1 in a : print ( \"ok\" )","title":"\u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f"},{"location":"1-python-fundamentals/#_12","text":"\u6761\u4ef6\u8bed\u53e5\u548c\u5faa\u73af\u63a7\u5236\u8bed\u53e5\u6bd4\u8f83\u57fa\u7840\uff0c\u548cC++\u4e2d\u6ca1\u6709\u592a\u5927\u533a\u522b\uff0c\u53ef\u4ee5\u76f4\u63a5\u53c2\u8003\u4ee5\u4e0b\u94fe\u63a5\uff1a \u6761\u4ef6\u8bed\u53e5 \u5faa\u73af\u8bed\u53e5 \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e9b\u4ee3\u7801\u793a\u4f8b\u3002 if-else num = 5 if num == 3 : # \u5224\u65adnum\u7684\u503c print ( 'boss' ) elif num == 2 : print ( 'user' ) elif num == 1 : print ( 'worker' ) elif num < 0 : # \u503c\u5c0f\u4e8e\u96f6\u65f6\u8f93\u51fa print ( 'error' ) else : print ( 'roadman' ) # \u6761\u4ef6\u5747\u4e0d\u6210\u7acb\u65f6\u8f93\u51fa while count = 0 while ( count < 9 ): print ( 'The count is:' , count ) count += 1 for fruits = [ 'banana' , 'apple' , 'mango' ] for fruit in fruits : # \u7b2c\u4e8c\u4e2a\u5b9e\u4f8b print ( '\u5f53\u524d\u6c34\u679c: %s ' % fruit ) Python\u4e2d\u4e5f\u652f\u6301 continue \u4e5f break \u8bed\u53e5\uff0c\u548cC++\u4e2d\u7684\u4f7f\u7528\u65b9\u6cd5\u4e00\u6837\u3002","title":"\u6d41\u7a0b\u63a7\u5236"},{"location":"1-python-fundamentals/#_13","text":"","title":"\u6807\u51c6\u5e93/\u7b2c\u4e09\u65b9\u5e93"},{"location":"1-python-fundamentals/#_14","text":"\u6807\u51c6\u5e93\u662f\u7f16\u7a0b\u8bed\u8a00\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u4e00\u90e8\u5206\uff0c\u6807\u51c6\u5e93\u5c31\u662f\u90a3\u4e9b\u4f60\u4e0d\u9700\u8981\u5355\u72ec\u5b89\u88c5\u5c31\u53ef\u4ee5\u4f7f\u7528\u7684\u5e93\u3002\u5728C++\u4e2d\u6211\u4eec\u4f7f\u7528\u4fbf\u51c6\u5e93\u4ee5\u53ca\u7b2c\u4e09\u65b9\u5e93\u4e2d\u7684\u5185\u5bb9\u65f6\u9700\u8981include\u76f8\u5bf9\u5e94\u7684\u5934\u6587\u4ef6\uff0c\u5728Python\u4e2d\u6211\u4eec\u7528 import \u8fd9\u4e2a\u5173\u952e\u5b57\u3002 import math math . sin ( math . pi ) \u4e0eC++\u4e0d\u540c\uff0c\u5f15\u7528\u6a21\u5757\u4e4b\u540e\uff0c\u4f7f\u7528\u6a21\u5757\u4e2d\u7684\u4efb\u4f55\u5185\u5bb9\u90fd\u9700\u8981\u52a0\u4e0a\u5f15\u7528\u7684\u540d\u5b57\uff0c\u8fd9\u6709\u70b9\u7c7b\u4f3cC++\u4e2d\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u4f46\u53c8\u4e0d\u5b8c\u5168\u76f8\u540c\u3002Python\u8fd8\u5141\u8bb8\u4f60\u7ed9\u6a21\u5757\u5b9a\u4e49\u522b\u540d\uff1a import math as m m . sin ( m . pi ) \u4e0d\u8fc7\uff0c\u4f7f\u7528\u522b\u540d\u7684\u65f6\u5019\u8981\u5c0f\u5fc3\uff0c\u4e0d\u8981\u968f\u4fbf\u5b9a\u4e49\u4e00\u4e2a\u540d\u5b57\uff0c\u5426\u5219\u522b\u4eba\u65e0\u6cd5\u8bfb\u61c2\u4f60\u7684\u4ee3\u7801\u3002\u5b9e\u9645\u5f00\u53d1\u4e2d\u5df2\u7ecf\u5f62\u6210\u4e86\u5f88\u591a\u9ed8\u8ba4\u7684\u89c4\u8303\uff0c\u4e0d\u540c\u7684\u6a21\u5757\u4f1a\u6709\u56fa\u5b9a\u7684\u522b\u540d\uff0c\u6bd4\u5982\uff1a import tensorflow as tf import pandas as pd \u6709\u7684\u65f6\u5019\u4e00\u4e2a\u6a21\u5757\u4e2d\u8fd8\u5305\u542b\u5b50\u6a21\u5757\uff0c\u4f60\u53ef\u4ee5\u7528 \u201c.\u201d \u5f15\u7528\u5b50\u6a21\u5757\u7684\u5185\u5bb9\uff0c\u6216\u8005\u4f7f\u7528 from \u5bfc\u5165\uff1a import matplotlib.pyplot as plt from matplotlib import pyplot as plt","title":"\u5f15\u7528\u6a21\u5757"},{"location":"1-python-fundamentals/#_15","text":"\u5728C++\u4e2d\u5982\u679c\u4f60\u60f3\u4f7f\u7528\u7b2c\u4e09\u65b9\u5e93\uff0c\u4f60\u4f1a\u600e\u4e48\u505a\uff1f \u5728Python\u4e2d\u4f7f\u7528\u7b2c\u4e09\u65b9\u5e93\u975e\u5e38\u7b80\u5355\uff0c\u9700\u8981\u7528\u5230\u4e00\u4e2a\u5305\u7ba1\u7406\u5de5\u5177 pip\uff0c\u8fd9\u4e2a\u5de5\u5177\u5728\u4f60\u5b89\u88c5Python\u7684\u65f6\u5019\u9ed8\u8ba4\u5c31\u88ab\u5b89\u88c5\u597d\u4e86\u3002\u5982\u679c\u4f60\u7528\u8fc7linux\u7cfb\u7edf\uff0c\u90a3\u4e48\u4f60\u4e00\u5b9a\u63a5\u89e6\u8fc7apt\uff0cyum\u7b49\u5305\u7ba1\u7406\u5de5\u5177\uff0c\u5f53\u4f60\u5b89\u88c5\u8f6f\u4ef6\u7684\u65f6\u5019\uff0c\u4e0d\u7528\u518d\u53bb\u7f51\u7edc\u4e0a\u81ea\u5df1\u4e0b\u8f7d\u548c\u624b\u52a8\u5b89\u88c5\uff0c\u76f4\u63a5\u7528\u5305\u7ba1\u7406\u5de5\u5177\u4e00\u952e\u5b89\u88c5\u5373\u53ef\u3002pip\u7684\u5de5\u4f5c\u539f\u7406\u4e5f\u662f\u5982\u6b64\u3002 pip\u662f\u4e00\u4e2a\u7528Python\u5199\u7684\u7528\u4e8e\u5b89\u88c5\u548c\u7ba1\u7406\u5305\u7684\u5305\u7ba1\u7406\u7cfb\u7edf\u3002\u5b83\u8fde\u63a5\u4e00\u4e2a\u53eb\u505aPython Package Index\u7684\u5728\u7ebf\u516c\u5171\u5305\u5b58\u50a8\u5e93\u3002\u5b83\u901a\u8fc7\u914d\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u8fde\u63a5\u5176\u5b83\u5305\u5e93\u3002 \u5e38\u7528\u547d\u4ee4 \u5b89\u88c5\u5305\uff1a pip install some-package-name \u5b89\u88c5\u8fc7\u7a0b\u4e2d\u4f1a\u81ea\u52a8\u5e2e\u52a9\u4f60\u5b89\u88c5\u4f9d\u8d56\u3002\u82e5\u9700\u8981\u6307\u5b9a\u7279\u5b9a\u7684\u7248\u672c\u5b89\u88c5: pip install some-package-name == 1 .2.2 --force-reinstall force-reinstall \u7528\u4e8e\u6307\u793a\u91cd\u65b0\u5b89\u88c5\u6307\u5b9a\u7248\u672c\u7684\u5305\u3002\u4e5f\u53ef\u4ee5\u6307\u5b9a\u7248\u672c\u7684\u8303\u56f4\u5b89\u88c5: pip install some-package-name> = 1 .3.0,< 1 .4.0 --force-reinstall \u5378\u8f7d\u5305\uff1a pip uninstall some-package-name","title":"\u4f7f\u7528\u6a21\u5757"},{"location":"1-python-fundamentals/#_16","text":"os os\u6a21\u5757\u662f\u975e\u5e38\u5e38\u7528\u7684\u6a21\u5757\uff0c\u8fd9\u91cc\u6709\u5f88\u591a\u529f\u80fd import os os . remove ( \"/path/to/test.txt\" ) # \u5220\u9664\u6587\u4ef6 os . rmdir ( \"/path/to\" ) # \u5220\u9664\u6587\u4ef6\u5939 os . chdir ( \"/path/to\" ) # \u6539\u53d8\u5f53\u524d\u7a0b\u5e8f\u7684\u5de5\u4f5c\u76ee\u5f55 os . makedirs ( \"/path/to\" ) #\u521b\u5efa\u591a\u7ea7\u6587\u4ef6\u5939 os . mkdir ( \"/path\" ) # \u521b\u5efa\u5355\u4e2a\u6587\u4ef6\u5939 os . listdir ( \"/path\" ) # \u5217\u4e3e\u51fa\u6587\u4ef6\u5939\u4e2d\u7684\u5185\u5bb9 os . system ( \"python code.py\" ) # \u8fd0\u884c\u7cfb\u7edf\u547d\u4ee4 \"\"\" os.path\u7528\u4e8e\u5904\u7406\u548c\u6587\u4ef6\u8def\u5f84\u76f8\u5173\u7684\u4efb\u52a1\u3002 linux\u548cwindows\u7684\u6587\u4ef6\u8def\u5f84\u5206\u9694\u7b26\u4e0d\u4e00\u6837\uff0c\u8fd9\u5728\u4f7f\u7528\u4e2d\u5e26\u6765\u5f88\u591a\u4e0d\u4fbf\uff0c \u4f7f\u7528\u8fd9\u4e00\u6a21\u5757\u5c06\u4f1a\u5927\u5927\u65b9\u4fbf\u4f60\u7684\u64cd\u4f5c\u3002 \"\"\" os . path . sep # \u8fd9\u662f\u4e00\u4e2a\u5b57\u7b26\uff0c\u662f\u5f53\u524d\u7cfb\u7edf\u4e0b\u9ed8\u8ba4\u7684\u8def\u5f84\u5206\u9694\u7b26\uff0cwindows\u4e0b\u5c31\u662f \\\u3002 os . path . split ( \" \\\\ path/to/file.txt\" ) # \u628a\u6587\u4ef6\u8def\u5f84\u5206\u5272\u6210\u76ee\u5f55\u548c\u6587\u4ef6\u540d\u4e24\u90e8\u5206 os . path . isdir ( \"/path\" ) # \u5224\u65ad\u662f\u4e0d\u662f\u6587\u4ef6\u5939 os . path . isfile ( \"/path/file\" ) # \u5224\u65ad\u662f\u4e0d\u662f\u6587\u4ef6 os . path . join ([ \"/path\" , \"subpath\" , \"file\" ]) # \u628alist\u91cc\u7684\u5185\u5bb9\u7528 os.path.sep \u8fde\u63a5\u8d77\u6765 \u8fd9\u91cc\u7279\u522b\u5f3a\u8c03\u4e00\u4e0b\uff0cos.system() \u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u4efb\u4f55\u7cfb\u7edf\u547d\u4ee4\uff0c\u8fd9\u662fpython\u548c\u7cfb\u7edf\u4ea4\u4e92\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u975e\u5e38\u65b9\u4fbf\uff0c\u4e0d\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u4f60\u6ca1\u529e\u6cd5\u83b7\u5f97\u7cfb\u7edf\u7a0b\u5e8f\u7684\u6807\u51c6\u8f93\u51fa\u5185\u5bb9\u3002\u5982\u679c\u4f60\u60f3\u65e0\u7f1d\u8854\u63a5\u7cfb\u7edf\u5176\u4ed6\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528 subprocess \u8fd9\u4e2a\u6a21\u5757\u3002 sys \u8fd0\u884cpython\u7684\u65f6\u5019\u53ef\u4ee5\u4f20\u5165\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u6211\u4eec\u5982\u4f55\u83b7\u5f97\u5462\uff1f\u7528sys\u6a21\u5757\u5373\u53ef\u3002 # python code.py arg1 arg2 import sys len ( sys . argv ) # \u53c2\u6570\u6570\u91cf 3 sys . argv [ 0 ] # \u6587\u4ef6\u540d code.py sys . argv [ 1 :] # \u5176\u4ed6\u53c2\u6570 arg1 arg2 math \u8fd9\u91cc\u6709\u4f60\u9700\u8981\u7684\u6570\u5b66\u51fd\u6570\uff0c\u4e0d\u7528\u591a\u505a\u4ecb\u7ecd\u3002 time import time start = time . time () time . sleep ( 3 ) # 3 seconds end = time . time () print ( end - start ) # \u8f93\u51fa: 3.013838768005371 datetime from datetime import datetime now = datetime . now () now . strftime ( \"%Y-%m- %d %H:%M:%S %f \" ) # \u8f93\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 dt = datetime . strptime ( \"2022-01-01\" , \"%Y-%m- %d \" ) # \u4ece\u5b57\u7b26\u4e32\u6784\u9020 random import random random . seed ( 123 ) # \u521d\u59cb\u5316\u79cd\u5b50 random . random () # [0,1) \u4e4b\u95f4\u7684\u968f\u673a\u6570 random . choice ([ 1 , 2 , 4 , 5 , 6 , 7 ]) # \u4ece\u4e00\u4e2a\u5217\u8868\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u5bf9\u8c61 random . choices ([ 1 , 2 , 3 , 4 , 5 , 6 ], k = 2 ) # \u968f\u673a\u9009\u62e9k\u4e2a\u7ed3\u679c random . randint ( 1 , 5 ) # \u8fd4\u56de [1,5]\u533a\u95f4\u7684\u968f\u673a\u6574\u6570 random . gauss ( 0 , 1 ) # \u4ece\u9ad8\u65af\u5206\u5e03\u91c7\u6837\u3002\u4e5f\u652f\u6301\u5176\u4ed6\u5404\u79cd\u5206\u5e03 random . shuffle ([ 1 , 2 , 4 , 5 ]) # \u5bf9\u5217\u8868\u5185\u7684\u5143\u7d20\u8fdb\u884c\u968f\u673a\u6392\u5e8f argparse \u8fd9\u4e2a\u6a21\u5757\u7528\u4e8e\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\uff0c import argparse # \u521b\u5efa\u5bf9\u8c61 parser = argparse . ArgumentParser () # \u5b9a\u4e49\u4f60\u5e0c\u671b\u4f20\u5165\u7684\u547d\u4ee4\u884c\u53c2\u6570 # \u8f93\u5165\u7684\u65f6\u5019\u6309\u7167 --arg1=value1 \u7684\u683c\u5f0f\u4f20\u5165\uff0c\u4e0e\u987a\u5e8f\u65e0\u5173 parser . add_argument ( \"--arg1\" , type = str , default = \"arg1\" ) parser . add_argument ( \"--arg2\" , type = int , default = 1 ) # \u5f00\u59cb\u89e3\u6790\u547d\u4ee4\u53c2\u6570\uff0c\u5982\u679c\u4f20\u5165\u7684\u53c2\u6570\u548c\u9884\u5b9a\u4e49\u7684\u4e0d\u5339\u914d\u4f1a\u62a5\u9519 args = parser . parse_args () # \u5982\u679c\u4f60\u5e0c\u671b\u4f20\u5165\u672a\u77e5\u53c2\u6570\u7684\u65f6\u5019\u4e0d\u62a5\u9519 args , unknown_args = parser . parse_known_args () # \u4f7f\u7528\u53c2\u6570 print ( known_args . arg1 ) copy from copy import deepcopy obj1 = deepcopy ( obj2 ) # \u6df1\u62f7\u8d1d\u4efb\u4f55\u5bf9\u8c61 glob \u524d\u6587\u63d0\u5230\u4e86\u7528 os.listdir() \u6765\u67e5\u770b\u4e00\u4e2a\u6587\u4ef6\u5939\u4e2d\u7684\u5185\u5bb9\uff0c\u5982\u679c\u4f60\u60f3\uff1a - \u83b7\u53d6\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84 - \u652f\u6301\u7528\u901a\u914d\u7b26\u7b5b\u9009\u6587\u4ef6 - \u652f\u6301\u9012\u5f52\u8bbf\u95ee\u5b50\u76ee\u5f55 \u90a3\u4e48\u4f60\u53ef\u4ee5\u4f7f\u7528glob\u8fd9\u4e2a\u6a21\u5757\u3002 import glob glob . glob ( \"/path/to/*.txt\" ) # *\u5339\u914d\u4e00\u4e2a\u6216\u591a\u4e2a\u5b57\u7b26 glob . glob ( \"/path/to/**/*.txt\" ) # ** \u5339\u914d\u6240\u6709\u6587\u4ef6\u3001\u76ee\u5f55 glob . glob ( \"/path/to/**/*.txt\" , recursive = True ) # \u9012\u5f52\u5339\u914d\u6240\u6709\u5b50\u76ee\u5f55\u5185\u5bb9","title":"\u5e38\u7528\u6807\u51c6\u5e93"},{"location":"1-python-fundamentals/#io","text":"\u8bfb\u6587\u672c\u6587\u4ef6 f = open ( \"test.txt\" , encoding = \"utf-8\" ) # \u4e3a\u4e86\u4e0d\u4e71\u7801\uff0c\u6700\u597d\u6bcf\u6b21\u90fd\u6307\u660e encoding f . readline () # \u4e00\u6b21\u8bfb\u53d6\u4e00\u884c\uff0c\u5305\u542b\u6362\u884c\u7b26 # \u91cd\u65b0\u8bbe\u7f6e\u6587\u4ef6\u8bfb\u53d6\u6307\u9488\u5230\u5f00\u5934 f . seek ( 0 , 0 ) #\u65b9\u6cd5\u7528\u4e8e\u4ece\u6587\u4ef6\u8bfb\u53d6\u6307\u5b9a\u7684\u5b57\u8282\u6570\uff0c\u5982\u679c\u672a\u7ed9\u5b9a\u6216\u4e3a\u8d1f\u5219\u8bfb\u53d6\u6240\u6709\uff0c\u8be5\u65b9\u6cd5\u901a\u5e38\u7528\u4e8e\u8bfb\u53d6\u4e8c\u8fdb\u5236\u6587\u4ef6 f . read () f . close () \u5199\u6587\u672c\u6587\u4ef6 f = open ( \"test.txt\" , 'w' , encoding = \"utf-8\" ) f . writeline ( \"a \\n \" ) f . write ( \"\" ) \u65b9\u6cd5\u7528\u4e8e\u5411\u6587\u4ef6\u4e2d\u5199\u5165\u6307\u5b9a\u5b57\u7b26\u4e32 . f . close () \u904d\u5386\u6587\u4ef6\u6bcf\u4e00\u884c f = open ( \"test.txt\" , encoding = \"utf-8\" ) for line in f . readlines (): print ( line ) for line in f \uff1a print ( line ) # \u4ee5\u4e0a\u4e24\u79cd\u8fed\u4ee3\u65b9\u5f0f\u770b\u8d77\u6765\u662f\u7b49\u4ef7\u7684\uff0c\u4f46\u5374\u6709\u6240\u533a\u522b\u3002 # \u7b2c\u4e00\u79cd\u662f\u628a\u6240\u6709\u7684\u884c\u6309\u7167list\u7684\u65b9\u5f0f\u8bfb\u5165\u5185\u5b58\uff0c\u7136\u540e\u904d\u5386\u3002 # \u7b2c\u4e8c\u79cd\u76f4\u63a5\u5bf9f\u8fdb\u884c\u8fed\u4ee3\uff0c\u8fd9\u4e2a\u65f6\u5019\u6587\u4ef6\u4e2d\u7684\u6bcf\u4e00\u884c\u5e76\u6ca1\u6709\u9884\u5148\u88ab\u8bfb\u5165\u5185\u5b58\u3002 # f\u9ed8\u8ba4\u5177\u6709\u8fed\u4ee3\u5668\u5c5e\u6027\uff0c\u5173\u4e8e\u4ec0\u4e48\u662f\u8fed\u4ee3\u5668\uff0c\u540e\u9762\u4f1a\u518d\u505a\u5177\u4f53\u4ecb\u7ecd\u3002 f . close () \u8bfb\u4e8c\u8fdb\u5236\u6587\u4ef6 filepath = 'x.bin' binfile = open ( filepath , 'rb' ) # \u6253\u5f00\u4e8c\u8fdb\u5236\u6587\u4ef6 size = os . path . getsize ( filepath ) # \u83b7\u5f97\u6587\u4ef6\u5927\u5c0f for i in range ( size ): data = binfile . read ( 1 ) # \u6bcf\u6b21\u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\uff0c\u8fd4\u56de\u7684\u7c7b\u578b\u662f bytes\u7c7b\u578b\u3002 print ( data ) # \u5982\u679c\u5728\u8fd9\u91cc\u4f60\u60f3\u770b\u5230\u662f\u6570\u503c\u7c7b\u578b\u6216\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u7528\u7c7b\u578b\u8f6c\u6362\u65b9\u5f0f binfile . close () \u5199\u4e8c\u8fdb\u5236\u6587\u4ef6 f = open ( 'x.bin' , 'wb' ): f . write ( b \"test\" ) # \u5199\u5165\u7684\u5fc5\u987b\u662f bytes \u7c7b\u578b\uff0c\u5982\u679c\u4f60\u60f3\u5199\u5165\u6574\u6570\u6216\u6d6e\u70b9\u6570\uff0c\u9700\u8981\u505a\u4e00\u6b21\u7c7b\u578b\u8f6c\u6362 \"\"\" python\u63d0\u4f9b\u4e86struct\u6a21\u5757\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u5728\u6570\u503c\u548cbytes\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362 \"\"\" import struct struct . pack ( \"i\" , 1 ) # \u628a\u6574\u6570 1 \u8f6c\u6362\u6210bytes struct . unpack ( \"i\" , b ' \\x01\\x00\\x00\\x00 ' ) # \u628abytes\u8f6c\u6362\u6210\u6574\u6570 \u4e0b\u8868\u4e2d\u5217\u51fa\u4e86\u6240\u6709\u7684\u8f6c\u6362\u65b9\u5f0f\uff1a struct \u7528\u6cd5","title":"IO\u548c\u6587\u4ef6\u64cd\u4f5c"},{"location":"1-python-fundamentals/#_17","text":"Python\u8bed\u6cd5\u7cd6\u7cfb\u5217 Syntactic Sugar in Python \u8bed\u6cd5\u7cd6\uff08Syntactic sugar\uff09\uff0c\u4e5f\u8bd1\u4e3a\u7cd6\u8863\u8bed\u6cd5\uff0c\u662f\u7531\u82f1\u56fd\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u5f7c\u5f97\u00b7\u7ea6\u7ff0\u00b7\u5170\u8fbe\uff08Peter J. Landin\uff09\u53d1\u660e\u7684\u4e00\u4e2a\u672f\u8bed\uff0c\u6307\u8ba1\u7b97\u673a\u8bed\u8a00\u4e2d\u6dfb\u52a0\u7684\u67d0\u79cd\u8bed\u6cd5\uff0c\u8fd9\u79cd\u8bed\u6cd5\u5bf9\u8bed\u8a00\u7684\u529f\u80fd\u5e76\u6ca1\u6709\u5f71\u54cd\uff0c\u4f46\u662f\u66f4\u65b9\u4fbf\u7a0b\u5e8f\u5458\u4f7f\u7528\u3002\u901a\u5e38\u6765\u8bf4\u4f7f\u7528\u8bed\u6cd5\u7cd6\u80fd\u591f\u589e\u52a0\u7a0b\u5e8f\u7684\u53ef\u8bfb\u6027\uff0c\u4ece\u800c\u51cf\u5c11\u7a0b\u5e8f\u4ee3\u7801\u51fa\u9519\u7684\u673a\u4f1a\u3002 \u6761\u4ef6\u8d4b\u503c b = 2 c = 3 if b > c : a = b else : a = c # \u66f4\u4f18\u96c5\u7684\u5199\u6cd5 # \u7b49\u4ef7\u4e8eC++\u79cd\u7684 a = c > b ? c : a a = c if c > b else b \u867d\u7136Python\u4e2d\u6ca1\u6709\u95ee\u53f7\u548c\u5192\u53f7\u7ec4\u6210\u7684\u4e09\u76ee\u8fd0\u7b97\u7b26\uff0c\u4f46\u662f\u53ef\u4ee5\u7528if else\u7684\u6761\u4ef6\u8d4b\u503c\u4ee3\u66ff. \u591a\u5143\u8d4b\u503c a = 1 ; b = 2 ; c = 3 # \u66f4\u4f18\u96c5\u7684\u5199\u6cd5 a , b , c = 1 , 2 , 3 zip \u8fed\u4ee3 \u5982\u679c\u4f60\u60f3\u8fed\u4ee3\u4e24\u4e2a\u7b49\u957f\u7684\u6570\u7ec4\uff0c\u5728C++\u4e2d\u4f60\u9700\u8981\u4e00\u4e2a\u7d22\u5f15\uff0c\u7136\u540e\u4ece\u4e24\u4e2a\u6570\u7ec4\u5206\u522b\u53d6\u503c\uff0c\u5728python\u91cc\u9762\u4f60\u4e5f\u53ef\u4ee5\u8fd9\u505a\uff0c\u4e5f\u53ef\u4ee5\u7528zip\u51fd\u6570\u3002 a = [ \"name\" , \"age\" ] b = [ \"wang\" , 18 ] data = {} for i in range ( len ( a )): data . update ({ a [ i ]: b [ i ]}) # \u66f4\u4f18\u96c5\u7684\u5199\u6cd5 for x , y in zip ( a , b ): data . update ({ x : y }) zip\u628a\u4e24\u4e2a\u5217\u8868\u538b\u7f29\u6210\u4e00\u4e2a\u5217\u8868\uff0c\u91cc\u9762\u7684\u6bcf\u4e2a\u5143\u7d20\u662f\u5143\u7ec4\u3002 \u5217\u8868\u63a8\u5bfc\u5f0f \u5982\u679c\u6211\u4eec\u60f3\u628a\u4e00\u4e2a\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u53d8\u6210\u5e73\u65b9: a = [ 0 , 1 , 2 , 3 , 5 , 6 ] b = [] for x in a : b . append ( x ** 2 ) # \u66f4\u4f18\u96c5\u7684\u5199\u6cd5 b = [ x ** 2 for x in a ] # \u8fd8\u53ef\u4ee5\u52a0\u6761\u4ef6 b = [ x ** 2 for x in a if x > 0 ] \u96c6\u5408\u63a8\u5bfc\u5f0f a = [ 0 , 1 , 2 , 3 , 5 , 3 , 5 , 6 ] b = set () for x in a : b . add ( x ) # \u66f4\u4f18\u96c5\u7684\u5199\u6cd5 b = { x for x in a } \u5b57\u5178\u63a8\u5bfc\u5f0f a = [ \"name\" , \"age\" ] b = [ \"wang\" , 18 ] data = {} for x , y in zip ( a , b ): data . update ({ x : y }) # \u5e94\u7528\u5b57\u5178\u63a8\u5bfc\u5f0f\uff0c\u8fd8\u53ef\u4ee5\u66f4\u7b80\u4fbf data = { x : y for x , y in zip ( a , b )} \u5927\u4e8e\u548c\u5c0f\u4e8e a = 3 1 < a < 10 # True with\u5173\u952e\u5b57 \u5728C++\u91cc\uff0c\u5982\u679c\u4f60\u8981\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\uff0c\u4f60\u603b\u8981\u8bb0\u5f97\u5173\u95ed\u3002Python\u91cc\u9762\u4e5f\u6709\u6253\u5f00\u548c\u5173\u95ed\u6587\u4ef6\u7684\u64cd\u4f5c\uff0c\u4e0d\u8fc7\uff0c\u5229\u7528with as\u5173\u952e\u5b57\u540e\uff0c\u4f60\u53ef\u4ee5\u4e0d\u5fc5\u624b\u52a8\u5173\u95ed\u6587\u4ef6\u4e86\u3002 f = open ( \"text.txt\" ) for line in f . readlines (): print ( line ) f . close () # \u66f4\u4f18\u96c5\u7684\u5199\u6cd5 with open ( \"text.txt\" ) as f : for line in f . readlines (): print ( line ) Python\u4e2d\u8fd8\u6709\u5f88\u591a\u7684\u8bed\u6cd5\u7cd6\uff0c\u8fd9\u4e9b\u8bed\u6cd5\u7cd6\u80fd\u5e2e\u52a9\u6211\u4eec\u628a\u4ee3\u7801\u53d8\u5f97\u975e\u5e38\u7b80\u5355\u3002","title":"\u8bed\u6cd5\u7cd6"},{"location":"2-python-function/","text":"\u51fd\u6570 \u4ec0\u4e48\u662f\u51fd\u6570\uff1f \u51fd\u6570\u5728\u6570\u5b66\u4e0a\u6709\u7740\u6e05\u6670\u7684\u5b9a\u4e49\uff0c\u5e38\u7528\u7684\u8868\u8fbe\u5f62\u5f0f\u5982\u4e0b: \\[ y = f(x) \\] \u5176\u4e2dx\u662f\u81ea\u53d8\u91cf\uff0cy\u662f\u56e0\u53d8\u91cf\uff08\u8fd4\u56de\u503c\uff09\uff0cf\u662f\u5bf9\u5e94\u6cd5\u5219\u3002\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u51fd\u6570\u548c\u6570\u5b66\u4e0a\u7684\u51fd\u6570\u5728\u672c\u8d28\u4e0a\u662f\u4e00\u6837\u7684\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u660e\u663e\u7684\u533a\u522b\u3002\u6211\u4eec\u5148\u770b\u4e00\u4e0bC++\u4e2d\u51fd\u6570\u7684\u6807\u51c6\u5b9a\u4e49\uff0c double sqrt ( double x ); C++\u4e2d\u7684\u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u90fd\u5b9a\u4e49\u4e86\u7c7b\u578b\uff0c\u8fd9\u662f\u548c \\(y=f(x)\\) \u6700\u5927\u7684\u533a\u522b\u3002\u6570\u5b66\u4e0a\u7684\u51fd\u6570\u5904\u7406\u7684\u90fd\u662f\u201c \u6570 \u201d\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u7279\u522b\u6307\u51fa\u7c7b\u578b\u3002\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u770b\uff0c\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u51fd\u6570\u5728\u5f62\u5f0f\u4e0a\u5176\u5b9e\u8981\u6bd4\u6570\u5b66\u4e0a\u7684\u51fd\u6570\u590d\u6742\uff1a\u901a\u8fc7\u5bf9\u53c2\u6570\u6570\u91cf\u3001\u7c7b\u578b\uff0c\u8fd4\u56de\u503c\u7c7b\u578b\u7684\u5404\u79cd\u6392\u5217\u7ec4\u5408\uff0c\u53ef\u4ee5\u7ed9\u51fa\u4e30\u5bcc\u548c\u590d\u6742\u7684\u51fd\u6570\u5b9a\u4e49\u3002\u5982\u679c\u6211\u4eec\u5ffd\u7565\u4e00\u4e2a\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\uff0c \u51fd\u6570\u540d \u8f93\u5165\u53c2\u6570\u5217\u8868 \u8f93\u51fa/\u8fd4\u56de\u503c \u5b9a\u4e49\u51fd\u6570 \u5728Python\u4e2d\u5b9a\u4e49\u51fd\u6570\u5229\u7528\u5982\u4e0b\u8bed\u53e5\u3002 def f (): pass # \u4ec0\u4e48\u4e5f\u4e0d\u60f3\u505a\u7684\u65f6\u5019\u7528pass \u8fd9\u4e2a\u51fd\u6570\u4ec0\u4e48\u4e5f\u6ca1\u505a\uff0c\u6ca1\u6709\u8f93\u5165\u4e5f\u6ca1\u6709\u8f93\u51fa\uff0c\u8c03\u7528\u5b83\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u6548\u679c\u3002\u4f46\u4f60\u4e0d\u8981\u5c0f\u770b\u5b83\uff0c\u6b63\u6240\u8c13 \u9ebb\u96c0\u867d\u5c0f\uff0c\u4e94\u810f\u4ff1\u5168 \uff0c\u8fd9\u4e2a\u51fd\u6570\u5305\u542b\u7684\u5185\u5bb9\u4e00\u70b9\u4e0d\u7b80\u5355\u3002\u6211\u4eec\u53ef\u4ee5\u7528 dir() \u51fd\u6570\u67e5\u770b\u4efb\u4f55\u4e00\u4e2a\u51fd\u6570\u7684\u7ec6\u8282\uff1a dir ( f ) [ '__annotations__' , '__call__' , '__class__' , '__closure__' , '__code__' , '__defaults__' , '__delattr__' , '__dict__' , '__dir__' , '__doc__' , '__eq__' , '__format__' , '__ge__' , '__get__' , '__getattribute__' , '__globals__' , '__gt__' , '__hash__' , '__init__' , '__init_subclass__' , '__kwdefaults__' , '__le__' , '__lt__' , '__module__' , '__name__' , '__ne__' , '__new__' , '__qualname__' , '__reduce__' , '__reduce_ex__' , '__repr__' , '__setattr__' , '__sizeof__' , '__str__' , '__subclasshook__' ] dir() \u65b9\u6cd5\u50cf\u662f\u4e00\u4e2a\u900f\u89c6\u955c\uff0c\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u5de5\u5177\u3002 \u4e00\u4e2a\u666e\u901a\u7684\u51fd\u6570\u5df2\u7ecf\u81ea\u5e26\u4e86\u8fd9\u4e48\u5185\u5bb9\uff1f\u6ca1\u6709\u60f3\u5230\u5427\u3002\u5728C++\u4e2d\u5982\u679c\u4f60\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5982\u4e0b\u51fd\u6570\uff0c void foo (){} \u90a3\u4e48\u5b83\u770b\u8d77\u6765\u5c31\u662f\u4e00\u4e2a\u4ec0\u4e48\u90fd\u6ca1\u6709\u7684\u51fd\u6570\uff0c\u5b9e\u9645\u4e0a\u5360\u7528\u7684\u5185\u5b58\u4e5f\u5c3d\u53ef\u80fd\u5c0f\u3002\u90a3\u4e48\u5728Python\u91cc\u9762\u4e3a\u4ec0\u4e48\u4f1a\u4e0d\u4e00\u6837\u5462\uff1f \u4e00\u5207\u7686\u5bf9\u8c61 C++\u867d\u7136\u4e5f\u662f\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u4f46\u662f\u8fdc\u6ca1\u6709\u5176\u4ed6\u4e00\u4e9b\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\u90a3\u6837\u6781\u7aef\u3002\u5728Python\u91cc\u9762 \u4e00\u5207\u90fd\u662f\u5bf9\u8c61 \u3002\u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u662f\uff1a\u4efb\u4f55\u53d8\u91cf\u2014\u2014\u5305\u62ec\u6574\u6570\uff0c\u6d6e\u70b9\u6570\uff0c\u5b57\u7b26\u4e32\uff0c\u4efb\u4f55\u51fd\u6570\uff0c\u4ee5\u53ca\u4efb\u4f55\u7c7b\u90fd\u662f\u5bf9\u8c61\u3002\u6bd4\u5982\u6211\u4eec\u540c\u6837\u7528dir\u65b9\u6cd5\u67e5\u770b\u4e00\u4e2a\u6574\u6570\uff0c\u4f60\u4f1a\u53d1\u73b0\u5b83\u540c\u6837\u5305\u542b\u4e86\u5f88\u591a\u5185\u5bb9\u3002 a = 1 dir ( a ) ['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes'] \u8fd9\u4e9b\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u65b9\u6cd5\u88ab\u6210\u4e3a \u9b54\u6cd5\u65b9\u6cd5 \uff0c\u662fPython\u9ed8\u8ba4\u4e3a\u6211\u4eec\u521b\u5efa\u7684\u3002\u60f3\u4e00\u60f3C++\u4e2d\u7684\u7c7b\uff0c\u5f53\u6211\u4eec\u4e0d\u663e\u793a\u5b9a\u4e49\u6784\u9020\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u4f1a\u5e2e\u52a9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u9ed8\u8ba4\u6784\u9020\u65b9\u6cd5\u3002\u56e0\u4e3a\u5728Python\u4e2d\u4e00\u5207\u7686\u5bf9\u8c61\uff0c\u6240\u4ee5\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u6709\u4e00\u4e9b\u7f16\u8bd1\u5668\u5e2e\u5fd9\u521b\u9020\u7684\u9ed8\u8ba4\u65b9\u6cd5\u3002 \u5373\u4f7f\u662f\u4e00\u4e2a\u4ec0\u4e48\u4e5f\u4e0d\u505a\u7684\u51fd\u6570\uff0c\u6216\u8005\u4e00\u4e2a\u6574\u6570\u53d8\u91cf\uff0c\u90fd\u4f1a\u53c8\u4e30\u5bcc\u7684 \u9b54\u6cd5\u65b9\u6cd5 \u3002 \u5728C++\u4e2d\uff0c\u5373\u4f7f\u53c8\u5f88\u591a\u9ed8\u8ba4\u65b9\u6cd5\uff0c\u4f46\u4f60\u662f\u770b\u4e0d\u5230\u4ed6\u4eec\u7684\uff0c\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u4ed6\u4eec\u5728Python\u4e2d\u66f4\u52a0 \u53ef\u89c1 \u3002\u53ef\u89c1\u6027\u7684\u6982\u5ff5\u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u5f88\u91cd\u8981\uff0c\u8fd9\u4e00\u70b9\u8bf7\u5728Python\u4e2d\u6162\u6162\u4f53\u4f1a\u3002 \u5173\u4e8e\u4e00\u5207\u7686\u5bf9\u8c61\u7684\u6982\u5ff5\uff0c\u8bf7\u6162\u6162\u53bb\u4f53\u4f1a\uff0c\u5b83\u4f1a\u5bfc\u81f4\u4e0eC++\u4e2d\u5b8c\u5168\u4e0d\u4e00\u6837\u7684\u5f00\u53d1\u4f53\u9a8c\u3002\u56e0\u4e3a\u4e00\u5207\u7686\u5bf9\u8c61\u7684\u7f18\u6545\uff0c\u5728Python\u4e2d\u4f60\u770b\u5230\u7684\u5185\u7f6e\u7c7b\u578b\u548cC++\u662f\u6709\u6240\u533a\u522b\u7684\u3002\u6bd4\u5982int\u7c7b\u578b\uff0c\u5728C/C++\u91cc\u9762\u5b83\u53ea\u5360\u7528\u5185\u5b58\u4e2d\u7684\u56db\u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u5728Python\u91cc\u5b83\u8fd8\u5305\u542b\u4e86\u5bf9\u8c61\u5934\uff1a \u9b54\u6cd5\u65b9\u6cd5 \u9b54\u6cd5\u65b9\u6cd5\u901a\u5e38\u90fd\u4f1a\u88ab\u7f16\u8bd1\u5668\u81ea\u52a8\u8c03\u7528\uff0c\u5e76\u4e14\u4e0d\u540c\u5bf9\u8c61\u7684\u9ed8\u8ba4\u9b54\u6cd5\u65b9\u6cd5\u662f\u4e0d\u540c\u7684\uff0c\u4e0a\u8ff0\u51fd\u6570\u548c\u6574\u6570\u53d8\u91cf\u7684\u9b54\u6cd5\u65b9\u6cd5\u5c31\u6709\u5f88\u591a\u4e0d\u540c\u3002\u6211\u4eec\u4ee5 add \u8fd9\u4e00\u9b54\u6cd5\u65b9\u6cd5\u4e3a\u4f8b\uff0c\u770b\u4e00\u4e0b\u5b83\u7684\u7528\u9014\uff1a a = 1 a + 2 # \u5b9e\u9645\u4e0a\u8c03\u7528\u4e86 __add__ \u9b54\u6cd5\u65b9\u6cd5 \u4e0d\u8fc7\uff0cPython\u5e76\u6ca1\u6709\u963b\u6b62\u6211\u4eec\u624b\u52a8\u53bb\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\uff1a a = 1 a . __add__ ( 2 ) # \u4f60\u4f1a\u5f97\u5230 3 \u4e86\u89e3\u8fd9\u70b9\u4e4b\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u81ea\u5df1\u7ed9\u4efb\u4f55\u4e00\u4e2a\u5bf9\u8c61\u5b9a\u4e49__add__\u65b9\u6cd5\uff0c\u5728C++\u91cc\uff0c\u76f8\u5f53\u4e8e\u4f60\u91cd\u8f7d\u4e86 + \u8fd9\u4e2a\u8fd0\u7b97\u7b26\u3002\u8fd9\u4e00\u9053\u7406\u5bf9\u5176\u4ed6\u4efb\u4f55\u9b54\u6cd5\u65b9\u6cd5\u90fd\u9002\u7528\uff0cPython\u4e2d\u7684\u9b54\u6cd5\u65b9\u6cd5\u5b9e\u5728\u662f\u6709\u70b9\u591a\uff0c\u5728\u6b64\u5c31\u4e0d\u4e00\u4e00\u5217\u4e3e\u4ed6\u4eec\u7684\u4f5c\u7528\u4e86\uff0c\u9700\u8981\u4e86\u89e3\u7684\u65f6\u5019\u8bf7\u5c3d\u60c5google\u4e4b\u3002 \u51fd\u6570\u53c2\u6570 \u4e86\u89e3\u5b8c\u9b54\u6cd5\u65b9\u6cd5\u4e4b\u540e\uff0c\u6211\u4eec\u5f00\u59cb\u5b9a\u4e49\u4e00\u4e9b\u771f\u6b63\u6709\u7528\u7684\u51fd\u6570\uff0c\u5e76\u7814\u7a76\u4e00\u4e0b\u5b83\u7684\u6027\u8d28\u3002 def print3 ( a , b , c ): print ( a , b , c ) \u8fd9\u4e2a\u51fd\u6570\u53ea\u8d1f\u8d23\u6253\u5370\u4e09\u4e2a\u8f93\u5165\u53d8\u91cf\u3002\u8fd9\u91cc\u6211\u4eec\u5e76\u6ca1\u6709\u5b9a\u4e49\u4e09\u4e2a\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u56e0\u4e3aPython\u662f\u52a8\u6001\u7c7b\u578b\u8bed\u8a00\uff0c\u4f1a\u5728\u8fd0\u884c\u65f6\u53bb\u5224\u522b\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u4e0d\u9700\u8981\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u663e\u793a\u6307\u5b9a\u3002\u8fd9\u7ed9\u5f00\u53d1\u5e26\u6765\u4e86\u5f88\u591a\u7075\u6d3b\u6027\u3002 \u4f4d\u7f6e\u53c2\u6570\u548ckey-value\u53c2\u6570 \u5728\u8c03\u7528\u4efb\u4f55\u4e00\u4e2a\u65b9\u6cd5\u6216\u51fd\u6570\u65f6\uff0c\u90fd\u53ef\u4ee5\u6709\u4ee5\u4e0b\u4e09\u79cd\u65b9\u5f0f\u6765\u4f20\u9012\u53c2\u6570: print3 ( 1 , 2 , 3 ) print3 ( a = 1 , c = 3 , b = 2 ) print3 ( 1 , c = 3 , b = 2 ) # 1 2 3 # 1 2 3 # 1 2 3 1. \u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u4f4d\u7f6e\u4f20\u5165\u6bcf\u4e2a\u53c2\u6570\uff0c\u8fd9\u548cC++\u5e76\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002 2. \u5176\u6b21\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u6309\u7167\u53c2\u6570\u540d\u548c\u503c\u7684\u952e\u503c\u5bf9\u65b9\u5f0f\u4f20\u5165\u53c2\u6570\uff0c\u5f53\u4f60\u6307\u5b9a\u53c2\u6570\u540d\u7684\u65f6\u5019\uff0c\u987a\u5e8f\u5c31\u53d8\u5f97\u4e0d\u91cd\u8981\u4e86\u3002 3. \u6df7\u5408\u4f7f\u7528\u4e24\u79cd\u65b9\u5f0f\u4f20\u5165\u53c2\u6570\uff1a\u524d\u9762\u662f\u6309\u7167\u4f4d\u7f6e\u4f20\u5165\uff0c\u540e\u9762\u6309\u7167key-value\u7684\u5f62\u5f0f\u4f20\u5165\u3002 \u90a3\u4e48\uff0c\u662f\u4e0d\u662f\u53ef\u4ee5\u968f\u4fbf\u6df7\u7528\u5462\uff1f\u8bd5\u4e00\u8bd5\uff1a print3 ( 1 , b = 2 , 3 ) File \"C:\\Users\\haipw\\AppData\\Local\\Temp/ipykernel_47416/3420492099.py\" , line 1 f ( 1 ,b = 2 , 3 ) ^ SyntaxError: positional argument follows keyword argument \u4ed4\u7ec6\u9605\u8bfb\u9519\u8bef\u63d0\u793a\uff0c\u5b83\u5df2\u7ecf\u544a\u8bc9\u4f60\u7b54\u6848\uff1a SyntaxError: positional argument follows keyword argument. \uff0cPython\u4e0d\u5141\u8bb8\u8fd9\u6837\u505a\u3002 \u53ef\u53d8\u6570\u76ee\u53c2\u6570 \u4ee5\u4e0a\u65b9\u6cd5\u5df2\u7ecf\u591f\u7075\u6d3b\u4e86\uff0c\u4f46\u662f\u7a0b\u5e8f\u5458\u7684\u9700\u6c42\u662f\u65e0\u6b62\u5883\u7684\uff0c\u6709\u65f6\u5019\u6211\u4eec\u8fd8\u60f3\u66f4\u7075\u6d3b\u4e00\u4e9b\u3002\u4e0a\u9762\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u53ea\u80fd\u63a5\u53d7\u4e09\u4e2a\u53c2\u6570\uff0c\u5982\u679c\u6211\u4eec\u60f3\u968f\u4fbf\u7ed9\u4e00\u4e2a\u51fd\u6570\u4f20\u5165\u4efb\u610f\u6570\u91cf\u7684\u53c2\u6570\u5462\uff1f\uff08\u6709\u70b9\u592a\u968f\u610f\u4e86\uff0c\u4f46Python\u53ef\u4ee5\u6ee1\u8db3\u4f60\uff09: def f ( a , b , c , * args , ** kwargs ): print ( a , b , c ) print ( \"args:\" ) for k in args : print ( k ) print ( \"kwargs:\" ) for k , v in kwargs . items (): print ( k , v ) f ( 1 , 2 , 3 , 4 , 5 , 6 , x = 1 , y = 4 ) # 1 2 3 # args: # 4 # 5 # 6 # kwargs: # x 1 # y 4 *args \u628a\u6240\u6709\u672a\u77e5\u7684 positional arguments\u6536\u96c6\u5230\u4e00\u4e2a\u5217\u8868\u91cc\u9762\uff0c**kwargs\u628a\u6240\u6709\u672a\u77e5\u7684keyword arguments\u6536\u96c6\u5230\u4e00\u4e2a\u5b57\u5178\u91cc\u9762\u3002\u661f\u53f7\u5728\u8fd9\u91cc\u53ef\u4ee5\u7406\u89e3\u4e3a \u6536\u96c6 \u6216\u8005 \u6253\u5305\u538b\u7f29 \u3002 \u51fd\u6570\u7684\u8fd4\u56de\u503c \u5728c++\u91cc\u9762\uff0c\u51fd\u6570\u53ea\u80fd\u6709\u4e00\u4e2a\u8fd4\u56de\u503c\uff0c\u5982\u679c\u4f60\u60f3\u8fd4\u56de\u591a\u4e2a\u503c\uff0c\u5b83\u4eec\u5fc5\u987b\u88ab\u5305\u542b\u5728\u4e00\u4e2a\u5bf9\u8c61\u91cc\u9762\u3002\u5728Python\u91cc\u4e5f\u662f\u5982\u6b64\uff0c\u4f46\u770b\u8d77\u6765\u7565\u6709\u4e0d\u540c\uff1a def foo ( x ): return x , 2 * x , 3 * x \u597d\u50cf\u6211\u4eec\u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u503c\u554a\uff1f\u6253\u5370\u4e00\u4e2a\u8bd5\u8bd5\uff1a print ( foo ( 1 )) # (1, 2, 3) \u4ece\u8f93\u51fa\u7684\u7ed3\u679c\u770b\uff0c\u6211\u4eec\u5f97\u5230\u7684\u5176\u5b9e\u662f\u4e00\u4e2a\u5143\u7ec4\uff08\u6ce8\u610f\u4ed6\u4eec\u662f\u88ab\u62ec\u53f7\u5305\u88f9\u8d77\u6765\u7684\uff0c\u662f\u5143\u7ec4\u7684\u5f62\u5f0f\uff09\u3002\u6240\u4ee5\u867d\u7136\u770b\u8d77\u6765\u4f60\u8fd4\u56de\u6765\u591a\u4e2a\u7ed3\u679c\uff0c\u4f46\u662fPython\u53c8\u5077\u5077\u505a\u4e86\u4e00\u5c42\u5904\u7406\uff0c\u8fd4\u56de\u7684\u8fd8\u662f\u4e00\u4e2a\u3002\u6700\u7ec8\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u7528\u4e00\u4e2a\u5143\u7ec4\u53d8\u91cf\u53bb\u63a5\u6536\u8fd9\u4e2a\u8fd4\u56de\u503c\uff0c\u4e5f\u53ef\u4ee5\u5229\u7528 \u591a\u5143\u8d4b\u503c \u7684\u6027\u8d28\uff0c\u76f4\u63a5\u628a\u5143\u7ec4\u8d4b\u503c\u7ed9\u4e09\u4e2a\u53d8\u91cf\u3002 x = foo ( 1 ) x1 , x2 , x3 = foo ( 1 ) \u7b2c\u4e8c\u79cd\u5199\u6cd5\uff0c\u770b\u8d77\u6765\u548c\u4f60\u8fd4\u56de\u4e86\u591a\u4e2a\u7ed3\u679c\u6ca1\u4ec0\u4e48\u533a\u522b\u3002\u8bd5\u60f3\u4e00\u4e0b\uff0c\u5982\u679c\u8ba9\u4f60\u5199\u4e00\u4e2a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\uff0c\u4e00\u4e2a\u6570\u7ec4\u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5728C++\u91cc\u9762\u4f60\u4f1a\u600e\u4e48\u5b9e\u73b0\uff1f\u800c\u5728Python\u91cc\u9762\uff0c\u4f60\u751a\u81f3\u90fd\u4e0d\u7528\u60f3\u53bb\u5982\u4f55\u5b9e\u73b0\uff0c\u76f4\u63a5\u8fd4\u56de\u5c31\u662f\u4e86\u3002 \u7c7b\u578b\u6ce8\u89e3\u548c\u9759\u6001\u4ee3\u7801\u5206\u6790 \u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u4e5f\u662f\u52a8\u6001\u7c7b\u578b\uff0c\u8fd9\u867d\u7136\u5f88\u7075\u6d3b\uff0c\u4f46\u662f\u4e5f\u4f1a\u5e26\u6765\u5f88\u591a\u95ee\u9898\uff0c\u8ba9\u4e00\u4e9b\u9690\u85cf\u7684bug\u4e0d\u5bb9\u6613\u88ab\u53d1\u73b0\u3002 def foo ( a : int , b : str , c : list ) -> dict : return {} linter \u9759\u6001\u4ee3\u7801\u5206\u6790\u5de5\u5177\u3002\u53ef\u4ee5\u5e2e\u52a9\u4f60\u68c0\u67e5\u6f5c\u5728\u7684\u9519\u8bef\u3002\u8fd9\u6837\u4f60\u53ef\u4ee5\u5728\u8fd0\u884c\u4e4b\u524d\u53d1\u73b0\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u5728\u4ee3\u7801\u4e0a\u7ebf\u4e4b\u540e\u624d\u53d1\u73b0\u4e00\u5806bug~\u3002 \u51fd\u6570\u7f16\u7a0b \u51fd\u6570\u7f16\u7a0b\u548c\u9762\u5411\u8fc7\u7a0b\u7f16\u7a0b\u3001\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e00\u6837\uff0c\u90fd\u662f\u4e00\u79cd\u7f16\u7a0b\u8303\u5f0f\uff0c\u6709\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u79cd\u7f16\u7a0b\u98ce\u683c\uff0c\u5b83\u4eec\u5e76\u6ca1\u6709\u4e25\u683c\u610f\u4e49\u4e0a\u7684\u4f7f\u7528\u754c\u9650\uff0c\u5728C++\u91cc\u6211\u4eec\u5199\u4ee3\u7801\u5f88\u591a\u65f6\u5019\u90fd\u662f\u6df7\u5408\u4f7f\u7528\u9762\u5411\u8fc7\u7a0b\u7f16\u7a0b\u548c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e24\u79cd\u98ce\u683c\u3002\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a\u51fd\u6570\u7f16\u7a0b\u7684\u5b9a\u4e49\uff1a \u51fd\u6570\u7f16\u7a0b\u4f7f\u7528\u51fd\u6570\u4f5c\u4e3a\u4ee3\u7801\u7684\u4e3b\u8981\u6784\u5efa\u5355\u5143\u3002\u548c\u8fc7\u7a0b\u7f16\u7a0b\u4e0d\u4e00\u6837\uff0c\u51fd\u6570\u7f16\u7a0b\u8303\u5f0f\u628a\u51fd\u6570\u5f53\u4f5c\u5bf9\u8c61\u6765\u5904\u7406\uff1a\u53ef\u4ee5\u88ab\u5f53\u4f5c\u53c2\u6570\u4f20\u9012\uff0c\u53ef\u4ee5\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u52a8\u6001\u521b\u5efa\u51fd\u6570\u3002 Functional programming (FP) uses functions as the main building blocks. Unlike procedural programming, the functional paradigm treats functions as objects that can be passed as parameters, allowing new functions to be built dynamically as the program executes. \u51fd\u6570\u5728\u4efb\u4f55\u7f16\u7a0b\u8bed\u8a00\u91cc\u90fd\u652f\u6301\uff0c\u4f46\u5e76\u4e0d\u662f\u4efb\u4f55\u7f16\u7a0b\u8bed\u8a00\u90fd\u9002\u5408\u51fd\u6570\u7f16\u7a0b\u3002\u6bd4\u5982\u628a\u51fd\u6570\u672c\u8eab\u5f53\u4f5c\u53c2\u6570\uff08\u4e0d\u662f\u590d\u6742\u7684\u51fd\u6570\u6307\u9488\uff09\u548c\u52a8\u6001\u521b\u5efa\u51fd\u6570\uff0c\u8fd9\u5728C++\u4e2d\u5c31\u65e0\u6cd5\u5b9e\u73b0\u3002Python\u662f\u652f\u6301\u51fd\u6570\u7f16\u7a0b\u7684\u8bed\u8a00\uff0c\u51fd\u6570\u5728Python\u4e2d\u5c31\u662f\u5bf9\u8c61\uff0c\u662f \u4e00\u7b49\u516c\u6c11 \u3002 \u51fd\u6570\u7f16\u7a0b\u7684\u7279\u70b9 \u51fd\u6570\u7f16\u7a0b\u504f\u7231\u7eaf\u51fd\u6570 \u5e76\u975e\u8bf4\u4f7f\u7528\u51fd\u6570\u5c31\u7b97\u4f5c\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u51fd\u6570\u7f16\u7a0b\u559c\u6b22\u7528\u66f4\u63a5\u8fd1\u6570\u5b66\u4e0a\u5b9a\u4e49\u7684\u7eaf\u7cb9\u7684\u51fd\u6570\uff1a\u63a5\u53d7\u8f93\u5165\uff0c\u8fd4\u56de\u8f93\u51fa\uff0c\u591a\u6b21\u91cd\u590d\u8c03\u7528\u8fd4\u56de\u7684\u503c\u5b8c\u5168\u552f\u4e00\u786e\u5b9a\uff0c\u5e76\u4e14\u4e0d\u4f1a\u6709\u5176\u4ed6\u7684\u9644\u52a0\u5f71\u54cd\u3002 \u6211\u4eec\u5148\u4e3e\u4e00\u4e2aC++\u4e2d\u51fd\u6570\u7684\u4f8b\u5b50\uff0c // C++ int f ( int * a , double b ) { // code return 0 ; } \u4ece\u529f\u80fd\u4e0a\u770b\uff0c\u8fd9\u662f\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u51fd\u6570\uff0c\u4f46\u662f\u56e0\u4e3a\u4f20\u5165\u4e86\u6307\u9488\u7684\u7f18\u6545\uff0c\u8c03\u7528\u5b8c\u8fd9\u4e2a\u51fd\u6570\u540e\u4f60\u4e0d\u786e\u5b9a a \u7684\u503c\u662f\u5426\u4f1a\u88ab\u6539\u53d8\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u9644\u52a0\u5f71\u54cd\uff1aside effects\u3002\u5728\u6570\u5b66\u4e2d\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u51fd\u6570\u7684\u65f6\u5019\uff0c\u662f\u4e0d\u9700\u8981\u62c5\u5fc3\u8fd9\u4e9b\u4e1c\u897f\u7684\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7eaf\u51fd\u6570\u7684\u4f8b\u5b50\uff1a // C++ int add ( int a , int b ) { return a + b ; } \u51fd\u6570\u7f16\u7a0b\u907f\u514dside effects \u8fd9\u6761\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e0a\u4e00\u6761\u7684\u63a8\u8bba\u3002 \u51fd\u6570\u7f16\u7a0b\u504f\u7231\u4e0d\u53ef\u53d8\u7684\u5bf9\u8c61 \u4e0d\u53ef\u53d8\u7684\u5bf9\u8c61\u6307\u90a3\u4e9b\u521b\u5efa\u4e4b\u540e\u5c31\u4e0d\u5141\u8bb8\u88ab\u4fee\u6539\u7684\u5bf9\u8c61\uff0c\u6027\u8d28\u7c7b\u4f3c\u4e8e\u5e38\u91cf\u3002 def sum ( arr : list ) -> float : s = 0 for x in arr : s += x return s \u5bf9\u5217\u8868\u6c42\u548c\u3002 \u51fd\u6570\u4f5c\u4e3a\u5bf9\u8c61 \u51fd\u6570\u4f5c\u4e3a \u4e00\u7b49\u516c\u6c11 \uff0c\u6240\u6709\u4f60\u5bf9\u5176\u4ed6\u53d8\u91cf\u80fd\u64cd\u4f5c\u7684\u4e8b\u60c5\u90fd\u53ef\u4ee5\u5bf9\u51fd\u6570\u8fdb\u884c\u64cd\u4f5c\uff0c\u6bd4\u5982\uff1a \u8d4b\u503c import math a = math . sin a ( math . pi ) \u521b\u5efa \u5728C++\u4e2d\u6211\u4eec\u5fc5\u987b\u8981\u5148\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u624d\u80fd\u591f\u4f7f\u7528\u5b83\uff0cPython\u4e2d\u4f60\u53ef\u4ee5\u76f4\u63a5\u7528lambda\u8868\u8fbe\u5f0f\u521b\u5efa\u51fd\u6570\uff1a # example 1 sum = lambda x , y : x + y sum # example 2 import math sin2 = lambda x : math . sin ( x ) ** 2 sin2 ( math . pi / 3 ) lambda\u8868\u8fbe\u5f0f\u5c31\u662f\u533f\u540d\u51fd\u6570\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u8d4b\u503c\u7ed9\u4efb\u4f55\u53d8\u91cf\uff0clambda\u8868\u8fbe\u5f0f\u53ea\u80fd\u5b9a\u4e49\u4e00\u884c\u8868\u8fbe\u5f0f\u80fd\u5b8c\u6210\u7684\u51fd\u6570\uff0c\u592a\u590d\u6742\u7684\u51fd\u6570\u8fd8\u662f\u5f97\u7528 def \u6765\u5b9a\u4e49\u3002\u4e0d\u8fc7\u8003\u8651\u5230Python\u8bed\u8a00\u7684\u7b80\u6d01\u6027\uff0c\u4e00\u884c\u4ee3\u7801\u4f60\u80fd\u5b8c\u6210\u7684\u4e8b\u60c5\u4e5f\u8fdc\u8fdc\u8d85\u8fc7\u4f60\u73b0\u5728\u7684\u60f3\u8c61\u3002 \u6dfb\u52a0\u5230\u5217\u8868 import math funcs = [ math . sin , math . cos , math . tan ] [ print ( f ( 0.5 )) for f in funcs ] \u4f5c\u4e3a\u51fd\u6570\u53c2\u6570 import math def abs_f ( fun , x ): return abs ( fun ( x )) abs_f ( math . sin , - 0.5 ) \u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u6709\u51e0\u4e2a\u6bd4\u8f83\u5e38\u7528\u7684\u4f8b\u5b50\u3002 \u6392\u5e8f names = [ \"zhang\" , \"wang\" , \"li\" , \"zhao\" ] # \u9ed8\u8ba4\u6392\u5e8f sorted ( names ) # ['li', 'wang', 'zhang', 'zhao'] # \u81ea\u5b9a\u4e49\u6392\u5e8f\u51fd\u6570\uff0c\u8fd9\u91cc\u7528len\u51fd\u6570 sorted ( names , key = len ) # ['li', 'wang', 'zhao', 'zhang'] # \u7528\u81ea\u5df1\u521b\u5efa\u7684\u51fd\u6570 sorted ( names , key = lambda x : - len ( x )) #['zhang', 'wang', 'zhao', 'li'] map import functools \u4f5c\u4e3a\u51fd\u6570\u8fd4\u56de\u503c def add_N ( n : int ): def add ( x ): return x + n return add add_1 = add_N ( 1 ) add_1 ( 1 ) # 2 add_1 ( 3 ) # 4 add_1024 = add_N ( 1024 ) add_1024 ( 3 ) # 1027 \u95ed\u5305 \u95ed\u5305\u662f\u4e2a\u5f88\u6709\u610f\u601d\u7684\u6982\u5ff5\uff0c\u503c\u5f97\u7279\u6b8a\u8bb2\u4e00\u8bb2\u3002 \u4e0a\u9762\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c\u7684\u4f8b\u5b50\u91cc\u5176\u5b9e\u5c31\u7528\u5230\u4e86\u95ed\u5305\uff0c\u6211\u4eec\u91cd\u65b0\u518d\u770b\u4e00\u4e0b\u8fd9\u4e2a\u51fd\u6570\uff1a def add_N ( n : int ): def add ( x ): return x + n return add add_N \u5185\u90e8\u7684\u8fd9\u4e2aadd\u51fd\u6570\uff0c\u5f15\u7528\u4e86\u5b83\u5916\u90e8\u7684\u53d8\u91cf\uff08\u4e5f\u5c31\u662fadd_N\uff09\u7684\u53c2\u6570n\u3002\u5f53\u6211\u4eec\u628aadd\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u5b83\u597d\u50cf \u643a\u5e26 \u4e86n\u8fd9\u4e2a\u53c2\u6570\u4e00\u6837\uff0c\u5728\u540e\u9762\u7684\u4f7f\u7528\u4e2d\u4f9d\u7136\u80fd\u6b63\u786e\u4f7f\u7528\u5b83\u7684\u503c\u3002 \u6211\u4eec\u6307\u5bfc\u51fd\u6570\u90fd\u6709\u81ea\u5df1\u7684\u4f5c\u7528\u57df\uff0c\u53d8\u91cf n \u5728 add_N \u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u57df\u4e4b\u5185\uff0c\u4f46\u662f\u4e0d\u5728 add \u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u57df\u5185\u3002\u4f46\u662f\u5f53\u6211\u4eec\u8fd4\u56de add \u8fd9\u4e2a\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5b83\u628a\u5176\u6240\u5f15\u7528\u7684 \u7236\u4f5c\u7528\u57df \u7684\u53d8\u91cf\u4e5f\u5e26\u4e0a\u4e86\uff0c\u8fd9\u5c31\u662f\u95ed\u5305\u3002 \u5173\u4e8e\u8fd9\u79cd\u4f5c\u7528\u57df\u7684\u6027\u8d28\uff0c\u770b\u8d77\u6765\u6709\u6ca1\u6709\u4e00\u70b9\u719f\u6089\u5462\uff1f\u60f3\u60f3\u5728\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u91cc\u9762\uff0c\u4e00\u4e2a\u5bf9\u8c61\u6709\u81ea\u5df1\u7684\u4f5c\u7528\u57df\uff0c\u5bf9\u8c61\u5185\u90e8\u7684\u65b9\u6cd5\u53ef\u4ee5\u968f\u4fbf\u8bbf\u95ee\u5bf9\u8c61\u5185\u90e8\u7684\u5c5e\u6027\u3002\u5982\u679c\u4f60\u628a\u5bf9\u8c61\u5185\u7684\u65b9\u6cd5\u5f53\u4f5c\u51fd\u6570\u6765\u770b\uff0c\u4f60\u4f1a\u53d1\u73b0\u5bf9\u8c61\u5c5e\u6027\u4e5f\u5e76\u4e0d\u5728\u51fd\u6570\u7684\u4f5c\u7528\u57df\u5185\uff1a \u65e2\u7136\u5728Python\u4e2d\u51fd\u6570\u672c\u8eab\u5c31\u662f\u4e00\u79cd\u5bf9\u8c61\uff0c\u90a3\u4e48\u95ed\u5305\u7684\u652f\u6301\u4e5f\u5c31\u53d8\u5f97\u4e0d\u96be\u7406\u89e3\u4e86\u3002\u5e76\u4e14\u95ed\u5305\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u8ba9\u51fd\u6570\u66ff\u4ee3\u4e86\u7c7b\u7684\u5de5\u4f5c\uff0c\u8fd9\u4e5f\u6b63\u662f\u51fd\u6570\u7f16\u7a0b\u8303\u5f0f\u6240\u8ffd\u6c42\u7684\uff1a\u5c3d\u91cf\u4f7f\u7528\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u7c7b\u3002 \u5229\u7528\u95ed\u5305\u786e\u5b9e\u80fd\u505a\u5f88\u591a\u4e8b\u60c5\uff0c\u4e0b\u9762\u6709\u4e2a\u5c0f\u4f8b\u5b50\uff1a def compose ( f , g ): def fn ( x ): return f ( g ( x )) return fn \u8fd9\u662f\u751f\u6210\u590d\u5408\u51fd\u6570\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u5982\u679c\u4f60\u7ecf\u5e38\u9700\u8981\u8fde\u7eed\u8c03\u7528\u51e0\u4e2a\u51fd\u6570\uff0c\u90a3\u4e48\u4e0d\u59a8\u628a\u4ed6\u4eec\u7ec4\u5408\u8d77\u6765\uff0c\u8fd9\u6837\u4f1a\u8ba9\u4f60\u7684\u4ee3\u7801\u66f4\u7b80\u6d01\u3002 \u8fed\u4ee3\u5668 \u51fd\u6570\u7f16\u7a0b\u559c\u6b22\u4f7f\u7528\u8fed\u4ee3\u5668\uff0c\u8fed\u4ee3\u5668\u7684\u6982\u5ff5\u5728C++\u4e2d\u4e5f\u6709\uff0c\u4f46 \u751f\u6210\u5668 \u751f\u6210\u5668 def get_array (): l = [ 1 , 2 , 3 , 4 ] return l # \u4e00\u6b21\u8fd4\u56de\u6240\u6709\u5143\u7d20 for x in get_array (): print ( x ) def get_array (): l = [ 1 , 2 , 3 , 4 ] for x in l : yield x # \u4e00\u6b21\u53ea\u8fd4\u56de\u4e00\u4e2a\u5143\u7d20 for x in get_array (): # \u8fed\u4ee3\u7684\u65f6\u5019\u4e0e\u5217\u8868\u6ca1\u6709\u533a\u522b print ( x ) \u751f\u6210\u5668\u548c\u8fed\u4ee3\u5668\u662f\u4e00\u5bf9\u5144\u5f1f\uff0c\u914d\u5408\u4f7f\u7528\u624d\u6700\u4f73\u3002 \u751f\u6210\u5668 \u9012\u5f52 \u652f\u6301\u9012\u5f52\u662f\u7f16\u7a0b\u8bed\u8a00\u7684\u57fa\u672c\u8981\u6c42\uff0cPython\u81ea\u7136\u4e5f\u4e0d\u4f8b\u5916\u3002\u6211\u4eec\u5c1d\u8bd5\u7528\u9012\u5f52\u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2cn\u9879\uff1a def fib ( n ): if n < 1 : return None if n == 1 : return 1 elif n == 2 : return 1 else : return fib ( n - 1 ) + fib ( n - 2 ) print ( fib ( 10 )) # output\uff1a # 55","title":"\u51fd\u6570"},{"location":"2-python-function/#_1","text":"","title":"\u51fd\u6570"},{"location":"2-python-function/#_2","text":"\u51fd\u6570\u5728\u6570\u5b66\u4e0a\u6709\u7740\u6e05\u6670\u7684\u5b9a\u4e49\uff0c\u5e38\u7528\u7684\u8868\u8fbe\u5f62\u5f0f\u5982\u4e0b: \\[ y = f(x) \\] \u5176\u4e2dx\u662f\u81ea\u53d8\u91cf\uff0cy\u662f\u56e0\u53d8\u91cf\uff08\u8fd4\u56de\u503c\uff09\uff0cf\u662f\u5bf9\u5e94\u6cd5\u5219\u3002\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u51fd\u6570\u548c\u6570\u5b66\u4e0a\u7684\u51fd\u6570\u5728\u672c\u8d28\u4e0a\u662f\u4e00\u6837\u7684\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u660e\u663e\u7684\u533a\u522b\u3002\u6211\u4eec\u5148\u770b\u4e00\u4e0bC++\u4e2d\u51fd\u6570\u7684\u6807\u51c6\u5b9a\u4e49\uff0c double sqrt ( double x ); C++\u4e2d\u7684\u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u90fd\u5b9a\u4e49\u4e86\u7c7b\u578b\uff0c\u8fd9\u662f\u548c \\(y=f(x)\\) \u6700\u5927\u7684\u533a\u522b\u3002\u6570\u5b66\u4e0a\u7684\u51fd\u6570\u5904\u7406\u7684\u90fd\u662f\u201c \u6570 \u201d\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u7279\u522b\u6307\u51fa\u7c7b\u578b\u3002\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u770b\uff0c\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u51fd\u6570\u5728\u5f62\u5f0f\u4e0a\u5176\u5b9e\u8981\u6bd4\u6570\u5b66\u4e0a\u7684\u51fd\u6570\u590d\u6742\uff1a\u901a\u8fc7\u5bf9\u53c2\u6570\u6570\u91cf\u3001\u7c7b\u578b\uff0c\u8fd4\u56de\u503c\u7c7b\u578b\u7684\u5404\u79cd\u6392\u5217\u7ec4\u5408\uff0c\u53ef\u4ee5\u7ed9\u51fa\u4e30\u5bcc\u548c\u590d\u6742\u7684\u51fd\u6570\u5b9a\u4e49\u3002\u5982\u679c\u6211\u4eec\u5ffd\u7565\u4e00\u4e2a\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\uff0c \u51fd\u6570\u540d \u8f93\u5165\u53c2\u6570\u5217\u8868 \u8f93\u51fa/\u8fd4\u56de\u503c","title":"\u4ec0\u4e48\u662f\u51fd\u6570\uff1f"},{"location":"2-python-function/#_3","text":"\u5728Python\u4e2d\u5b9a\u4e49\u51fd\u6570\u5229\u7528\u5982\u4e0b\u8bed\u53e5\u3002 def f (): pass # \u4ec0\u4e48\u4e5f\u4e0d\u60f3\u505a\u7684\u65f6\u5019\u7528pass \u8fd9\u4e2a\u51fd\u6570\u4ec0\u4e48\u4e5f\u6ca1\u505a\uff0c\u6ca1\u6709\u8f93\u5165\u4e5f\u6ca1\u6709\u8f93\u51fa\uff0c\u8c03\u7528\u5b83\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u6548\u679c\u3002\u4f46\u4f60\u4e0d\u8981\u5c0f\u770b\u5b83\uff0c\u6b63\u6240\u8c13 \u9ebb\u96c0\u867d\u5c0f\uff0c\u4e94\u810f\u4ff1\u5168 \uff0c\u8fd9\u4e2a\u51fd\u6570\u5305\u542b\u7684\u5185\u5bb9\u4e00\u70b9\u4e0d\u7b80\u5355\u3002\u6211\u4eec\u53ef\u4ee5\u7528 dir() \u51fd\u6570\u67e5\u770b\u4efb\u4f55\u4e00\u4e2a\u51fd\u6570\u7684\u7ec6\u8282\uff1a dir ( f ) [ '__annotations__' , '__call__' , '__class__' , '__closure__' , '__code__' , '__defaults__' , '__delattr__' , '__dict__' , '__dir__' , '__doc__' , '__eq__' , '__format__' , '__ge__' , '__get__' , '__getattribute__' , '__globals__' , '__gt__' , '__hash__' , '__init__' , '__init_subclass__' , '__kwdefaults__' , '__le__' , '__lt__' , '__module__' , '__name__' , '__ne__' , '__new__' , '__qualname__' , '__reduce__' , '__reduce_ex__' , '__repr__' , '__setattr__' , '__sizeof__' , '__str__' , '__subclasshook__' ] dir() \u65b9\u6cd5\u50cf\u662f\u4e00\u4e2a\u900f\u89c6\u955c\uff0c\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u5de5\u5177\u3002 \u4e00\u4e2a\u666e\u901a\u7684\u51fd\u6570\u5df2\u7ecf\u81ea\u5e26\u4e86\u8fd9\u4e48\u5185\u5bb9\uff1f\u6ca1\u6709\u60f3\u5230\u5427\u3002\u5728C++\u4e2d\u5982\u679c\u4f60\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5982\u4e0b\u51fd\u6570\uff0c void foo (){} \u90a3\u4e48\u5b83\u770b\u8d77\u6765\u5c31\u662f\u4e00\u4e2a\u4ec0\u4e48\u90fd\u6ca1\u6709\u7684\u51fd\u6570\uff0c\u5b9e\u9645\u4e0a\u5360\u7528\u7684\u5185\u5b58\u4e5f\u5c3d\u53ef\u80fd\u5c0f\u3002\u90a3\u4e48\u5728Python\u91cc\u9762\u4e3a\u4ec0\u4e48\u4f1a\u4e0d\u4e00\u6837\u5462\uff1f","title":"\u5b9a\u4e49\u51fd\u6570"},{"location":"2-python-function/#_4","text":"C++\u867d\u7136\u4e5f\u662f\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u4f46\u662f\u8fdc\u6ca1\u6709\u5176\u4ed6\u4e00\u4e9b\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\u90a3\u6837\u6781\u7aef\u3002\u5728Python\u91cc\u9762 \u4e00\u5207\u90fd\u662f\u5bf9\u8c61 \u3002\u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u662f\uff1a\u4efb\u4f55\u53d8\u91cf\u2014\u2014\u5305\u62ec\u6574\u6570\uff0c\u6d6e\u70b9\u6570\uff0c\u5b57\u7b26\u4e32\uff0c\u4efb\u4f55\u51fd\u6570\uff0c\u4ee5\u53ca\u4efb\u4f55\u7c7b\u90fd\u662f\u5bf9\u8c61\u3002\u6bd4\u5982\u6211\u4eec\u540c\u6837\u7528dir\u65b9\u6cd5\u67e5\u770b\u4e00\u4e2a\u6574\u6570\uff0c\u4f60\u4f1a\u53d1\u73b0\u5b83\u540c\u6837\u5305\u542b\u4e86\u5f88\u591a\u5185\u5bb9\u3002 a = 1 dir ( a ) ['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes'] \u8fd9\u4e9b\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u65b9\u6cd5\u88ab\u6210\u4e3a \u9b54\u6cd5\u65b9\u6cd5 \uff0c\u662fPython\u9ed8\u8ba4\u4e3a\u6211\u4eec\u521b\u5efa\u7684\u3002\u60f3\u4e00\u60f3C++\u4e2d\u7684\u7c7b\uff0c\u5f53\u6211\u4eec\u4e0d\u663e\u793a\u5b9a\u4e49\u6784\u9020\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u4f1a\u5e2e\u52a9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u9ed8\u8ba4\u6784\u9020\u65b9\u6cd5\u3002\u56e0\u4e3a\u5728Python\u4e2d\u4e00\u5207\u7686\u5bf9\u8c61\uff0c\u6240\u4ee5\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u6709\u4e00\u4e9b\u7f16\u8bd1\u5668\u5e2e\u5fd9\u521b\u9020\u7684\u9ed8\u8ba4\u65b9\u6cd5\u3002 \u5373\u4f7f\u662f\u4e00\u4e2a\u4ec0\u4e48\u4e5f\u4e0d\u505a\u7684\u51fd\u6570\uff0c\u6216\u8005\u4e00\u4e2a\u6574\u6570\u53d8\u91cf\uff0c\u90fd\u4f1a\u53c8\u4e30\u5bcc\u7684 \u9b54\u6cd5\u65b9\u6cd5 \u3002 \u5728C++\u4e2d\uff0c\u5373\u4f7f\u53c8\u5f88\u591a\u9ed8\u8ba4\u65b9\u6cd5\uff0c\u4f46\u4f60\u662f\u770b\u4e0d\u5230\u4ed6\u4eec\u7684\uff0c\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u4ed6\u4eec\u5728Python\u4e2d\u66f4\u52a0 \u53ef\u89c1 \u3002\u53ef\u89c1\u6027\u7684\u6982\u5ff5\u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u5f88\u91cd\u8981\uff0c\u8fd9\u4e00\u70b9\u8bf7\u5728Python\u4e2d\u6162\u6162\u4f53\u4f1a\u3002 \u5173\u4e8e\u4e00\u5207\u7686\u5bf9\u8c61\u7684\u6982\u5ff5\uff0c\u8bf7\u6162\u6162\u53bb\u4f53\u4f1a\uff0c\u5b83\u4f1a\u5bfc\u81f4\u4e0eC++\u4e2d\u5b8c\u5168\u4e0d\u4e00\u6837\u7684\u5f00\u53d1\u4f53\u9a8c\u3002\u56e0\u4e3a\u4e00\u5207\u7686\u5bf9\u8c61\u7684\u7f18\u6545\uff0c\u5728Python\u4e2d\u4f60\u770b\u5230\u7684\u5185\u7f6e\u7c7b\u578b\u548cC++\u662f\u6709\u6240\u533a\u522b\u7684\u3002\u6bd4\u5982int\u7c7b\u578b\uff0c\u5728C/C++\u91cc\u9762\u5b83\u53ea\u5360\u7528\u5185\u5b58\u4e2d\u7684\u56db\u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u5728Python\u91cc\u5b83\u8fd8\u5305\u542b\u4e86\u5bf9\u8c61\u5934\uff1a","title":"\u4e00\u5207\u7686\u5bf9\u8c61"},{"location":"2-python-function/#_5","text":"\u9b54\u6cd5\u65b9\u6cd5\u901a\u5e38\u90fd\u4f1a\u88ab\u7f16\u8bd1\u5668\u81ea\u52a8\u8c03\u7528\uff0c\u5e76\u4e14\u4e0d\u540c\u5bf9\u8c61\u7684\u9ed8\u8ba4\u9b54\u6cd5\u65b9\u6cd5\u662f\u4e0d\u540c\u7684\uff0c\u4e0a\u8ff0\u51fd\u6570\u548c\u6574\u6570\u53d8\u91cf\u7684\u9b54\u6cd5\u65b9\u6cd5\u5c31\u6709\u5f88\u591a\u4e0d\u540c\u3002\u6211\u4eec\u4ee5 add \u8fd9\u4e00\u9b54\u6cd5\u65b9\u6cd5\u4e3a\u4f8b\uff0c\u770b\u4e00\u4e0b\u5b83\u7684\u7528\u9014\uff1a a = 1 a + 2 # \u5b9e\u9645\u4e0a\u8c03\u7528\u4e86 __add__ \u9b54\u6cd5\u65b9\u6cd5 \u4e0d\u8fc7\uff0cPython\u5e76\u6ca1\u6709\u963b\u6b62\u6211\u4eec\u624b\u52a8\u53bb\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\uff1a a = 1 a . __add__ ( 2 ) # \u4f60\u4f1a\u5f97\u5230 3 \u4e86\u89e3\u8fd9\u70b9\u4e4b\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u81ea\u5df1\u7ed9\u4efb\u4f55\u4e00\u4e2a\u5bf9\u8c61\u5b9a\u4e49__add__\u65b9\u6cd5\uff0c\u5728C++\u91cc\uff0c\u76f8\u5f53\u4e8e\u4f60\u91cd\u8f7d\u4e86 + \u8fd9\u4e2a\u8fd0\u7b97\u7b26\u3002\u8fd9\u4e00\u9053\u7406\u5bf9\u5176\u4ed6\u4efb\u4f55\u9b54\u6cd5\u65b9\u6cd5\u90fd\u9002\u7528\uff0cPython\u4e2d\u7684\u9b54\u6cd5\u65b9\u6cd5\u5b9e\u5728\u662f\u6709\u70b9\u591a\uff0c\u5728\u6b64\u5c31\u4e0d\u4e00\u4e00\u5217\u4e3e\u4ed6\u4eec\u7684\u4f5c\u7528\u4e86\uff0c\u9700\u8981\u4e86\u89e3\u7684\u65f6\u5019\u8bf7\u5c3d\u60c5google\u4e4b\u3002","title":"\u9b54\u6cd5\u65b9\u6cd5"},{"location":"2-python-function/#_6","text":"\u4e86\u89e3\u5b8c\u9b54\u6cd5\u65b9\u6cd5\u4e4b\u540e\uff0c\u6211\u4eec\u5f00\u59cb\u5b9a\u4e49\u4e00\u4e9b\u771f\u6b63\u6709\u7528\u7684\u51fd\u6570\uff0c\u5e76\u7814\u7a76\u4e00\u4e0b\u5b83\u7684\u6027\u8d28\u3002 def print3 ( a , b , c ): print ( a , b , c ) \u8fd9\u4e2a\u51fd\u6570\u53ea\u8d1f\u8d23\u6253\u5370\u4e09\u4e2a\u8f93\u5165\u53d8\u91cf\u3002\u8fd9\u91cc\u6211\u4eec\u5e76\u6ca1\u6709\u5b9a\u4e49\u4e09\u4e2a\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u56e0\u4e3aPython\u662f\u52a8\u6001\u7c7b\u578b\u8bed\u8a00\uff0c\u4f1a\u5728\u8fd0\u884c\u65f6\u53bb\u5224\u522b\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u4e0d\u9700\u8981\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u663e\u793a\u6307\u5b9a\u3002\u8fd9\u7ed9\u5f00\u53d1\u5e26\u6765\u4e86\u5f88\u591a\u7075\u6d3b\u6027\u3002","title":"\u51fd\u6570\u53c2\u6570"},{"location":"2-python-function/#key-value","text":"\u5728\u8c03\u7528\u4efb\u4f55\u4e00\u4e2a\u65b9\u6cd5\u6216\u51fd\u6570\u65f6\uff0c\u90fd\u53ef\u4ee5\u6709\u4ee5\u4e0b\u4e09\u79cd\u65b9\u5f0f\u6765\u4f20\u9012\u53c2\u6570: print3 ( 1 , 2 , 3 ) print3 ( a = 1 , c = 3 , b = 2 ) print3 ( 1 , c = 3 , b = 2 ) # 1 2 3 # 1 2 3 # 1 2 3 1. \u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u4f4d\u7f6e\u4f20\u5165\u6bcf\u4e2a\u53c2\u6570\uff0c\u8fd9\u548cC++\u5e76\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002 2. \u5176\u6b21\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u6309\u7167\u53c2\u6570\u540d\u548c\u503c\u7684\u952e\u503c\u5bf9\u65b9\u5f0f\u4f20\u5165\u53c2\u6570\uff0c\u5f53\u4f60\u6307\u5b9a\u53c2\u6570\u540d\u7684\u65f6\u5019\uff0c\u987a\u5e8f\u5c31\u53d8\u5f97\u4e0d\u91cd\u8981\u4e86\u3002 3. \u6df7\u5408\u4f7f\u7528\u4e24\u79cd\u65b9\u5f0f\u4f20\u5165\u53c2\u6570\uff1a\u524d\u9762\u662f\u6309\u7167\u4f4d\u7f6e\u4f20\u5165\uff0c\u540e\u9762\u6309\u7167key-value\u7684\u5f62\u5f0f\u4f20\u5165\u3002 \u90a3\u4e48\uff0c\u662f\u4e0d\u662f\u53ef\u4ee5\u968f\u4fbf\u6df7\u7528\u5462\uff1f\u8bd5\u4e00\u8bd5\uff1a print3 ( 1 , b = 2 , 3 ) File \"C:\\Users\\haipw\\AppData\\Local\\Temp/ipykernel_47416/3420492099.py\" , line 1 f ( 1 ,b = 2 , 3 ) ^ SyntaxError: positional argument follows keyword argument \u4ed4\u7ec6\u9605\u8bfb\u9519\u8bef\u63d0\u793a\uff0c\u5b83\u5df2\u7ecf\u544a\u8bc9\u4f60\u7b54\u6848\uff1a SyntaxError: positional argument follows keyword argument. \uff0cPython\u4e0d\u5141\u8bb8\u8fd9\u6837\u505a\u3002","title":"\u4f4d\u7f6e\u53c2\u6570\u548ckey-value\u53c2\u6570"},{"location":"2-python-function/#_7","text":"\u4ee5\u4e0a\u65b9\u6cd5\u5df2\u7ecf\u591f\u7075\u6d3b\u4e86\uff0c\u4f46\u662f\u7a0b\u5e8f\u5458\u7684\u9700\u6c42\u662f\u65e0\u6b62\u5883\u7684\uff0c\u6709\u65f6\u5019\u6211\u4eec\u8fd8\u60f3\u66f4\u7075\u6d3b\u4e00\u4e9b\u3002\u4e0a\u9762\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u53ea\u80fd\u63a5\u53d7\u4e09\u4e2a\u53c2\u6570\uff0c\u5982\u679c\u6211\u4eec\u60f3\u968f\u4fbf\u7ed9\u4e00\u4e2a\u51fd\u6570\u4f20\u5165\u4efb\u610f\u6570\u91cf\u7684\u53c2\u6570\u5462\uff1f\uff08\u6709\u70b9\u592a\u968f\u610f\u4e86\uff0c\u4f46Python\u53ef\u4ee5\u6ee1\u8db3\u4f60\uff09: def f ( a , b , c , * args , ** kwargs ): print ( a , b , c ) print ( \"args:\" ) for k in args : print ( k ) print ( \"kwargs:\" ) for k , v in kwargs . items (): print ( k , v ) f ( 1 , 2 , 3 , 4 , 5 , 6 , x = 1 , y = 4 ) # 1 2 3 # args: # 4 # 5 # 6 # kwargs: # x 1 # y 4 *args \u628a\u6240\u6709\u672a\u77e5\u7684 positional arguments\u6536\u96c6\u5230\u4e00\u4e2a\u5217\u8868\u91cc\u9762\uff0c**kwargs\u628a\u6240\u6709\u672a\u77e5\u7684keyword arguments\u6536\u96c6\u5230\u4e00\u4e2a\u5b57\u5178\u91cc\u9762\u3002\u661f\u53f7\u5728\u8fd9\u91cc\u53ef\u4ee5\u7406\u89e3\u4e3a \u6536\u96c6 \u6216\u8005 \u6253\u5305\u538b\u7f29 \u3002","title":"\u53ef\u53d8\u6570\u76ee\u53c2\u6570"},{"location":"2-python-function/#_8","text":"\u5728c++\u91cc\u9762\uff0c\u51fd\u6570\u53ea\u80fd\u6709\u4e00\u4e2a\u8fd4\u56de\u503c\uff0c\u5982\u679c\u4f60\u60f3\u8fd4\u56de\u591a\u4e2a\u503c\uff0c\u5b83\u4eec\u5fc5\u987b\u88ab\u5305\u542b\u5728\u4e00\u4e2a\u5bf9\u8c61\u91cc\u9762\u3002\u5728Python\u91cc\u4e5f\u662f\u5982\u6b64\uff0c\u4f46\u770b\u8d77\u6765\u7565\u6709\u4e0d\u540c\uff1a def foo ( x ): return x , 2 * x , 3 * x \u597d\u50cf\u6211\u4eec\u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u503c\u554a\uff1f\u6253\u5370\u4e00\u4e2a\u8bd5\u8bd5\uff1a print ( foo ( 1 )) # (1, 2, 3) \u4ece\u8f93\u51fa\u7684\u7ed3\u679c\u770b\uff0c\u6211\u4eec\u5f97\u5230\u7684\u5176\u5b9e\u662f\u4e00\u4e2a\u5143\u7ec4\uff08\u6ce8\u610f\u4ed6\u4eec\u662f\u88ab\u62ec\u53f7\u5305\u88f9\u8d77\u6765\u7684\uff0c\u662f\u5143\u7ec4\u7684\u5f62\u5f0f\uff09\u3002\u6240\u4ee5\u867d\u7136\u770b\u8d77\u6765\u4f60\u8fd4\u56de\u6765\u591a\u4e2a\u7ed3\u679c\uff0c\u4f46\u662fPython\u53c8\u5077\u5077\u505a\u4e86\u4e00\u5c42\u5904\u7406\uff0c\u8fd4\u56de\u7684\u8fd8\u662f\u4e00\u4e2a\u3002\u6700\u7ec8\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u7528\u4e00\u4e2a\u5143\u7ec4\u53d8\u91cf\u53bb\u63a5\u6536\u8fd9\u4e2a\u8fd4\u56de\u503c\uff0c\u4e5f\u53ef\u4ee5\u5229\u7528 \u591a\u5143\u8d4b\u503c \u7684\u6027\u8d28\uff0c\u76f4\u63a5\u628a\u5143\u7ec4\u8d4b\u503c\u7ed9\u4e09\u4e2a\u53d8\u91cf\u3002 x = foo ( 1 ) x1 , x2 , x3 = foo ( 1 ) \u7b2c\u4e8c\u79cd\u5199\u6cd5\uff0c\u770b\u8d77\u6765\u548c\u4f60\u8fd4\u56de\u4e86\u591a\u4e2a\u7ed3\u679c\u6ca1\u4ec0\u4e48\u533a\u522b\u3002\u8bd5\u60f3\u4e00\u4e0b\uff0c\u5982\u679c\u8ba9\u4f60\u5199\u4e00\u4e2a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\uff0c\u4e00\u4e2a\u6570\u7ec4\u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5728C++\u91cc\u9762\u4f60\u4f1a\u600e\u4e48\u5b9e\u73b0\uff1f\u800c\u5728Python\u91cc\u9762\uff0c\u4f60\u751a\u81f3\u90fd\u4e0d\u7528\u60f3\u53bb\u5982\u4f55\u5b9e\u73b0\uff0c\u76f4\u63a5\u8fd4\u56de\u5c31\u662f\u4e86\u3002","title":"\u51fd\u6570\u7684\u8fd4\u56de\u503c"},{"location":"2-python-function/#_9","text":"\u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u4e5f\u662f\u52a8\u6001\u7c7b\u578b\uff0c\u8fd9\u867d\u7136\u5f88\u7075\u6d3b\uff0c\u4f46\u662f\u4e5f\u4f1a\u5e26\u6765\u5f88\u591a\u95ee\u9898\uff0c\u8ba9\u4e00\u4e9b\u9690\u85cf\u7684bug\u4e0d\u5bb9\u6613\u88ab\u53d1\u73b0\u3002 def foo ( a : int , b : str , c : list ) -> dict : return {} linter \u9759\u6001\u4ee3\u7801\u5206\u6790\u5de5\u5177\u3002\u53ef\u4ee5\u5e2e\u52a9\u4f60\u68c0\u67e5\u6f5c\u5728\u7684\u9519\u8bef\u3002\u8fd9\u6837\u4f60\u53ef\u4ee5\u5728\u8fd0\u884c\u4e4b\u524d\u53d1\u73b0\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u5728\u4ee3\u7801\u4e0a\u7ebf\u4e4b\u540e\u624d\u53d1\u73b0\u4e00\u5806bug~\u3002","title":"\u7c7b\u578b\u6ce8\u89e3\u548c\u9759\u6001\u4ee3\u7801\u5206\u6790"},{"location":"2-python-function/#_10","text":"\u51fd\u6570\u7f16\u7a0b\u548c\u9762\u5411\u8fc7\u7a0b\u7f16\u7a0b\u3001\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e00\u6837\uff0c\u90fd\u662f\u4e00\u79cd\u7f16\u7a0b\u8303\u5f0f\uff0c\u6709\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u79cd\u7f16\u7a0b\u98ce\u683c\uff0c\u5b83\u4eec\u5e76\u6ca1\u6709\u4e25\u683c\u610f\u4e49\u4e0a\u7684\u4f7f\u7528\u754c\u9650\uff0c\u5728C++\u91cc\u6211\u4eec\u5199\u4ee3\u7801\u5f88\u591a\u65f6\u5019\u90fd\u662f\u6df7\u5408\u4f7f\u7528\u9762\u5411\u8fc7\u7a0b\u7f16\u7a0b\u548c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e24\u79cd\u98ce\u683c\u3002\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a\u51fd\u6570\u7f16\u7a0b\u7684\u5b9a\u4e49\uff1a \u51fd\u6570\u7f16\u7a0b\u4f7f\u7528\u51fd\u6570\u4f5c\u4e3a\u4ee3\u7801\u7684\u4e3b\u8981\u6784\u5efa\u5355\u5143\u3002\u548c\u8fc7\u7a0b\u7f16\u7a0b\u4e0d\u4e00\u6837\uff0c\u51fd\u6570\u7f16\u7a0b\u8303\u5f0f\u628a\u51fd\u6570\u5f53\u4f5c\u5bf9\u8c61\u6765\u5904\u7406\uff1a\u53ef\u4ee5\u88ab\u5f53\u4f5c\u53c2\u6570\u4f20\u9012\uff0c\u53ef\u4ee5\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u52a8\u6001\u521b\u5efa\u51fd\u6570\u3002 Functional programming (FP) uses functions as the main building blocks. Unlike procedural programming, the functional paradigm treats functions as objects that can be passed as parameters, allowing new functions to be built dynamically as the program executes. \u51fd\u6570\u5728\u4efb\u4f55\u7f16\u7a0b\u8bed\u8a00\u91cc\u90fd\u652f\u6301\uff0c\u4f46\u5e76\u4e0d\u662f\u4efb\u4f55\u7f16\u7a0b\u8bed\u8a00\u90fd\u9002\u5408\u51fd\u6570\u7f16\u7a0b\u3002\u6bd4\u5982\u628a\u51fd\u6570\u672c\u8eab\u5f53\u4f5c\u53c2\u6570\uff08\u4e0d\u662f\u590d\u6742\u7684\u51fd\u6570\u6307\u9488\uff09\u548c\u52a8\u6001\u521b\u5efa\u51fd\u6570\uff0c\u8fd9\u5728C++\u4e2d\u5c31\u65e0\u6cd5\u5b9e\u73b0\u3002Python\u662f\u652f\u6301\u51fd\u6570\u7f16\u7a0b\u7684\u8bed\u8a00\uff0c\u51fd\u6570\u5728Python\u4e2d\u5c31\u662f\u5bf9\u8c61\uff0c\u662f \u4e00\u7b49\u516c\u6c11 \u3002","title":"\u51fd\u6570\u7f16\u7a0b"},{"location":"2-python-function/#_11","text":"\u51fd\u6570\u7f16\u7a0b\u504f\u7231\u7eaf\u51fd\u6570 \u5e76\u975e\u8bf4\u4f7f\u7528\u51fd\u6570\u5c31\u7b97\u4f5c\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u51fd\u6570\u7f16\u7a0b\u559c\u6b22\u7528\u66f4\u63a5\u8fd1\u6570\u5b66\u4e0a\u5b9a\u4e49\u7684\u7eaf\u7cb9\u7684\u51fd\u6570\uff1a\u63a5\u53d7\u8f93\u5165\uff0c\u8fd4\u56de\u8f93\u51fa\uff0c\u591a\u6b21\u91cd\u590d\u8c03\u7528\u8fd4\u56de\u7684\u503c\u5b8c\u5168\u552f\u4e00\u786e\u5b9a\uff0c\u5e76\u4e14\u4e0d\u4f1a\u6709\u5176\u4ed6\u7684\u9644\u52a0\u5f71\u54cd\u3002 \u6211\u4eec\u5148\u4e3e\u4e00\u4e2aC++\u4e2d\u51fd\u6570\u7684\u4f8b\u5b50\uff0c // C++ int f ( int * a , double b ) { // code return 0 ; } \u4ece\u529f\u80fd\u4e0a\u770b\uff0c\u8fd9\u662f\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u51fd\u6570\uff0c\u4f46\u662f\u56e0\u4e3a\u4f20\u5165\u4e86\u6307\u9488\u7684\u7f18\u6545\uff0c\u8c03\u7528\u5b8c\u8fd9\u4e2a\u51fd\u6570\u540e\u4f60\u4e0d\u786e\u5b9a a \u7684\u503c\u662f\u5426\u4f1a\u88ab\u6539\u53d8\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u9644\u52a0\u5f71\u54cd\uff1aside effects\u3002\u5728\u6570\u5b66\u4e2d\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u51fd\u6570\u7684\u65f6\u5019\uff0c\u662f\u4e0d\u9700\u8981\u62c5\u5fc3\u8fd9\u4e9b\u4e1c\u897f\u7684\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7eaf\u51fd\u6570\u7684\u4f8b\u5b50\uff1a // C++ int add ( int a , int b ) { return a + b ; } \u51fd\u6570\u7f16\u7a0b\u907f\u514dside effects \u8fd9\u6761\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e0a\u4e00\u6761\u7684\u63a8\u8bba\u3002 \u51fd\u6570\u7f16\u7a0b\u504f\u7231\u4e0d\u53ef\u53d8\u7684\u5bf9\u8c61 \u4e0d\u53ef\u53d8\u7684\u5bf9\u8c61\u6307\u90a3\u4e9b\u521b\u5efa\u4e4b\u540e\u5c31\u4e0d\u5141\u8bb8\u88ab\u4fee\u6539\u7684\u5bf9\u8c61\uff0c\u6027\u8d28\u7c7b\u4f3c\u4e8e\u5e38\u91cf\u3002 def sum ( arr : list ) -> float : s = 0 for x in arr : s += x return s \u5bf9\u5217\u8868\u6c42\u548c\u3002","title":"\u51fd\u6570\u7f16\u7a0b\u7684\u7279\u70b9"},{"location":"2-python-function/#_12","text":"\u51fd\u6570\u4f5c\u4e3a \u4e00\u7b49\u516c\u6c11 \uff0c\u6240\u6709\u4f60\u5bf9\u5176\u4ed6\u53d8\u91cf\u80fd\u64cd\u4f5c\u7684\u4e8b\u60c5\u90fd\u53ef\u4ee5\u5bf9\u51fd\u6570\u8fdb\u884c\u64cd\u4f5c\uff0c\u6bd4\u5982\uff1a \u8d4b\u503c import math a = math . sin a ( math . pi ) \u521b\u5efa \u5728C++\u4e2d\u6211\u4eec\u5fc5\u987b\u8981\u5148\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u624d\u80fd\u591f\u4f7f\u7528\u5b83\uff0cPython\u4e2d\u4f60\u53ef\u4ee5\u76f4\u63a5\u7528lambda\u8868\u8fbe\u5f0f\u521b\u5efa\u51fd\u6570\uff1a # example 1 sum = lambda x , y : x + y sum # example 2 import math sin2 = lambda x : math . sin ( x ) ** 2 sin2 ( math . pi / 3 ) lambda\u8868\u8fbe\u5f0f\u5c31\u662f\u533f\u540d\u51fd\u6570\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u8d4b\u503c\u7ed9\u4efb\u4f55\u53d8\u91cf\uff0clambda\u8868\u8fbe\u5f0f\u53ea\u80fd\u5b9a\u4e49\u4e00\u884c\u8868\u8fbe\u5f0f\u80fd\u5b8c\u6210\u7684\u51fd\u6570\uff0c\u592a\u590d\u6742\u7684\u51fd\u6570\u8fd8\u662f\u5f97\u7528 def \u6765\u5b9a\u4e49\u3002\u4e0d\u8fc7\u8003\u8651\u5230Python\u8bed\u8a00\u7684\u7b80\u6d01\u6027\uff0c\u4e00\u884c\u4ee3\u7801\u4f60\u80fd\u5b8c\u6210\u7684\u4e8b\u60c5\u4e5f\u8fdc\u8fdc\u8d85\u8fc7\u4f60\u73b0\u5728\u7684\u60f3\u8c61\u3002 \u6dfb\u52a0\u5230\u5217\u8868 import math funcs = [ math . sin , math . cos , math . tan ] [ print ( f ( 0.5 )) for f in funcs ] \u4f5c\u4e3a\u51fd\u6570\u53c2\u6570 import math def abs_f ( fun , x ): return abs ( fun ( x )) abs_f ( math . sin , - 0.5 ) \u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u6709\u51e0\u4e2a\u6bd4\u8f83\u5e38\u7528\u7684\u4f8b\u5b50\u3002 \u6392\u5e8f names = [ \"zhang\" , \"wang\" , \"li\" , \"zhao\" ] # \u9ed8\u8ba4\u6392\u5e8f sorted ( names ) # ['li', 'wang', 'zhang', 'zhao'] # \u81ea\u5b9a\u4e49\u6392\u5e8f\u51fd\u6570\uff0c\u8fd9\u91cc\u7528len\u51fd\u6570 sorted ( names , key = len ) # ['li', 'wang', 'zhao', 'zhang'] # \u7528\u81ea\u5df1\u521b\u5efa\u7684\u51fd\u6570 sorted ( names , key = lambda x : - len ( x )) #['zhang', 'wang', 'zhao', 'li'] map import functools \u4f5c\u4e3a\u51fd\u6570\u8fd4\u56de\u503c def add_N ( n : int ): def add ( x ): return x + n return add add_1 = add_N ( 1 ) add_1 ( 1 ) # 2 add_1 ( 3 ) # 4 add_1024 = add_N ( 1024 ) add_1024 ( 3 ) # 1027","title":"\u51fd\u6570\u4f5c\u4e3a\u5bf9\u8c61"},{"location":"2-python-function/#_13","text":"\u95ed\u5305\u662f\u4e2a\u5f88\u6709\u610f\u601d\u7684\u6982\u5ff5\uff0c\u503c\u5f97\u7279\u6b8a\u8bb2\u4e00\u8bb2\u3002 \u4e0a\u9762\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c\u7684\u4f8b\u5b50\u91cc\u5176\u5b9e\u5c31\u7528\u5230\u4e86\u95ed\u5305\uff0c\u6211\u4eec\u91cd\u65b0\u518d\u770b\u4e00\u4e0b\u8fd9\u4e2a\u51fd\u6570\uff1a def add_N ( n : int ): def add ( x ): return x + n return add add_N \u5185\u90e8\u7684\u8fd9\u4e2aadd\u51fd\u6570\uff0c\u5f15\u7528\u4e86\u5b83\u5916\u90e8\u7684\u53d8\u91cf\uff08\u4e5f\u5c31\u662fadd_N\uff09\u7684\u53c2\u6570n\u3002\u5f53\u6211\u4eec\u628aadd\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u5b83\u597d\u50cf \u643a\u5e26 \u4e86n\u8fd9\u4e2a\u53c2\u6570\u4e00\u6837\uff0c\u5728\u540e\u9762\u7684\u4f7f\u7528\u4e2d\u4f9d\u7136\u80fd\u6b63\u786e\u4f7f\u7528\u5b83\u7684\u503c\u3002 \u6211\u4eec\u6307\u5bfc\u51fd\u6570\u90fd\u6709\u81ea\u5df1\u7684\u4f5c\u7528\u57df\uff0c\u53d8\u91cf n \u5728 add_N \u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u57df\u4e4b\u5185\uff0c\u4f46\u662f\u4e0d\u5728 add \u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u57df\u5185\u3002\u4f46\u662f\u5f53\u6211\u4eec\u8fd4\u56de add \u8fd9\u4e2a\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5b83\u628a\u5176\u6240\u5f15\u7528\u7684 \u7236\u4f5c\u7528\u57df \u7684\u53d8\u91cf\u4e5f\u5e26\u4e0a\u4e86\uff0c\u8fd9\u5c31\u662f\u95ed\u5305\u3002 \u5173\u4e8e\u8fd9\u79cd\u4f5c\u7528\u57df\u7684\u6027\u8d28\uff0c\u770b\u8d77\u6765\u6709\u6ca1\u6709\u4e00\u70b9\u719f\u6089\u5462\uff1f\u60f3\u60f3\u5728\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u91cc\u9762\uff0c\u4e00\u4e2a\u5bf9\u8c61\u6709\u81ea\u5df1\u7684\u4f5c\u7528\u57df\uff0c\u5bf9\u8c61\u5185\u90e8\u7684\u65b9\u6cd5\u53ef\u4ee5\u968f\u4fbf\u8bbf\u95ee\u5bf9\u8c61\u5185\u90e8\u7684\u5c5e\u6027\u3002\u5982\u679c\u4f60\u628a\u5bf9\u8c61\u5185\u7684\u65b9\u6cd5\u5f53\u4f5c\u51fd\u6570\u6765\u770b\uff0c\u4f60\u4f1a\u53d1\u73b0\u5bf9\u8c61\u5c5e\u6027\u4e5f\u5e76\u4e0d\u5728\u51fd\u6570\u7684\u4f5c\u7528\u57df\u5185\uff1a \u65e2\u7136\u5728Python\u4e2d\u51fd\u6570\u672c\u8eab\u5c31\u662f\u4e00\u79cd\u5bf9\u8c61\uff0c\u90a3\u4e48\u95ed\u5305\u7684\u652f\u6301\u4e5f\u5c31\u53d8\u5f97\u4e0d\u96be\u7406\u89e3\u4e86\u3002\u5e76\u4e14\u95ed\u5305\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u8ba9\u51fd\u6570\u66ff\u4ee3\u4e86\u7c7b\u7684\u5de5\u4f5c\uff0c\u8fd9\u4e5f\u6b63\u662f\u51fd\u6570\u7f16\u7a0b\u8303\u5f0f\u6240\u8ffd\u6c42\u7684\uff1a\u5c3d\u91cf\u4f7f\u7528\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u7c7b\u3002 \u5229\u7528\u95ed\u5305\u786e\u5b9e\u80fd\u505a\u5f88\u591a\u4e8b\u60c5\uff0c\u4e0b\u9762\u6709\u4e2a\u5c0f\u4f8b\u5b50\uff1a def compose ( f , g ): def fn ( x ): return f ( g ( x )) return fn \u8fd9\u662f\u751f\u6210\u590d\u5408\u51fd\u6570\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u5982\u679c\u4f60\u7ecf\u5e38\u9700\u8981\u8fde\u7eed\u8c03\u7528\u51e0\u4e2a\u51fd\u6570\uff0c\u90a3\u4e48\u4e0d\u59a8\u628a\u4ed6\u4eec\u7ec4\u5408\u8d77\u6765\uff0c\u8fd9\u6837\u4f1a\u8ba9\u4f60\u7684\u4ee3\u7801\u66f4\u7b80\u6d01\u3002","title":"\u95ed\u5305"},{"location":"2-python-function/#_14","text":"\u51fd\u6570\u7f16\u7a0b\u559c\u6b22\u4f7f\u7528\u8fed\u4ee3\u5668\uff0c\u8fed\u4ee3\u5668\u7684\u6982\u5ff5\u5728C++\u4e2d\u4e5f\u6709\uff0c\u4f46","title":"\u8fed\u4ee3\u5668"},{"location":"2-python-function/#_15","text":"\u751f\u6210\u5668 def get_array (): l = [ 1 , 2 , 3 , 4 ] return l # \u4e00\u6b21\u8fd4\u56de\u6240\u6709\u5143\u7d20 for x in get_array (): print ( x ) def get_array (): l = [ 1 , 2 , 3 , 4 ] for x in l : yield x # \u4e00\u6b21\u53ea\u8fd4\u56de\u4e00\u4e2a\u5143\u7d20 for x in get_array (): # \u8fed\u4ee3\u7684\u65f6\u5019\u4e0e\u5217\u8868\u6ca1\u6709\u533a\u522b print ( x ) \u751f\u6210\u5668\u548c\u8fed\u4ee3\u5668\u662f\u4e00\u5bf9\u5144\u5f1f\uff0c\u914d\u5408\u4f7f\u7528\u624d\u6700\u4f73\u3002 \u751f\u6210\u5668","title":"\u751f\u6210\u5668"},{"location":"2-python-function/#_16","text":"\u652f\u6301\u9012\u5f52\u662f\u7f16\u7a0b\u8bed\u8a00\u7684\u57fa\u672c\u8981\u6c42\uff0cPython\u81ea\u7136\u4e5f\u4e0d\u4f8b\u5916\u3002\u6211\u4eec\u5c1d\u8bd5\u7528\u9012\u5f52\u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2cn\u9879\uff1a def fib ( n ): if n < 1 : return None if n == 1 : return 1 elif n == 2 : return 1 else : return fib ( n - 1 ) + fib ( n - 2 ) print ( fib ( 10 )) # output\uff1a # 55","title":"\u9012\u5f52"},{"location":"3-python-class/","text":"\u7c7b\u548c\u9762\u5411\u5bf9\u8c61 \u5b9a\u4e49\u7c7b \u5728Python\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff1a class Bird : pass # \u5f53\u4f60\u4ec0\u4e48\u4e5f\u4e0d\u60f3\u505a\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4f7f\u7528pass \u5728Python3\u4e2d\uff0c\u6240\u6709\u7c7b\u9ed8\u8ba4\u7ee7\u627f\u81eaobject\u7c7b\uff0c\u6240\u4ee5\u867d\u7136\u6211\u4eec\u8fd9\u4e2a\u7c7b\u770b\u8d77\u6765\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u4f46\u5b83\u4e5f\u5305\u542b\u4e86\u4e30\u5bcc\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 dir \u8fd9\u4e2a\u65b9\u6cd5\u6765\u67e5\u770b\u4e00\u4e2a\u7c7b\u6216\u8005\u4e00\u4e2a\u51fd\u6570\u7684\u5185\u90e8\u7ec6\u8282\uff0c\u6253\u5370 dir(Bird) \u7684\u7ed3\u679c\uff0c\u4f60\u4f1a\u770b\u5230\u5982\u4e0b\u5185\u5bb9\uff1a [ '__class__' , '__delattr__' , '__dict__' , '__dir__' , '__doc__' , '__eq__' , '__format__' , '__ge__' , '__getattribute__' , '__gt__' , '__hash__' , '__init__' , '__init_subclass__' , '__le__' , '__lt__' , '__module__' , '__ne__' , '__new__' , '__reduce__' , '__reduce_ex__' , '__repr__' , '__setattr__' , '__sizeof__' , '__str__' , '__subclasshook__' , '__weakref__' ] \u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u4e9b\u9ed8\u8ba4\u63d0\u4f9b\u7684\u65b9\u6cd5\u540d\u524d\u540e\u90fd\u6709\u4e24\u4e2a\u4e0b\u5212\u7ebf\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5728Python\u5185\u88ab\u79f0\u4e3a \u9b54\u6cd5\u65b9\u6cd5 \uff0c\u7528\u6765\u5b9e\u73b0\u4e00\u4e9b\u7279\u6b8a\u7684\u529f\u80fd\uff0c\u4f1a\u5728\u4e00\u4e9b\u7279\u6b8a\u7684\u65f6\u673a\u88ab\u7cfb\u7edf\u8c03\u7528\u3002 \u7ed9\u7c7b\u589e\u52a0\u6210\u5458\u53d8\u91cf \u73b0\u5728\u6211\u4eec\u7ed9\u8fd9\u4e2a\u9e1f\u7c7b\u589e\u52a0\u4e00\u70b9\u4e1c\u897f\uff1a class Bird : color = \"red\" age = 1 childrens = [] Python\u4e2d\u5e76\u6ca1\u6709\u5e38\u91cf\u7684\u6982\u5ff5\uff0c\u6240\u4ee5\u4e00\u5207\u6210\u5458\u90fd\u662f\u53d8\u91cf\u3002\u8fd9\u610f\u5473\u7740\uff0c\u6211\u4eec\u53ef\u4ee5\u968f\u610f\u5bf9\u4ed6\u4eec\u8fdb\u884c\u4fee\u6539\u3002 b = Bird () b . color = \"green\" b . color # green \u7ed9\u7c7b\u589e\u52a0\u65b9\u6cd5 class Bird : color = \"red\" age = 1 childrens = [] def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( self ): self . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. \u5728\u7c7b\u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\uff08method\uff09\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u4e3aself\uff0c\u8fd9\u53cd\u5e94\u4e86\u7c7b\u4e2d\u65b9\u6cd5\u548c\u666e\u901a\u51fd\u6570\u7684\u533a\u522b\uff0c\u8fd9\u4e48\u7ea6\u5b9a\u7684\u539f\u56e0\u540e\u9762\u4f1a\u8bb2\u5230\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\u4e86\uff1a b = Bird () b . eat () b . grow () print ( b . age ) # eat # 2 \u6784\u9020\u65b9\u6cd5 \u5728Python\u91cc\u9762\uff0c\u6784\u9020\u65b9\u6cd5\u7684\u540d\u5b57\u7edf\u4e00\u4e3a__init__\uff0c \u8fd9\u662f\u4e2a\u9b54\u6cd5\u65b9\u6cd5\uff0c\u5728\u4e0a\u9762\u9b54\u6cd5\u65b9\u6cd5\u5217\u8868\u4e2d\u4f60\u80fd\u627e\u5230\u5b83\uff0c\u8fd9\u8bf4\u660e\u5b9a\u4e49\u7c7b\u7684\u65f6\u5019\u9ed8\u8ba4\u5c31\u4f1a\u4eceobject\u7236\u7c7b\u7ee7\u627f\u4e00\u4e2a__init__\u65b9\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u4e2a\u65b9\u6cd5\u57fa\u672c\u4ec0\u4e48\u90fd\u4e0d\u4f1a\u505a\u3002\u5982\u679c\u6211\u4eec\u60f3\u81ea\u5df1\u5b9a\u4e49\u4e00\u4e2a\u6784\u9020\u65b9\u6cd5\uff0c\u90a3\u4e48\u76f4\u63a5\u8986\u76d6\u5b83\u5c31\u597d\uff0c\u4e5f\u5c31\u662f\u91cd\u8f7d\u3002 class Bird : color = \"red\" age = 1 childrens = [] def __init__ ( self ): self . age = 0 # \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u64cd\u4f5c self . color = \"\" def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( self ): self . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. \u73b0\u5728\uff0c\u6784\u9020\u51fd\u6570\u5e2e\u52a9\u6211\u4eec\u505a\u4e86\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u5de5\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u8bd5\u4e00\u4e0b\u6548\u679c\uff1a b = Bird () print ( b . age ) # 0 \u53ef\u4ee5\u770b\u51fa\uff0c\u521d\u59cb\u5316\u4f1a\u8986\u76d6\u521d\u59cb\u5b9a\u4e49\u7684\u53d8\u91cf\u503c\u3002\u6240\u4ee5\u770b\u8d77\u6765\u6700\u5f00\u59cb\u7684\u5b9a\u4e49\u6ca1\u6709\u4ec0\u4e48\u7528\uff0c\u5bf9\u4e0d\u5bf9\uff1f\u4e0d\u5982\u628a\u5b83\u53bb\u6389\u5462\uff1f class Bird : color = \"red\" childrens = [] def __init__ ( self ): self . age = 0 # \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u64cd\u4f5c self . color = \"\" def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( self ): self . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. b = Bird () print ( b . age ) # 0 \u679c\u7136\u53ef\u4ee5\u3002 \u5728C++\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u7684\u65f6\u5019\u603b\u662f\u9700\u8981\u9884\u5148\u5b9a\u4e49\uff0c\u4f46\u662f\u5728Python\u4e2d\u5e76\u4e0d\u9700\u8981\u8fd9\u6837\uff0c\u4f60\u53ea\u9700\u8981\u5728\u7528\u7684\u65f6\u5019\u76f4\u63a5\u7528\u5c31\u53ef\u4ee5\uff0c\u4f7f\u7528\u7684\u540c\u65f6\u4e5f\u5b8c\u6210\u4e86\u5b9a\u4e49\u3002 \u591a\u4e2a\u6784\u9020\u65b9\u6cd5\uff1f \u5728C++\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u7ed9\u4e00\u4e2a\u7c7b\u5b9a\u4e49\u591a\u4e2a\u6784\u9020\u65b9\u6cd5\uff0c\u6765\u6ee1\u8db3\u4e0d\u540c\u573a\u666f\u4e0b\u7684\u9700\u6c42\uff0c\u4e0d\u540c\u7684\u6784\u9020\u65b9\u6cd5\u62e5\u6709\u4e0d\u540c\u7684\u53c2\u6570\u7c7b\u578b\u6216\u53c2\u6570\u4e2a\u6570\uff08\u8fd9\u662f\u4e00\u79cd\u591a\u6001\u7684\u6280\u672f\uff09\u3002\u5728Python\u91cc\u9762\u53ef\u4ee5\u8fd9\u6837\u5417\uff1f\u6211\u4eec\u8bd5\u4e00\u4e0b\uff0c\u770b\u770b\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1a class Bird : color = \"red\" childrens = [] def __init__ ( self ): self . age = 0 # \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u64cd\u4f5c self . color = \"\" def __init__ ( self , age ): # \u53e6\u5916\u4e00\u4e2a\u6784\u9020\u65b9\u6cd5 self . age = age self . color = \"\" def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( self ): self . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. b = Bird () print ( b . age ) \u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u5931\u8d25\u4e86\uff1a --------------------------------------------------------------------------- TypeError Traceback ( most recent call last ) ~ \\A ppData \\L ocal \\T emp/ipykernel_47416/476329091.py in <module> 13 self.age + = 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. 14 ---> 15 b = Bird () 16 print ( b.age ) TypeError: __init__ () missing 1 required positional argument: 'age' \u4ed4\u7ec6\u770b\u9519\u8bef\u4fe1\u606f\uff08 \u8fd9\u5f88\u91cd\u8981\uff0c\u6bcf\u6b21\u51fa\u9519\u7684\u65f6\u5019\u8bb0\u5f97\u90fd\u8981\u5148\u8fd9\u6837\u505a \uff09\uff0cPython\u5728\u544a\u8bc9\u6211\u4eec\u5c11\u8f93\u5165\u4e86age\u8fd9\u4e2a\u53c2\u6570\uff0c\u770b\u8d77\u6765\u4e24\u4e2a\u6784\u9020\u51fd\u6570Python\u53ea\u63a5\u53d7\u7b2c\u4e8c\u4e2a\uff1a b = Bird ( 3 ) print ( b . age ) # 3 \u8fd9\u6837\u8c03\u7528\u4e4b\u540e\u679c\u7136\u6210\u529f\u4e86\uff0c\u4f60\u4f1a\u53d1\u73b0\uff0c\u867d\u7136\u6211\u4eec\u5199\u4e86\u4e24\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u4f46\u662fPython\u53ea\u5b9e\u73b0\u4e86\u7b2c\u4e8c\u4e2a\uff0c\u5176\u5b9e\u7b2c\u4e00\u4e2a\u662f\u88ab\u7b2c\u4e8c\u4e2a\u5077\u5077\u8986\u76d6\u4e86\uff0c\u5e76\u4e14Python\u4e0d\u4f1a\u7ed9\u6211\u4eec\u62a5\u4efb\u4f55\u9519\u8bef\uff0c\u9664\u975e\u4f60\u53bb\u8c03\u7528\u90a3\u4e2a\u5e76\u4e0d\u5b58\u5728\u7684\u6784\u9020\u51fd\u6570\u3002 Python\u8bed\u8a00\u7684\u7279\u6027\u5c31\u662f\u8fd9\u6837\uff0c\u53ea\u6709\u5f53\u4f60\u6267\u884c\u5230\u5177\u4f53\u7684\u4ee3\u7801\u65f6\uff0c\u624d\u4f1a\u66b4\u9732\u51fa\u9519\u8bef\u3002\u6709\u7684\u65f6\u5019\u5f00\u53d1\u5f88\u8fc5\u901f\uff0c\u6d4b\u8bd5\u4e5f\u5f88\u987a\u7545\uff0c\u4f46\u4f9d\u7136\u6709\u4e00\u4e9b\u95ee\u9898\u88ab\u9690\u85cf\u8d77\u6765\u4e86\uff0c\u53ea\u6709\u5728\u8fd0\u884c\u7684\u65f6\u5019\u624d\u4f1a\u66b4\u9732\u3002Python\u4f5c\u4e3a\u4e00\u95e8\u811a\u672c\u8bed\u8a00\uff0c\u52a8\u6001\u89e3\u91ca\u6267\u884c\uff0c\u56fa\u7136\u6709\u8db3\u591f\u591a\u7684\u4f18\u70b9\uff0c\u4f46\u662f\u76f8\u6bd4\u4e8e\u7f16\u8bd1\u8bed\u8a00\u8fd8\u662f\u6709\u4e00\u4e9b\u7f3a\u70b9\u7684\uff0c\u4f7f\u7528\u7684\u65f6\u5019\u9700\u8981\u6ce8\u610f\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u5982\u4f55\u5b9e\u73b0\u591a\u4e2a\u6784\u9020\u51fd\u6570\u5462\uff1f \u4ed4\u7ec6\u60f3\u60f3\uff0c\u6211\u4eec\u9700\u8981\u7684\u5e76\u4e0d\u4e00\u5b9a\u662f\u591a\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u6211\u4eec\u9700\u8981\u7684\u662f\u5728\u4e0d\u540c\u573a\u666f\u4e0b\u5b8c\u6210\u4e0d\u540c\u7684\u6784\u9020\u3002\u56e0\u4e3aPython\u53ef\u63a5\u53d7\u7684\u53c2\u6570\u975e\u5e38\u7075\u6d3b\uff0c\u6240\u4ee5\u5f88\u591a\u9700\u6c42\u5b8c\u5168\u53ef\u4ee5\u5728\u4e00\u4e2a\u51fd\u6570\u5185\u5b9e\u73b0\u3002 \u6bd4\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u9ed8\u8ba4\u53c2\u6570\uff1a class Bird : color = \"red\" childrens = [] def __init__ ( self , age = 0 ): self . age = age # \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u64cd\u4f5c self . color = \"\" def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( self ): self . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. \u8fd8\u6709\u66f4\u7075\u6d3b\u7684\u65b9\u5f0f\uff0c class Bird : color = \"red\" childrens = [] def __init__ ( self , * args , ** kwargs ): if \"age\" in kwargs : self . age = kwargs [ \"age\" ] # \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u64cd\u4f5c else : self . age = 0 self . color = \"\" def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( self ): self . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. b = Bird ( age = 3 ) print ( b . age ) # 3 \u6240\u4ee5\u5728Python\u4e2d\u6709\u5f88\u591a\u7075\u6d3b\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u8fd9\u4e9b\u9700\u6c42\u3002 \u9759\u6001\u6210\u5458\u53d8\u91cf C++\u4e2d\u6709\u9759\u6001\u6210\u5458\u53d8\u91cf\uff0c\u53ef\u4ee5\u5728\u4e0d\u5bf9\u7c7b\u8fdb\u884c\u5b9e\u4f8b\u5316\u7684\u60c5\u51b5\u4e0b\u8c03\u7528\uff0cPython\u4e2d\u6709\u6ca1\u6709\u5462\uff1f\u6211\u4eec\u91cd\u65b0\u770b\u4e00\u4e0b\u8fd9\u4e2a\u7c7b\u7684\u5b9a\u4e49\uff0c class Bird : color = \"red\" age = 1 childrens = [] \u6211\u4eec\u8bd5\u4e00\u4e0b\u76f4\u63a5\u8bbf\u95ee\u8fd9\u4e9b\u53d8\u91cf\uff1a Bird . color # red Bird . age # 1 \u6240\u4ee5\uff0c\u5728\u7c7b\u4e2d\u76f4\u63a5\u5b9a\u4e49\u7684\u6210\u5458\u53d8\u91cf\u9ed8\u8ba4\u90fd\u4e0e\u53ef\u4ee5\u901a\u8fc7\u7c7b\u540d\u8bbf\u95ee\uff0c\u7b49\u4ef7\u4e8eC++\u4e2d\u7684\u9759\u6001\u53d8\u91cf\u3002 class Bird : color = \"red\" childrens = [] def __init__ ( self ): self . age = 0 # \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u64cd\u4f5c self . color = \"green\" def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( self ): self . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. b = Bird () print ( b . color ) print ( Bird . color ) print ( b . age ) print ( Bird . age ) green red 0 --------------------------------------------------------------------------- AttributeError Traceback ( most recent call last ) ~ \\A ppData \\L ocal \\T emp/ipykernel_47416/519595942.py in <module> 14 print ( Bird.color ) 15 print ( b.age ) ---> 16 print ( Bird.age ) AttributeError: type object 'Bird' has no attribute 'age' \u6ce8\u610f\u89c2\u5bdf\uff0c\u8fd9\u91cc\u6211\u4eec\u770b\u5230\u4e86\u4e24\u4e2a\u6709\u610f\u601d\u7684\u73b0\u8c61\uff1a - \u901a\u8fc7\u7c7b\u540d\u8bbf\u95eecolor\u548c\u901a\u8fc7\u5bf9\u8c61\u8bbf\u95eecolor\uff0c\u5f97\u5230\u7684\u503c\u4e0d\u4e00\u6837 - \u5728\u7c7b\u65b9\u6cd5\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cfage\uff0c\u901a\u8fc7\u7c7b\u540d\u662f\u65e0\u6cd5\u8bbf\u95ee\u7684 \u7c7b\u5bf9\u8c61\u548c\u5b9e\u4f8b\u5bf9\u8c61 Python\u7684\u4ee3\u7801\u5728\u7f16\u8bd1\u65f6\uff0c\u65e0\u8bba\u662f\u51fd\u6570\uff0c\u8fd8\u662f\u7c7b\uff0c\u90fd\u751f\u6210\u4e86\u76f8\u5e94\u7684\u5bf9\u8c61\uff0c\u65e0\u8bba\u8fd9\u4e2a\u7c7b\u662f\u5426\u5b9e\u4f8b\u5316\uff0c\u90fd\u751f\u6210\u4e86\u7c7b\u5bf9\u8c61\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u5728\u4e0d\u521b\u5efa\u65b0\u5bf9\u8c61\u7684\u524d\u63d0\u4e0b\u4f60\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u7c7b\u91cc\u9762\u7684\u5185\u5bb9\u3002\u90a3\u4e48\u8fd9\u4e2a\u7c7b\u5bf9\u8c61\u548c\u624b\u52a8\u521b\u5efa\u7684\u65b0\u5bf9\u8c61\u4e4b\u95f4\u6709\u4ec0\u4e48\u533a\u522b\u5462\uff1f class Bird : pass b = Bird () # type print ( type ( Bird )) print ( type ( b )) # <class 'type'> # <class '__main__.Bird'> \u6211\u4eec\u770b\u5230\u4ed6\u4eec\u7684\u7c7b\u578b\uff08type\uff09\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u5728\u6ca1\u6709\u5b9e\u4f8b\u5316\u4e4b\u524d\uff0c\u7c7b\u5bf9\u8c61\u7684\u7c7b\u578b\u7edf\u4e00\u4e3a \"type\"\u3002\u6211\u4eec\u518d\u76f4\u63a5\u6253\u5370\u4ed6\u4eec\uff0c\u770b\u770b\u4ed6\u4eec\u4f1a\u8f93\u51fa\u4ec0\u4e48\uff1a class Bird : pass b = Bird () print (( Bird )) print (( b )) # <class '__main__.Bird'> # <__main__.Bird object at 0x000001DEAD20D6A0> \u6253\u5370\u5bf9\u8c61\u5b9e\u9645\u4e0a\u8c03\u7528\u4e86\u5bf9\u8c61\u7684\u9b54\u6cd5\u65b9\u6cd5\uff1a__str__(), str(obj)\u51fd\u6570\u4e5f\u4f1a\u8c03\u7528\u8fd9\u4e00\u9b54\u6cd5\u65b9\u6cd5\uff0c\u5982\u679c\u4f60\u5e0c\u671b\u5c06object\u8f6c\u6210\u81ea\u5b9a\u4e49\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u8fd9\u4e00\u65b9\u6cd5\u3002 \u6253\u5370\u7c7b\u540d\u5f97\u5230\u4e00\u4e2aclass\u7684\u63cf\u8ff0\uff08\u548ctype(b)\u7684\u8f93\u51fa\u4e00\u6837\uff01\uff0c\u60f3\u60f3\u4e3a\u4ec0\u4e48\uff1f\uff09\uff0c \u6253\u5370\u521b\u5efa\u7684\u5bf9\u8c61\u5e26\u6709\u989d\u5916\u7684\u5730\u5740\u4fe1\u606f\uff0c\u8fd9\u4e2a\u5730\u5740\u5c31\u662f\u5bf9\u8c61\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u3002 \u603b\u4e4b\uff0c\u7c7b\u5bf9\u8c61\u548c\u5b9e\u4f8b\u5316\u7684\u5bf9\u8c61\u4e4b\u95f4\u8fd8\u662f\u6709\u533a\u522b\u7684\u3002 \u7c7b\u5bf9\u8c61\u5c31\u662f\u4e00\u4e2a\u9759\u6001\u5bf9\u8c61\uff0c\u53ef\u4ee5\u7c7b\u6bd4\u4e8eC++\u4e2d\u7684\u9759\u6001\u7c7b\u3002\u6240\u4ee5\uff0c\u5728Python\u4e2d\u4f60\u4e0d\u9700\u8981\u521b\u5efa\u9759\u6001\u6210\u5458\u548c\u9759\u6001\u65b9\u6cd5\uff0c\u7c7b\u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u53d8\u91cf\u548c\u65b9\u6cd5\u90fd\u662f\u9759\u6001\u7684\uff0c\u542c\u8d77\u6765\u662f\u4e0d\u662f\u6709\u70b9\u4e0d\u53ef\u601d\u8bae\uff1f\u6211\u4eec\u81ea\u5df1\u9a8c\u8bc1\u4e00\u4e0b\u662f\u5426\u786e\u5b9e\u5982\u6b64\uff1a class Bird : color = \"red\" childrens = [] def __init__ ( self ): self . age = 0 # \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u64cd\u4f5c self . color = \"green\" def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( self ): self . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. print ( Bird . color ) # red print ( Bird . childrens ) # [] print ( Bird . age ) # AttributeError: type object 'Bird' has no attribute 'age' ! \u6ce8\u610f\uff0c\u601d\u8003\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u8bbf\u95ee age\uff1f Bird . eat () # TypeError: eat() missing 1 required positional argument: 'self' \uff1f \u4e3a\u4ec0\u4e48\u4f1a\u5931\u8d25 \u4e0d\u662f\u8bf4\u597d\u4e86\u7c7b\u5bf9\u8c61\u4e2d\u7684\u6240\u6709\u65b9\u6cd5\u90fd\u662f\u9759\u6001\u65b9\u6cd5\u5417\uff0c\u4e3a\u4ec0\u4e48\u8c03\u7528eat\u65b9\u6cd5\u4f1a\u5931\u8d25\u5462\uff1f \u4ed4\u7ec6\u9605\u8bfb\u9519\u8bef\u63d0\u793a\uff01Python\u544a\u8bc9\u6211\u4eec\uff0c\u6211\u4eec\u5c11\u8f93\u5165\u4e86\u4e00\u4e2a\u53c2\u6570\u3002\u90a3\u5982\u679c\u6211\u4eec\u968f\u4fbf\u4f20\u5165\u4e00\u4e2a\u53c2\u6570\u5462\uff1f Bird . eat ( 1 ) # eat \u5c45\u7136\u8c03\u7528\u6210\u529f\u4e86\uff01 \u5b9e\u9645\u4e0a\uff0c\u56e0\u4e3aeat\u65b9\u6cd5\u4e2d\u5e76\u6ca1\u6709\u4f7f\u7528self\u8fd9\u4e2a\u53c2\u6570\uff0c\u6240\u4ee5\u4f60\u4f20\u5165\u4efb\u4f55\u4e1c\u897f\u90fd\u53ef\u4ee5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u8fd8\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002 \u90a3\u4e48\u8bf7\u601d\u8003\u4e00\u4e0b\uff0c\u4e3a\u4ec0\u4e48\u5728\u5b9e\u4f8b\u5316\u540e\u7684\u5bf9\u8c61\u4e0a\u9762\u8c03\u7528eat\u65b9\u6cd5\u5c31\u4e0d\u9700\u8981\u4f20\u5165\u53c2\u6570\u5462\uff1f \u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u662fPython\u5077\u5077\u5e2e\u52a9\u6211\u4eec\u7ed9\u65b9\u6cd5\u4f20\u5165\u4e86\u8fd9\u4e00\u4e2a\u53c2\u6570\u3002\u8bf7\u8bb0\u4f4f\uff0c\u8fd9\u6b63\u662f\u65b9\u6cd5\u548c\u51fd\u6570\u7684\u91cd\u8981\u533a\u522b\u4e4b\u4e00\uff01 \u5bf9\u8c61\u5728\u8c03\u7528\u65b9\u6cd5\u7684\u65f6\u5019\u4f1a\u5077\u5077\u4f20\u5165\u4e00\u4e2a\u53c2\u6570\u653e\u5230\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u90a3\u4e48\u8fd9\u4e2aself\u53c2\u6570\u7a76\u7adf\u662f\u4ec0\u4e48\u5462\uff1f \u6211\u4eec\u5728\u4e0a\u9762\u63d0\u5230\u8fc7\uff0c\u53ef\u4ee5\u628a\u5b83\u7c7b\u6bd4\u4e8eC++\u7684this\u3002\u4e3a\u4e86\u63a2\u7a76\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u4e0d\u59a8\u518d\u505a\u70b9\u5b9e\u9a8c\uff1a Bird . grow ( 1 ) # \u5982\u6cd5\u70ae\u5236\uff0c\u5c1d\u8bd5\u8c03\u7528grow\u65b9\u6cd5 # AttributeError: 'int' object has no attribute 'age' \u8fd9\u4e00\u6b21\u6211\u4eec\u5931\u8d25\u4e86\uff0cPython\u544a\u8bc9\u6211\u4eec int \u5bf9\u8c61\u6ca1\u6709age\u5c5e\u6027\u3002\u56e0\u4e3a\u6211\u4eec\u5728grow\u51fd\u6570\u4e2d\u4f7f\u7528\u4e86self\u8fd9\u4e2a\u53c2\u6570\uff0c\u5e76\u4e14\u8c03\u7528\u4e86self\u7684\u5c5e\u6027 self.age\u3002\u6211\u4eec\u4f20\u5165\u4e86\u4e00\u4e2a\u6574\u65701\uff0c\u4e8e\u662f\u62a5\u4e86\u4e0a\u9762\u7684\u9519\u8bef\u3002\u800c\u5f53\u4f60\u8c03\u7528 b.grow() \u7684\u65f6\u5019\uff0c\u60c5\u51b5\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u9996\u5148\uff0c\u5728\u521b\u5efa\u5bf9\u8c61b\u7684\u65f6\u5019\u4f1a\u8c03\u7528\u6784\u9020\u65b9\u6cd5__init__\uff0c \u5728\u90a3\u91cc\u4f1a\u521b\u5efaage\u8fd9\u4e2a\u5c5e\u6027\uff0c\u7136\u540ePython\u4f1a\u628a\u5bf9\u8c61\u672c\u8eab\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u5230grow\uff0cself\u81ea\u7136\u4e5f\u5c31\u5177\u6709\u4e86\u8fd9\u4e2a\u5c5e\u6027\u3002\u8c03\u7528self.age\u5c31\u597d\u6bd4c++\u4e2d\u8c03\u7528this->age\u3002 \u5230\u8fd9\u91cc\u8fd8\u6ca1\u7ed3\u675f\u2026\u2026 \u6211\u4eec\u518d\u60f3\u60f3\uff0cPython\u7ed9\u6211\u4eec\u7684\u9519\u8bef\u63d0\u793a\u53ea\u662f\u8bf4\uff1a 'int' object has no attribute 'age'\uff0c \u53ef\u6ca1\u6709\u8bf4\u5fc5\u987b\u8981\u4f20\u5165\u4e00\u4e2aBird\u7684\u5bf9\u8c61\u8fdb\u6765\u554a\uff1f \u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u4ee3\u7801\uff1a class VirtualBird : age = 100 class Bird : color = \"red\" childrens = [] def __init__ ( self ): self . age = 0 # \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u64cd\u4f5c self . color = \"green\" def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( self ): self . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. print ( self . age ) Bird . grow ( VirtualBird ) # 101 \u6211\u4eec\u7528\u4e00\u4e2a\u201c\u5047\u9e1f\u201d\u6210\u529f\u6b3a\u9a97\u4e86Python\uff01\u770b\u8d77\u6765\uff0cself\u8fd9\u4e2a\u53c2\u6570\u4ec5\u4ec5\u662f\u4e00\u4e2a\u53c2\u6570\uff0cPython\u7ea6\u5b9a\u4f1a\u5728\u8c03\u7528\u65b9\u6cd5\u7684\u65f6\u5019\u628a\u5bf9\u8c61\u672c\u8eab\u4f20\u8fdb\u6765\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4f20\u8fdb\u6765\u522b\u7684\u4e1c\u897f\uff0c\u53ea\u8981\u4fdd\u8bc1\u65b9\u6cd5\u672c\u8eab\u80fd\u6b63\u5e38\u5de5\u4f5c\uff01 Python\u91cc\u9762\u6709\u5f88\u591a\u7684\u7ea6\u5b9a\uff0c\u4f60\u53ef\u4ee5\u9075\u5b88\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u9075\u5b88 \uff0c\u751a\u81f3self\u8fd9\u4e2a\u53c2\u6570\u547d\u4e5f\u662f\u7ea6\u5b9a! \u4e0d\u4fe1\u4f60\u770b\uff1a class VirtualBird : age = 100 class Bird : color = \"red\" childrens = [] def __init__ ( self ): self . age = 0 # \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u64cd\u4f5c self . color = \"green\" def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( you ): you . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. print ( you . age ) Bird . grow ( VirtualBird ) # 101 Python\u771f\u662f\u4e00\u95e8\u81ea\u7531\u7684\u8bed\u8a00\uff0c\u5982\u679c\u548cC++\u76f8\u6bd4\uff0c\u5728\u8fd9\u91cc\u4f60\u4eff\u4f5b\u5b8c\u5168\u4e0d\u53d7\u675f\u7f1a\u4e86\u3002\u4e0d\u8fc7\u8981\u5c0f\u5fc3\uff0c\u81ea\u7531\u4e5f\u662f\u6709\u4ee3\u4ef7\u7684\uff0c\u4ed6\u4f1a\u8ba9\u6709\u4e9b\u9519\u8bef\u66f4\u52a0\u9690\u853d\uff0c\u5199\u4ee3\u7801\u7684\u65f6\u5019\u53ef\u4e0d\u8981\u5927\u610f\u4e86\u3002 \u4e8e\u662f\uff0c\u7c7b\u5bf9\u8c61\u4e0b\u9762\u7684\u65b9\u6cd5\u90fd\u662f\u9759\u6001\u65b9\u6cd5\uff08\u4e25\u683c\u6765\u8bf4\u5e94\u8be5\u53eb\u51fd\u6570\uff0c\u4e0b\u9762\u4f1a\u6709\u8bf4\u660e\uff09\uff0c\u5373\u4f7f\u662f\u5e26self\u53c2\u6570\u7684\u4e5f\u662f\u5982\u6b64\u3002 Python\u7c7b\u5bf9\u8c61 1. Python\u662f\u811a\u672c\u8bed\u8a00\uff0cPythonn\u7684\u4ee3\u7801\u5728\u7f16\u8bd1\u65f6\uff0c\u65e0\u8bba\u662f\u51fd\u6570\uff0c\u8fd8\u662f\u7c7b\uff0c\u90fd\u751f\u6210\u4e86\u76f8\u5e94\u7684\u5bf9\u8c61\uff0c\u65e0\u8bba\u8fd9\u4e2a\u7c7b\u662f\u5426\u5b9e\u4f8b\u5316\uff0c\u90fd\u751f\u6210\u4e86\u7c7b\u5bf9\u8c61 2. Python\u7c7b\u5bf9\u8c61\u662f\u4e00\u4e2a\u9759\u6001\u5bf9\u8c61,\u4e00\u65e6\u751f\u6210\uff0c\u5c31\u4e0d\u518d\u53d8\u5316 3. \u7c7b\u5bf9\u8c61\u751f\u6210\u65f6\uff0cinit\u6784\u9020\u51fd\u6570\u6ca1\u6709\u8fd0\u884c,\u6240\u4ee5\u8c03\u7528\u7c7b\u65b9\u6cd5\u65f6\uff0cinit\u6784\u9020\u65b9\u6cd5\u7684\u5b9e\u4f8b\u5c5e\u6027\u4e0d\u5b58\u5728\uff0c\u4e0d\u53ef\u4ee5\u8c03\u7528init\u65b9\u6cd5\u4e2dself.xxx\u5b9e\u4f8b\u5c5e\u6027 4. \u7c7b\u5c5e\u6027\u662f\u7c7b\u5bf9\u8c61\u7684\u9759\u6001\u53d8\u91cf 5. \u7c7b\u65b9\u6cd5/\u51fd\u6570\u662f\u7c7b\u5bf9\u8c61\u7684\u9759\u6001\u65b9\u6cd5 \u5f53\u4e00\u4e2a\u7c7b\u88ab\u5b9e\u4f8b\u5316\u540e\uff0c\u4f1a\u8c03\u7528init\u65b9\u6cd5\uff0c\u7136\u540e\u5728\u5185\u5b58\u4e2d\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\uff0c\u62e5\u6709\u4e00\u4efd\u5c5e\u4e8e\u81ea\u5df1\u7684\u5c5e\u6027\uff0c\u548c\u7c7b\u5bf9\u8c61\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\u3002 class Bird : color = \"red\" age = 1 childrens = [] def __init__ ( self ): self . age = 0 # \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u64cd\u4f5c self . color = \"green\" def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( self ): self . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. b = Bird () print ( b . color ) print ( Bird . color ) # green # red \u53ef\u4ee5\u770b\u51fa\uff0c\u6539\u53d8\u5b9e\u4f8b\u5bf9\u8c61\u7684\u5c5e\u6027\u503c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u7c7b\u5bf9\u8c61\u7684\u5c5e\u6027\u503c\u3002 \u9759\u6001\u65b9\u6cd5 \u56de\u987e\u4e00\u4e0b\u6211\u4eec\u4e0a\u9762\u8c03\u7528\u7c7b\u5bf9\u8c61\u9759\u6001\u65b9\u6cd5\u7684\u65b9\u5f0f\uff1a\u5728\u8c03\u7528eat\u65b9\u6cd5\u7684\u65f6\u5019\u5fc5\u987b\u4f20\u5165\u4e00\u4e2adummy\u7684\u53c2\u6570\uff0c\u8fd9\u770b\u8d77\u6765\u975e\u5e38\u4e0d\u65b9\u4fbf\uff0c\u5982\u679c\u6211\u4eec\u786e\u5b9a\u8fd9\u662f\u4e00\u4e2a\u7c7b\u7684\u9759\u6001\uff0c\u65b9\u6cd5\uff0c\u662f\u5426\u53ef\u4ee5\u4e0d\u8981self\u8fd9\u4e2a\u53c2\u6570\u5462\uff1f class Bird : def eat (): print ( \"eat\" ) Bird . eat () # eat \u786e\u5b9e\u53ef\u4ee5\uff0c\u8fd9\u6837\u770b\u8d77\u6765\u81ea\u7136\u591a\u4e86\u3002\u4e0d\u8fc7\u8fd9\u5e26\u6765\u4e86\u65b0\u7684\u95ee\u9898\uff1a class Bird : def fly ( self ): print ( \"bird fly\" ) def eat (): print ( \"eat\" ) b = Bird () b . fly () b . eat () # bird fly # TypeError: eat() takes 0 positional arguments but 1 was given \u5982\u679c\u8fd9\u6837\u5b9a\u4e49\uff0c\u5b9e\u4f8b\u5bf9\u8c61\u5c31\u65e0\u6cd5\u8c03\u7528\u8fd9\u4e00\u65b9\u6cd5\u4e86\uff0c\u56e0\u4e3a\u5b9e\u4f8b\u5bf9\u8c61\u5728\u8c03\u7528\u7684\u65f6\u5019\u603b\u662f\u5077\u5077\u4f20\u5165\u4e86\u4e00\u4e2a\u53c2\u6570\u3002\u5728C++\u91cc\u9762\uff0c\u9759\u6001\u65b9\u6cd5\u4e0d\u7ba1\u7528\u7c7b\u540d\u8fd8\u662f\u65b0\u5efa\u7684\u5bf9\u8c61\u90fd\u53ef\u4ee5\u6b63\u5e38\u8c03\u7528\uff0c\u5728Python\u91cc\u9762\u5c31\u4e0d\u80fd\u6709\u7c7b\u4f3c\u7684\u65b9\u6cd5\u5417\uff1f\u5f53\u7136\u6709,\u800c\u4e14\u5b9e\u73b0\u8d77\u6765\u5f88\u7b80\u5355: class Bird : def fly ( self ): print ( \"bird fly\" ) @staticmethod def eat (): print ( \"eat\" ) Bird . eat () b = Bird () b . fly () b . eat () # eat # bird fly # eat \u53ef\u4ee5\u770b\u5230,\u73b0\u5728\u4e0d\u7ba1\u600e\u4e48\u8c03\u7528\u9e1f\u513f\u90fd\u53ef\u6b63\u5e38\u5403\u4e86. \u88c5\u9970\u5668/\u6ce8\u89e3 \u8fd9\u4e2a @staticmethod \u770b\u8d77\u6765\u6709\u70b9\u795e\u79d8,\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u5462? \u4f60\u53ef\u4ee5\u81ea\u5df1\u5199\u4e00\u4e2a\u88c5\u9970\u5668: \u88c5\u9970\u5668\u628a\u65b9\u6cd5\u53d8\u6210\u4e86\u51fd\u6570~ \u65b9\u6cd5\u548c\u51fd\u6570\u7684\u533a\u522b \u9b54\u6cd5\u65b9\u6cd5:__get__ \u7c7b\u65b9\u6cd5 \u7c7b\u65b9\u6cd5\u548c\u9759\u6001\u65b9\u6cd5\u4e4b\u95f4\u6709\u4e00\u4e9b\u533a\u522b, \u5b9a\u4e49\u5728class\u4e2d\u7684\u51fd\u6570\uff0c\u5728\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u624d\u4f1a\u53d8\u6210\u65b9\u6cd5\uff0c\u5426\u5219\u5b83\u4f9d\u7136\u53ea\u662f\u4e2a\u51fd\u6570\u3002 \u7c7b\u7ee7\u627f \u8c03\u7528\u8d85\u7c7b\u65b9\u6cd5 Override \u5f02\u5e38","title":"\u7c7b"},{"location":"3-python-class/#_1","text":"","title":"\u7c7b\u548c\u9762\u5411\u5bf9\u8c61"},{"location":"3-python-class/#_2","text":"\u5728Python\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff1a class Bird : pass # \u5f53\u4f60\u4ec0\u4e48\u4e5f\u4e0d\u60f3\u505a\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4f7f\u7528pass \u5728Python3\u4e2d\uff0c\u6240\u6709\u7c7b\u9ed8\u8ba4\u7ee7\u627f\u81eaobject\u7c7b\uff0c\u6240\u4ee5\u867d\u7136\u6211\u4eec\u8fd9\u4e2a\u7c7b\u770b\u8d77\u6765\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u4f46\u5b83\u4e5f\u5305\u542b\u4e86\u4e30\u5bcc\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 dir \u8fd9\u4e2a\u65b9\u6cd5\u6765\u67e5\u770b\u4e00\u4e2a\u7c7b\u6216\u8005\u4e00\u4e2a\u51fd\u6570\u7684\u5185\u90e8\u7ec6\u8282\uff0c\u6253\u5370 dir(Bird) \u7684\u7ed3\u679c\uff0c\u4f60\u4f1a\u770b\u5230\u5982\u4e0b\u5185\u5bb9\uff1a [ '__class__' , '__delattr__' , '__dict__' , '__dir__' , '__doc__' , '__eq__' , '__format__' , '__ge__' , '__getattribute__' , '__gt__' , '__hash__' , '__init__' , '__init_subclass__' , '__le__' , '__lt__' , '__module__' , '__ne__' , '__new__' , '__reduce__' , '__reduce_ex__' , '__repr__' , '__setattr__' , '__sizeof__' , '__str__' , '__subclasshook__' , '__weakref__' ] \u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u4e9b\u9ed8\u8ba4\u63d0\u4f9b\u7684\u65b9\u6cd5\u540d\u524d\u540e\u90fd\u6709\u4e24\u4e2a\u4e0b\u5212\u7ebf\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5728Python\u5185\u88ab\u79f0\u4e3a \u9b54\u6cd5\u65b9\u6cd5 \uff0c\u7528\u6765\u5b9e\u73b0\u4e00\u4e9b\u7279\u6b8a\u7684\u529f\u80fd\uff0c\u4f1a\u5728\u4e00\u4e9b\u7279\u6b8a\u7684\u65f6\u673a\u88ab\u7cfb\u7edf\u8c03\u7528\u3002","title":"\u5b9a\u4e49\u7c7b"},{"location":"3-python-class/#_3","text":"\u73b0\u5728\u6211\u4eec\u7ed9\u8fd9\u4e2a\u9e1f\u7c7b\u589e\u52a0\u4e00\u70b9\u4e1c\u897f\uff1a class Bird : color = \"red\" age = 1 childrens = [] Python\u4e2d\u5e76\u6ca1\u6709\u5e38\u91cf\u7684\u6982\u5ff5\uff0c\u6240\u4ee5\u4e00\u5207\u6210\u5458\u90fd\u662f\u53d8\u91cf\u3002\u8fd9\u610f\u5473\u7740\uff0c\u6211\u4eec\u53ef\u4ee5\u968f\u610f\u5bf9\u4ed6\u4eec\u8fdb\u884c\u4fee\u6539\u3002 b = Bird () b . color = \"green\" b . color # green","title":"\u7ed9\u7c7b\u589e\u52a0\u6210\u5458\u53d8\u91cf"},{"location":"3-python-class/#_4","text":"class Bird : color = \"red\" age = 1 childrens = [] def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( self ): self . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. \u5728\u7c7b\u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\uff08method\uff09\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u4e3aself\uff0c\u8fd9\u53cd\u5e94\u4e86\u7c7b\u4e2d\u65b9\u6cd5\u548c\u666e\u901a\u51fd\u6570\u7684\u533a\u522b\uff0c\u8fd9\u4e48\u7ea6\u5b9a\u7684\u539f\u56e0\u540e\u9762\u4f1a\u8bb2\u5230\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\u4e86\uff1a b = Bird () b . eat () b . grow () print ( b . age ) # eat # 2","title":"\u7ed9\u7c7b\u589e\u52a0\u65b9\u6cd5"},{"location":"3-python-class/#_5","text":"\u5728Python\u91cc\u9762\uff0c\u6784\u9020\u65b9\u6cd5\u7684\u540d\u5b57\u7edf\u4e00\u4e3a__init__\uff0c \u8fd9\u662f\u4e2a\u9b54\u6cd5\u65b9\u6cd5\uff0c\u5728\u4e0a\u9762\u9b54\u6cd5\u65b9\u6cd5\u5217\u8868\u4e2d\u4f60\u80fd\u627e\u5230\u5b83\uff0c\u8fd9\u8bf4\u660e\u5b9a\u4e49\u7c7b\u7684\u65f6\u5019\u9ed8\u8ba4\u5c31\u4f1a\u4eceobject\u7236\u7c7b\u7ee7\u627f\u4e00\u4e2a__init__\u65b9\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u4e2a\u65b9\u6cd5\u57fa\u672c\u4ec0\u4e48\u90fd\u4e0d\u4f1a\u505a\u3002\u5982\u679c\u6211\u4eec\u60f3\u81ea\u5df1\u5b9a\u4e49\u4e00\u4e2a\u6784\u9020\u65b9\u6cd5\uff0c\u90a3\u4e48\u76f4\u63a5\u8986\u76d6\u5b83\u5c31\u597d\uff0c\u4e5f\u5c31\u662f\u91cd\u8f7d\u3002 class Bird : color = \"red\" age = 1 childrens = [] def __init__ ( self ): self . age = 0 # \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u64cd\u4f5c self . color = \"\" def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( self ): self . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. \u73b0\u5728\uff0c\u6784\u9020\u51fd\u6570\u5e2e\u52a9\u6211\u4eec\u505a\u4e86\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u5de5\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u8bd5\u4e00\u4e0b\u6548\u679c\uff1a b = Bird () print ( b . age ) # 0 \u53ef\u4ee5\u770b\u51fa\uff0c\u521d\u59cb\u5316\u4f1a\u8986\u76d6\u521d\u59cb\u5b9a\u4e49\u7684\u53d8\u91cf\u503c\u3002\u6240\u4ee5\u770b\u8d77\u6765\u6700\u5f00\u59cb\u7684\u5b9a\u4e49\u6ca1\u6709\u4ec0\u4e48\u7528\uff0c\u5bf9\u4e0d\u5bf9\uff1f\u4e0d\u5982\u628a\u5b83\u53bb\u6389\u5462\uff1f class Bird : color = \"red\" childrens = [] def __init__ ( self ): self . age = 0 # \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u64cd\u4f5c self . color = \"\" def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( self ): self . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. b = Bird () print ( b . age ) # 0 \u679c\u7136\u53ef\u4ee5\u3002 \u5728C++\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u7684\u65f6\u5019\u603b\u662f\u9700\u8981\u9884\u5148\u5b9a\u4e49\uff0c\u4f46\u662f\u5728Python\u4e2d\u5e76\u4e0d\u9700\u8981\u8fd9\u6837\uff0c\u4f60\u53ea\u9700\u8981\u5728\u7528\u7684\u65f6\u5019\u76f4\u63a5\u7528\u5c31\u53ef\u4ee5\uff0c\u4f7f\u7528\u7684\u540c\u65f6\u4e5f\u5b8c\u6210\u4e86\u5b9a\u4e49\u3002","title":"\u6784\u9020\u65b9\u6cd5"},{"location":"3-python-class/#_6","text":"\u5728C++\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u7ed9\u4e00\u4e2a\u7c7b\u5b9a\u4e49\u591a\u4e2a\u6784\u9020\u65b9\u6cd5\uff0c\u6765\u6ee1\u8db3\u4e0d\u540c\u573a\u666f\u4e0b\u7684\u9700\u6c42\uff0c\u4e0d\u540c\u7684\u6784\u9020\u65b9\u6cd5\u62e5\u6709\u4e0d\u540c\u7684\u53c2\u6570\u7c7b\u578b\u6216\u53c2\u6570\u4e2a\u6570\uff08\u8fd9\u662f\u4e00\u79cd\u591a\u6001\u7684\u6280\u672f\uff09\u3002\u5728Python\u91cc\u9762\u53ef\u4ee5\u8fd9\u6837\u5417\uff1f\u6211\u4eec\u8bd5\u4e00\u4e0b\uff0c\u770b\u770b\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1a class Bird : color = \"red\" childrens = [] def __init__ ( self ): self . age = 0 # \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u64cd\u4f5c self . color = \"\" def __init__ ( self , age ): # \u53e6\u5916\u4e00\u4e2a\u6784\u9020\u65b9\u6cd5 self . age = age self . color = \"\" def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( self ): self . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. b = Bird () print ( b . age ) \u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u5931\u8d25\u4e86\uff1a --------------------------------------------------------------------------- TypeError Traceback ( most recent call last ) ~ \\A ppData \\L ocal \\T emp/ipykernel_47416/476329091.py in <module> 13 self.age + = 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. 14 ---> 15 b = Bird () 16 print ( b.age ) TypeError: __init__ () missing 1 required positional argument: 'age' \u4ed4\u7ec6\u770b\u9519\u8bef\u4fe1\u606f\uff08 \u8fd9\u5f88\u91cd\u8981\uff0c\u6bcf\u6b21\u51fa\u9519\u7684\u65f6\u5019\u8bb0\u5f97\u90fd\u8981\u5148\u8fd9\u6837\u505a \uff09\uff0cPython\u5728\u544a\u8bc9\u6211\u4eec\u5c11\u8f93\u5165\u4e86age\u8fd9\u4e2a\u53c2\u6570\uff0c\u770b\u8d77\u6765\u4e24\u4e2a\u6784\u9020\u51fd\u6570Python\u53ea\u63a5\u53d7\u7b2c\u4e8c\u4e2a\uff1a b = Bird ( 3 ) print ( b . age ) # 3 \u8fd9\u6837\u8c03\u7528\u4e4b\u540e\u679c\u7136\u6210\u529f\u4e86\uff0c\u4f60\u4f1a\u53d1\u73b0\uff0c\u867d\u7136\u6211\u4eec\u5199\u4e86\u4e24\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u4f46\u662fPython\u53ea\u5b9e\u73b0\u4e86\u7b2c\u4e8c\u4e2a\uff0c\u5176\u5b9e\u7b2c\u4e00\u4e2a\u662f\u88ab\u7b2c\u4e8c\u4e2a\u5077\u5077\u8986\u76d6\u4e86\uff0c\u5e76\u4e14Python\u4e0d\u4f1a\u7ed9\u6211\u4eec\u62a5\u4efb\u4f55\u9519\u8bef\uff0c\u9664\u975e\u4f60\u53bb\u8c03\u7528\u90a3\u4e2a\u5e76\u4e0d\u5b58\u5728\u7684\u6784\u9020\u51fd\u6570\u3002 Python\u8bed\u8a00\u7684\u7279\u6027\u5c31\u662f\u8fd9\u6837\uff0c\u53ea\u6709\u5f53\u4f60\u6267\u884c\u5230\u5177\u4f53\u7684\u4ee3\u7801\u65f6\uff0c\u624d\u4f1a\u66b4\u9732\u51fa\u9519\u8bef\u3002\u6709\u7684\u65f6\u5019\u5f00\u53d1\u5f88\u8fc5\u901f\uff0c\u6d4b\u8bd5\u4e5f\u5f88\u987a\u7545\uff0c\u4f46\u4f9d\u7136\u6709\u4e00\u4e9b\u95ee\u9898\u88ab\u9690\u85cf\u8d77\u6765\u4e86\uff0c\u53ea\u6709\u5728\u8fd0\u884c\u7684\u65f6\u5019\u624d\u4f1a\u66b4\u9732\u3002Python\u4f5c\u4e3a\u4e00\u95e8\u811a\u672c\u8bed\u8a00\uff0c\u52a8\u6001\u89e3\u91ca\u6267\u884c\uff0c\u56fa\u7136\u6709\u8db3\u591f\u591a\u7684\u4f18\u70b9\uff0c\u4f46\u662f\u76f8\u6bd4\u4e8e\u7f16\u8bd1\u8bed\u8a00\u8fd8\u662f\u6709\u4e00\u4e9b\u7f3a\u70b9\u7684\uff0c\u4f7f\u7528\u7684\u65f6\u5019\u9700\u8981\u6ce8\u610f\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u5982\u4f55\u5b9e\u73b0\u591a\u4e2a\u6784\u9020\u51fd\u6570\u5462\uff1f \u4ed4\u7ec6\u60f3\u60f3\uff0c\u6211\u4eec\u9700\u8981\u7684\u5e76\u4e0d\u4e00\u5b9a\u662f\u591a\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u6211\u4eec\u9700\u8981\u7684\u662f\u5728\u4e0d\u540c\u573a\u666f\u4e0b\u5b8c\u6210\u4e0d\u540c\u7684\u6784\u9020\u3002\u56e0\u4e3aPython\u53ef\u63a5\u53d7\u7684\u53c2\u6570\u975e\u5e38\u7075\u6d3b\uff0c\u6240\u4ee5\u5f88\u591a\u9700\u6c42\u5b8c\u5168\u53ef\u4ee5\u5728\u4e00\u4e2a\u51fd\u6570\u5185\u5b9e\u73b0\u3002 \u6bd4\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u9ed8\u8ba4\u53c2\u6570\uff1a class Bird : color = \"red\" childrens = [] def __init__ ( self , age = 0 ): self . age = age # \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u64cd\u4f5c self . color = \"\" def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( self ): self . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. \u8fd8\u6709\u66f4\u7075\u6d3b\u7684\u65b9\u5f0f\uff0c class Bird : color = \"red\" childrens = [] def __init__ ( self , * args , ** kwargs ): if \"age\" in kwargs : self . age = kwargs [ \"age\" ] # \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u64cd\u4f5c else : self . age = 0 self . color = \"\" def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( self ): self . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. b = Bird ( age = 3 ) print ( b . age ) # 3 \u6240\u4ee5\u5728Python\u4e2d\u6709\u5f88\u591a\u7075\u6d3b\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u8fd9\u4e9b\u9700\u6c42\u3002","title":"\u591a\u4e2a\u6784\u9020\u65b9\u6cd5\uff1f"},{"location":"3-python-class/#_7","text":"C++\u4e2d\u6709\u9759\u6001\u6210\u5458\u53d8\u91cf\uff0c\u53ef\u4ee5\u5728\u4e0d\u5bf9\u7c7b\u8fdb\u884c\u5b9e\u4f8b\u5316\u7684\u60c5\u51b5\u4e0b\u8c03\u7528\uff0cPython\u4e2d\u6709\u6ca1\u6709\u5462\uff1f\u6211\u4eec\u91cd\u65b0\u770b\u4e00\u4e0b\u8fd9\u4e2a\u7c7b\u7684\u5b9a\u4e49\uff0c class Bird : color = \"red\" age = 1 childrens = [] \u6211\u4eec\u8bd5\u4e00\u4e0b\u76f4\u63a5\u8bbf\u95ee\u8fd9\u4e9b\u53d8\u91cf\uff1a Bird . color # red Bird . age # 1 \u6240\u4ee5\uff0c\u5728\u7c7b\u4e2d\u76f4\u63a5\u5b9a\u4e49\u7684\u6210\u5458\u53d8\u91cf\u9ed8\u8ba4\u90fd\u4e0e\u53ef\u4ee5\u901a\u8fc7\u7c7b\u540d\u8bbf\u95ee\uff0c\u7b49\u4ef7\u4e8eC++\u4e2d\u7684\u9759\u6001\u53d8\u91cf\u3002 class Bird : color = \"red\" childrens = [] def __init__ ( self ): self . age = 0 # \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u64cd\u4f5c self . color = \"green\" def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( self ): self . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. b = Bird () print ( b . color ) print ( Bird . color ) print ( b . age ) print ( Bird . age ) green red 0 --------------------------------------------------------------------------- AttributeError Traceback ( most recent call last ) ~ \\A ppData \\L ocal \\T emp/ipykernel_47416/519595942.py in <module> 14 print ( Bird.color ) 15 print ( b.age ) ---> 16 print ( Bird.age ) AttributeError: type object 'Bird' has no attribute 'age' \u6ce8\u610f\u89c2\u5bdf\uff0c\u8fd9\u91cc\u6211\u4eec\u770b\u5230\u4e86\u4e24\u4e2a\u6709\u610f\u601d\u7684\u73b0\u8c61\uff1a - \u901a\u8fc7\u7c7b\u540d\u8bbf\u95eecolor\u548c\u901a\u8fc7\u5bf9\u8c61\u8bbf\u95eecolor\uff0c\u5f97\u5230\u7684\u503c\u4e0d\u4e00\u6837 - \u5728\u7c7b\u65b9\u6cd5\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cfage\uff0c\u901a\u8fc7\u7c7b\u540d\u662f\u65e0\u6cd5\u8bbf\u95ee\u7684","title":"\u9759\u6001\u6210\u5458\u53d8\u91cf"},{"location":"3-python-class/#_8","text":"Python\u7684\u4ee3\u7801\u5728\u7f16\u8bd1\u65f6\uff0c\u65e0\u8bba\u662f\u51fd\u6570\uff0c\u8fd8\u662f\u7c7b\uff0c\u90fd\u751f\u6210\u4e86\u76f8\u5e94\u7684\u5bf9\u8c61\uff0c\u65e0\u8bba\u8fd9\u4e2a\u7c7b\u662f\u5426\u5b9e\u4f8b\u5316\uff0c\u90fd\u751f\u6210\u4e86\u7c7b\u5bf9\u8c61\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u5728\u4e0d\u521b\u5efa\u65b0\u5bf9\u8c61\u7684\u524d\u63d0\u4e0b\u4f60\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u7c7b\u91cc\u9762\u7684\u5185\u5bb9\u3002\u90a3\u4e48\u8fd9\u4e2a\u7c7b\u5bf9\u8c61\u548c\u624b\u52a8\u521b\u5efa\u7684\u65b0\u5bf9\u8c61\u4e4b\u95f4\u6709\u4ec0\u4e48\u533a\u522b\u5462\uff1f class Bird : pass b = Bird () # type print ( type ( Bird )) print ( type ( b )) # <class 'type'> # <class '__main__.Bird'> \u6211\u4eec\u770b\u5230\u4ed6\u4eec\u7684\u7c7b\u578b\uff08type\uff09\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u5728\u6ca1\u6709\u5b9e\u4f8b\u5316\u4e4b\u524d\uff0c\u7c7b\u5bf9\u8c61\u7684\u7c7b\u578b\u7edf\u4e00\u4e3a \"type\"\u3002\u6211\u4eec\u518d\u76f4\u63a5\u6253\u5370\u4ed6\u4eec\uff0c\u770b\u770b\u4ed6\u4eec\u4f1a\u8f93\u51fa\u4ec0\u4e48\uff1a class Bird : pass b = Bird () print (( Bird )) print (( b )) # <class '__main__.Bird'> # <__main__.Bird object at 0x000001DEAD20D6A0> \u6253\u5370\u5bf9\u8c61\u5b9e\u9645\u4e0a\u8c03\u7528\u4e86\u5bf9\u8c61\u7684\u9b54\u6cd5\u65b9\u6cd5\uff1a__str__(), str(obj)\u51fd\u6570\u4e5f\u4f1a\u8c03\u7528\u8fd9\u4e00\u9b54\u6cd5\u65b9\u6cd5\uff0c\u5982\u679c\u4f60\u5e0c\u671b\u5c06object\u8f6c\u6210\u81ea\u5b9a\u4e49\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u8fd9\u4e00\u65b9\u6cd5\u3002 \u6253\u5370\u7c7b\u540d\u5f97\u5230\u4e00\u4e2aclass\u7684\u63cf\u8ff0\uff08\u548ctype(b)\u7684\u8f93\u51fa\u4e00\u6837\uff01\uff0c\u60f3\u60f3\u4e3a\u4ec0\u4e48\uff1f\uff09\uff0c \u6253\u5370\u521b\u5efa\u7684\u5bf9\u8c61\u5e26\u6709\u989d\u5916\u7684\u5730\u5740\u4fe1\u606f\uff0c\u8fd9\u4e2a\u5730\u5740\u5c31\u662f\u5bf9\u8c61\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u3002 \u603b\u4e4b\uff0c\u7c7b\u5bf9\u8c61\u548c\u5b9e\u4f8b\u5316\u7684\u5bf9\u8c61\u4e4b\u95f4\u8fd8\u662f\u6709\u533a\u522b\u7684\u3002 \u7c7b\u5bf9\u8c61\u5c31\u662f\u4e00\u4e2a\u9759\u6001\u5bf9\u8c61\uff0c\u53ef\u4ee5\u7c7b\u6bd4\u4e8eC++\u4e2d\u7684\u9759\u6001\u7c7b\u3002\u6240\u4ee5\uff0c\u5728Python\u4e2d\u4f60\u4e0d\u9700\u8981\u521b\u5efa\u9759\u6001\u6210\u5458\u548c\u9759\u6001\u65b9\u6cd5\uff0c\u7c7b\u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u53d8\u91cf\u548c\u65b9\u6cd5\u90fd\u662f\u9759\u6001\u7684\uff0c\u542c\u8d77\u6765\u662f\u4e0d\u662f\u6709\u70b9\u4e0d\u53ef\u601d\u8bae\uff1f\u6211\u4eec\u81ea\u5df1\u9a8c\u8bc1\u4e00\u4e0b\u662f\u5426\u786e\u5b9e\u5982\u6b64\uff1a class Bird : color = \"red\" childrens = [] def __init__ ( self ): self . age = 0 # \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u64cd\u4f5c self . color = \"green\" def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( self ): self . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. print ( Bird . color ) # red print ( Bird . childrens ) # [] print ( Bird . age ) # AttributeError: type object 'Bird' has no attribute 'age' ! \u6ce8\u610f\uff0c\u601d\u8003\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u8bbf\u95ee age\uff1f Bird . eat () # TypeError: eat() missing 1 required positional argument: 'self' \uff1f \u4e3a\u4ec0\u4e48\u4f1a\u5931\u8d25 \u4e0d\u662f\u8bf4\u597d\u4e86\u7c7b\u5bf9\u8c61\u4e2d\u7684\u6240\u6709\u65b9\u6cd5\u90fd\u662f\u9759\u6001\u65b9\u6cd5\u5417\uff0c\u4e3a\u4ec0\u4e48\u8c03\u7528eat\u65b9\u6cd5\u4f1a\u5931\u8d25\u5462\uff1f \u4ed4\u7ec6\u9605\u8bfb\u9519\u8bef\u63d0\u793a\uff01Python\u544a\u8bc9\u6211\u4eec\uff0c\u6211\u4eec\u5c11\u8f93\u5165\u4e86\u4e00\u4e2a\u53c2\u6570\u3002\u90a3\u5982\u679c\u6211\u4eec\u968f\u4fbf\u4f20\u5165\u4e00\u4e2a\u53c2\u6570\u5462\uff1f Bird . eat ( 1 ) # eat \u5c45\u7136\u8c03\u7528\u6210\u529f\u4e86\uff01 \u5b9e\u9645\u4e0a\uff0c\u56e0\u4e3aeat\u65b9\u6cd5\u4e2d\u5e76\u6ca1\u6709\u4f7f\u7528self\u8fd9\u4e2a\u53c2\u6570\uff0c\u6240\u4ee5\u4f60\u4f20\u5165\u4efb\u4f55\u4e1c\u897f\u90fd\u53ef\u4ee5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u8fd8\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002 \u90a3\u4e48\u8bf7\u601d\u8003\u4e00\u4e0b\uff0c\u4e3a\u4ec0\u4e48\u5728\u5b9e\u4f8b\u5316\u540e\u7684\u5bf9\u8c61\u4e0a\u9762\u8c03\u7528eat\u65b9\u6cd5\u5c31\u4e0d\u9700\u8981\u4f20\u5165\u53c2\u6570\u5462\uff1f \u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u662fPython\u5077\u5077\u5e2e\u52a9\u6211\u4eec\u7ed9\u65b9\u6cd5\u4f20\u5165\u4e86\u8fd9\u4e00\u4e2a\u53c2\u6570\u3002\u8bf7\u8bb0\u4f4f\uff0c\u8fd9\u6b63\u662f\u65b9\u6cd5\u548c\u51fd\u6570\u7684\u91cd\u8981\u533a\u522b\u4e4b\u4e00\uff01 \u5bf9\u8c61\u5728\u8c03\u7528\u65b9\u6cd5\u7684\u65f6\u5019\u4f1a\u5077\u5077\u4f20\u5165\u4e00\u4e2a\u53c2\u6570\u653e\u5230\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u90a3\u4e48\u8fd9\u4e2aself\u53c2\u6570\u7a76\u7adf\u662f\u4ec0\u4e48\u5462\uff1f \u6211\u4eec\u5728\u4e0a\u9762\u63d0\u5230\u8fc7\uff0c\u53ef\u4ee5\u628a\u5b83\u7c7b\u6bd4\u4e8eC++\u7684this\u3002\u4e3a\u4e86\u63a2\u7a76\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u4e0d\u59a8\u518d\u505a\u70b9\u5b9e\u9a8c\uff1a Bird . grow ( 1 ) # \u5982\u6cd5\u70ae\u5236\uff0c\u5c1d\u8bd5\u8c03\u7528grow\u65b9\u6cd5 # AttributeError: 'int' object has no attribute 'age' \u8fd9\u4e00\u6b21\u6211\u4eec\u5931\u8d25\u4e86\uff0cPython\u544a\u8bc9\u6211\u4eec int \u5bf9\u8c61\u6ca1\u6709age\u5c5e\u6027\u3002\u56e0\u4e3a\u6211\u4eec\u5728grow\u51fd\u6570\u4e2d\u4f7f\u7528\u4e86self\u8fd9\u4e2a\u53c2\u6570\uff0c\u5e76\u4e14\u8c03\u7528\u4e86self\u7684\u5c5e\u6027 self.age\u3002\u6211\u4eec\u4f20\u5165\u4e86\u4e00\u4e2a\u6574\u65701\uff0c\u4e8e\u662f\u62a5\u4e86\u4e0a\u9762\u7684\u9519\u8bef\u3002\u800c\u5f53\u4f60\u8c03\u7528 b.grow() \u7684\u65f6\u5019\uff0c\u60c5\u51b5\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u9996\u5148\uff0c\u5728\u521b\u5efa\u5bf9\u8c61b\u7684\u65f6\u5019\u4f1a\u8c03\u7528\u6784\u9020\u65b9\u6cd5__init__\uff0c \u5728\u90a3\u91cc\u4f1a\u521b\u5efaage\u8fd9\u4e2a\u5c5e\u6027\uff0c\u7136\u540ePython\u4f1a\u628a\u5bf9\u8c61\u672c\u8eab\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u5230grow\uff0cself\u81ea\u7136\u4e5f\u5c31\u5177\u6709\u4e86\u8fd9\u4e2a\u5c5e\u6027\u3002\u8c03\u7528self.age\u5c31\u597d\u6bd4c++\u4e2d\u8c03\u7528this->age\u3002 \u5230\u8fd9\u91cc\u8fd8\u6ca1\u7ed3\u675f\u2026\u2026 \u6211\u4eec\u518d\u60f3\u60f3\uff0cPython\u7ed9\u6211\u4eec\u7684\u9519\u8bef\u63d0\u793a\u53ea\u662f\u8bf4\uff1a 'int' object has no attribute 'age'\uff0c \u53ef\u6ca1\u6709\u8bf4\u5fc5\u987b\u8981\u4f20\u5165\u4e00\u4e2aBird\u7684\u5bf9\u8c61\u8fdb\u6765\u554a\uff1f \u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u4ee3\u7801\uff1a class VirtualBird : age = 100 class Bird : color = \"red\" childrens = [] def __init__ ( self ): self . age = 0 # \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u64cd\u4f5c self . color = \"green\" def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( self ): self . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. print ( self . age ) Bird . grow ( VirtualBird ) # 101 \u6211\u4eec\u7528\u4e00\u4e2a\u201c\u5047\u9e1f\u201d\u6210\u529f\u6b3a\u9a97\u4e86Python\uff01\u770b\u8d77\u6765\uff0cself\u8fd9\u4e2a\u53c2\u6570\u4ec5\u4ec5\u662f\u4e00\u4e2a\u53c2\u6570\uff0cPython\u7ea6\u5b9a\u4f1a\u5728\u8c03\u7528\u65b9\u6cd5\u7684\u65f6\u5019\u628a\u5bf9\u8c61\u672c\u8eab\u4f20\u8fdb\u6765\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4f20\u8fdb\u6765\u522b\u7684\u4e1c\u897f\uff0c\u53ea\u8981\u4fdd\u8bc1\u65b9\u6cd5\u672c\u8eab\u80fd\u6b63\u5e38\u5de5\u4f5c\uff01 Python\u91cc\u9762\u6709\u5f88\u591a\u7684\u7ea6\u5b9a\uff0c\u4f60\u53ef\u4ee5\u9075\u5b88\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u9075\u5b88 \uff0c\u751a\u81f3self\u8fd9\u4e2a\u53c2\u6570\u547d\u4e5f\u662f\u7ea6\u5b9a! \u4e0d\u4fe1\u4f60\u770b\uff1a class VirtualBird : age = 100 class Bird : color = \"red\" childrens = [] def __init__ ( self ): self . age = 0 # \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u64cd\u4f5c self . color = \"green\" def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( you ): you . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. print ( you . age ) Bird . grow ( VirtualBird ) # 101 Python\u771f\u662f\u4e00\u95e8\u81ea\u7531\u7684\u8bed\u8a00\uff0c\u5982\u679c\u548cC++\u76f8\u6bd4\uff0c\u5728\u8fd9\u91cc\u4f60\u4eff\u4f5b\u5b8c\u5168\u4e0d\u53d7\u675f\u7f1a\u4e86\u3002\u4e0d\u8fc7\u8981\u5c0f\u5fc3\uff0c\u81ea\u7531\u4e5f\u662f\u6709\u4ee3\u4ef7\u7684\uff0c\u4ed6\u4f1a\u8ba9\u6709\u4e9b\u9519\u8bef\u66f4\u52a0\u9690\u853d\uff0c\u5199\u4ee3\u7801\u7684\u65f6\u5019\u53ef\u4e0d\u8981\u5927\u610f\u4e86\u3002 \u4e8e\u662f\uff0c\u7c7b\u5bf9\u8c61\u4e0b\u9762\u7684\u65b9\u6cd5\u90fd\u662f\u9759\u6001\u65b9\u6cd5\uff08\u4e25\u683c\u6765\u8bf4\u5e94\u8be5\u53eb\u51fd\u6570\uff0c\u4e0b\u9762\u4f1a\u6709\u8bf4\u660e\uff09\uff0c\u5373\u4f7f\u662f\u5e26self\u53c2\u6570\u7684\u4e5f\u662f\u5982\u6b64\u3002 Python\u7c7b\u5bf9\u8c61 1. Python\u662f\u811a\u672c\u8bed\u8a00\uff0cPythonn\u7684\u4ee3\u7801\u5728\u7f16\u8bd1\u65f6\uff0c\u65e0\u8bba\u662f\u51fd\u6570\uff0c\u8fd8\u662f\u7c7b\uff0c\u90fd\u751f\u6210\u4e86\u76f8\u5e94\u7684\u5bf9\u8c61\uff0c\u65e0\u8bba\u8fd9\u4e2a\u7c7b\u662f\u5426\u5b9e\u4f8b\u5316\uff0c\u90fd\u751f\u6210\u4e86\u7c7b\u5bf9\u8c61 2. Python\u7c7b\u5bf9\u8c61\u662f\u4e00\u4e2a\u9759\u6001\u5bf9\u8c61,\u4e00\u65e6\u751f\u6210\uff0c\u5c31\u4e0d\u518d\u53d8\u5316 3. \u7c7b\u5bf9\u8c61\u751f\u6210\u65f6\uff0cinit\u6784\u9020\u51fd\u6570\u6ca1\u6709\u8fd0\u884c,\u6240\u4ee5\u8c03\u7528\u7c7b\u65b9\u6cd5\u65f6\uff0cinit\u6784\u9020\u65b9\u6cd5\u7684\u5b9e\u4f8b\u5c5e\u6027\u4e0d\u5b58\u5728\uff0c\u4e0d\u53ef\u4ee5\u8c03\u7528init\u65b9\u6cd5\u4e2dself.xxx\u5b9e\u4f8b\u5c5e\u6027 4. \u7c7b\u5c5e\u6027\u662f\u7c7b\u5bf9\u8c61\u7684\u9759\u6001\u53d8\u91cf 5. \u7c7b\u65b9\u6cd5/\u51fd\u6570\u662f\u7c7b\u5bf9\u8c61\u7684\u9759\u6001\u65b9\u6cd5 \u5f53\u4e00\u4e2a\u7c7b\u88ab\u5b9e\u4f8b\u5316\u540e\uff0c\u4f1a\u8c03\u7528init\u65b9\u6cd5\uff0c\u7136\u540e\u5728\u5185\u5b58\u4e2d\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\uff0c\u62e5\u6709\u4e00\u4efd\u5c5e\u4e8e\u81ea\u5df1\u7684\u5c5e\u6027\uff0c\u548c\u7c7b\u5bf9\u8c61\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\u3002 class Bird : color = \"red\" age = 1 childrens = [] def __init__ ( self ): self . age = 0 # \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u64cd\u4f5c self . color = \"green\" def eat ( self ): # self \u53ef\u4ee5\u7c7b\u6bd4\u4e8e c++ \u4e2d\u7684this print ( \"eat\" ) def grow ( self ): self . age += 1 # \u6ce8\u610f\uff0c\u5728\u7c7b\u65b9\u6cd5\u4e2d\u5f15\u7528\u7c7b\u6210\u5458\u5fc5\u987b\u7528 self. b = Bird () print ( b . color ) print ( Bird . color ) # green # red \u53ef\u4ee5\u770b\u51fa\uff0c\u6539\u53d8\u5b9e\u4f8b\u5bf9\u8c61\u7684\u5c5e\u6027\u503c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u7c7b\u5bf9\u8c61\u7684\u5c5e\u6027\u503c\u3002","title":"\u7c7b\u5bf9\u8c61\u548c\u5b9e\u4f8b\u5bf9\u8c61"},{"location":"3-python-class/#_9","text":"\u56de\u987e\u4e00\u4e0b\u6211\u4eec\u4e0a\u9762\u8c03\u7528\u7c7b\u5bf9\u8c61\u9759\u6001\u65b9\u6cd5\u7684\u65b9\u5f0f\uff1a\u5728\u8c03\u7528eat\u65b9\u6cd5\u7684\u65f6\u5019\u5fc5\u987b\u4f20\u5165\u4e00\u4e2adummy\u7684\u53c2\u6570\uff0c\u8fd9\u770b\u8d77\u6765\u975e\u5e38\u4e0d\u65b9\u4fbf\uff0c\u5982\u679c\u6211\u4eec\u786e\u5b9a\u8fd9\u662f\u4e00\u4e2a\u7c7b\u7684\u9759\u6001\uff0c\u65b9\u6cd5\uff0c\u662f\u5426\u53ef\u4ee5\u4e0d\u8981self\u8fd9\u4e2a\u53c2\u6570\u5462\uff1f class Bird : def eat (): print ( \"eat\" ) Bird . eat () # eat \u786e\u5b9e\u53ef\u4ee5\uff0c\u8fd9\u6837\u770b\u8d77\u6765\u81ea\u7136\u591a\u4e86\u3002\u4e0d\u8fc7\u8fd9\u5e26\u6765\u4e86\u65b0\u7684\u95ee\u9898\uff1a class Bird : def fly ( self ): print ( \"bird fly\" ) def eat (): print ( \"eat\" ) b = Bird () b . fly () b . eat () # bird fly # TypeError: eat() takes 0 positional arguments but 1 was given \u5982\u679c\u8fd9\u6837\u5b9a\u4e49\uff0c\u5b9e\u4f8b\u5bf9\u8c61\u5c31\u65e0\u6cd5\u8c03\u7528\u8fd9\u4e00\u65b9\u6cd5\u4e86\uff0c\u56e0\u4e3a\u5b9e\u4f8b\u5bf9\u8c61\u5728\u8c03\u7528\u7684\u65f6\u5019\u603b\u662f\u5077\u5077\u4f20\u5165\u4e86\u4e00\u4e2a\u53c2\u6570\u3002\u5728C++\u91cc\u9762\uff0c\u9759\u6001\u65b9\u6cd5\u4e0d\u7ba1\u7528\u7c7b\u540d\u8fd8\u662f\u65b0\u5efa\u7684\u5bf9\u8c61\u90fd\u53ef\u4ee5\u6b63\u5e38\u8c03\u7528\uff0c\u5728Python\u91cc\u9762\u5c31\u4e0d\u80fd\u6709\u7c7b\u4f3c\u7684\u65b9\u6cd5\u5417\uff1f\u5f53\u7136\u6709,\u800c\u4e14\u5b9e\u73b0\u8d77\u6765\u5f88\u7b80\u5355: class Bird : def fly ( self ): print ( \"bird fly\" ) @staticmethod def eat (): print ( \"eat\" ) Bird . eat () b = Bird () b . fly () b . eat () # eat # bird fly # eat \u53ef\u4ee5\u770b\u5230,\u73b0\u5728\u4e0d\u7ba1\u600e\u4e48\u8c03\u7528\u9e1f\u513f\u90fd\u53ef\u6b63\u5e38\u5403\u4e86.","title":"\u9759\u6001\u65b9\u6cd5"},{"location":"3-python-class/#_10","text":"\u8fd9\u4e2a @staticmethod \u770b\u8d77\u6765\u6709\u70b9\u795e\u79d8,\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u5462? \u4f60\u53ef\u4ee5\u81ea\u5df1\u5199\u4e00\u4e2a\u88c5\u9970\u5668: \u88c5\u9970\u5668\u628a\u65b9\u6cd5\u53d8\u6210\u4e86\u51fd\u6570~","title":"\u88c5\u9970\u5668/\u6ce8\u89e3"},{"location":"3-python-class/#_11","text":"","title":"\u65b9\u6cd5\u548c\u51fd\u6570\u7684\u533a\u522b"},{"location":"3-python-class/#__get__","text":"","title":"\u9b54\u6cd5\u65b9\u6cd5:__get__"},{"location":"3-python-class/#_12","text":"\u7c7b\u65b9\u6cd5\u548c\u9759\u6001\u65b9\u6cd5\u4e4b\u95f4\u6709\u4e00\u4e9b\u533a\u522b, \u5b9a\u4e49\u5728class\u4e2d\u7684\u51fd\u6570\uff0c\u5728\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u624d\u4f1a\u53d8\u6210\u65b9\u6cd5\uff0c\u5426\u5219\u5b83\u4f9d\u7136\u53ea\u662f\u4e2a\u51fd\u6570\u3002","title":"\u7c7b\u65b9\u6cd5"},{"location":"3-python-class/#_13","text":"","title":"\u7c7b\u7ee7\u627f"},{"location":"3-python-class/#_14","text":"","title":"\u8c03\u7528\u8d85\u7c7b\u65b9\u6cd5"},{"location":"3-python-class/#override","text":"","title":"Override"},{"location":"3-python-class/#_15","text":"","title":"\u5f02\u5e38"},{"location":"4-python-module/","text":"\u6a21\u5757\u5bfc\u5165 \u5b89\u88c5\u6a21\u5757 \u81ea\u5b9a\u4e49\u6a21\u5757 \u4ee5\u6a21\u5757\u65b9\u5f0f\u8fd0\u884c\u4ee3\u7801 \u6a21\u5757\u5f15\u7528 \u6269\u5c55Python \u6253\u5305\u53d1\u5e03 zip exe \u865a\u62df\u73af\u5883","title":"\u6a21\u5757"},{"location":"4-python-module/#_1","text":"","title":"\u6a21\u5757\u5bfc\u5165"},{"location":"4-python-module/#_2","text":"","title":"\u5b89\u88c5\u6a21\u5757"},{"location":"4-python-module/#_3","text":"","title":"\u81ea\u5b9a\u4e49\u6a21\u5757"},{"location":"4-python-module/#_4","text":"","title":"\u4ee5\u6a21\u5757\u65b9\u5f0f\u8fd0\u884c\u4ee3\u7801"},{"location":"4-python-module/#_5","text":"","title":"\u6a21\u5757\u5f15\u7528"},{"location":"4-python-module/#python","text":"","title":"\u6269\u5c55Python"},{"location":"4-python-module/#_6","text":"","title":"\u6253\u5305\u53d1\u5e03"},{"location":"4-python-module/#zip","text":"","title":"zip"},{"location":"4-python-module/#exe","text":"","title":"exe"},{"location":"4-python-module/#_7","text":"","title":"\u865a\u62df\u73af\u5883"},{"location":"5-python-numpy/","text":"\u79d1\u5b66\u8ba1\u7b97 Numpy Scipy","title":"\u79d1\u5b66\u8ba1\u7b97"},{"location":"5-python-numpy/#_1","text":"","title":"\u79d1\u5b66\u8ba1\u7b97"},{"location":"5-python-numpy/#numpy","text":"","title":"Numpy"},{"location":"5-python-numpy/#scipy","text":"","title":"Scipy"},{"location":"6-python-applications/","text":"Python\u5e94\u7528\u5b9e\u6218 \u8ba1\u7b97\u673a\u89c6\u89c9 \u533b\u5b66\u5f71\u50cf CT\u56fe\u50cf\u4eba\u4f53\u8f6e\u5ed3\u5206\u5272 Floodfill \u7b97\u6cd5 CT\u56fe\u50cf\u80ba\u90e8\u8f6e\u5ed3\u5206\u5272","title":"\u5b9e\u6218"},{"location":"6-python-applications/#python","text":"","title":"Python\u5e94\u7528\u5b9e\u6218"},{"location":"6-python-applications/#_1","text":"","title":"\u8ba1\u7b97\u673a\u89c6\u89c9"},{"location":"6-python-applications/#_2","text":"","title":"\u533b\u5b66\u5f71\u50cf"},{"location":"6-python-applications/#ct","text":"Floodfill \u7b97\u6cd5","title":"CT\u56fe\u50cf\u4eba\u4f53\u8f6e\u5ed3\u5206\u5272"},{"location":"6-python-applications/#ct_1","text":"","title":"CT\u56fe\u50cf\u80ba\u90e8\u8f6e\u5ed3\u5206\u5272"}]}